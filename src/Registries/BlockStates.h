#pragma once

#include "Globals.h"
#include "BlockState.h"
#include "Defines.h"

namespace Block
{
	namespace AcaciaButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState AcaciaButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8707;
					else return 8708;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8709;
					else return 8710;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8711;
					else return 8712;
				else
					if (Powered) return 8713;
					else return 8714;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8715;
					else return 8716;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8717;
					else return 8718;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8719;
					else return 8720;
				else
					if (Powered) return 8721;
					else return 8722;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8723;
					else return 8724;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8725;
					else return 8726;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8727;
					else return 8728;
				else
					if (Powered) return 8729;
					else return 8730;
		}
		BlockState AcaciaButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState AcaciaDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12014;
							else return 12015;
						else
							if (Powered) return 12016;
							else return 12017;
					else
						if (Open)
							if (Powered) return 12018;
							else return 12019;
						else
							if (Powered) return 12020;
							else return 12021;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12022;
							else return 12023;
						else
							if (Powered) return 12024;
							else return 12025;
					else
						if (Open)
							if (Powered) return 12026;
							else return 12027;
						else
							if (Powered) return 12028;
							else return 12029;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12030;
							else return 12031;
						else
							if (Powered) return 12032;
							else return 12033;
					else
						if (Open)
							if (Powered) return 12034;
							else return 12035;
						else
							if (Powered) return 12036;
							else return 12037;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12038;
							else return 12039;
						else
							if (Powered) return 12040;
							else return 12041;
					else
						if (Open)
							if (Powered) return 12042;
							else return 12043;
						else
							if (Powered) return 12044;
							else return 12045;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12046;
							else return 12047;
						else
							if (Powered) return 12048;
							else return 12049;
					else
						if (Open)
							if (Powered) return 12050;
							else return 12051;
						else
							if (Powered) return 12052;
							else return 12053;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12054;
							else return 12055;
						else
							if (Powered) return 12056;
							else return 12057;
					else
						if (Open)
							if (Powered) return 12058;
							else return 12059;
						else
							if (Powered) return 12060;
							else return 12061;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12062;
							else return 12063;
						else
							if (Powered) return 12064;
							else return 12065;
					else
						if (Open)
							if (Powered) return 12066;
							else return 12067;
						else
							if (Powered) return 12068;
							else return 12069;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12070;
							else return 12071;
						else
							if (Powered) return 12072;
							else return 12073;
					else
						if (Open)
							if (Powered) return 12074;
							else return 12075;
						else
							if (Powered) return 12076;
							else return 12077;
		}
		BlockState AcaciaDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaFence
	{
		constexpr BlockState AcaciaFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11662;
							else return 11663;
						else
							if (West) return 11664;
							else return 11665;
					else
						if (Waterlogged)
							if (West) return 11666;
							else return 11667;
						else
							if (West) return 11668;
							else return 11669;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11670;
							else return 11671;
						else
							if (West) return 11672;
							else return 11673;
					else
						if (Waterlogged)
							if (West) return 11674;
							else return 11675;
						else
							if (West) return 11676;
							else return 11677;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11678;
							else return 11679;
						else
							if (West) return 11680;
							else return 11681;
					else
						if (Waterlogged)
							if (West) return 11682;
							else return 11683;
						else
							if (West) return 11684;
							else return 11685;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11686;
							else return 11687;
						else
							if (West) return 11688;
							else return 11689;
					else
						if (Waterlogged)
							if (West) return 11690;
							else return 11691;
						else
							if (West) return 11692;
							else return 11693;
		}
		BlockState AcaciaFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace AcaciaFenceGate
	{
		constexpr BlockState AcaciaFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11406;
						else return 11407;
					else
						if (Powered) return 11408;
						else return 11409;
				else
					if (Open)
						if (Powered) return 11410;
						else return 11411;
					else
						if (Powered) return 11412;
						else return 11413;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11414;
						else return 11415;
					else
						if (Powered) return 11416;
						else return 11417;
				else
					if (Open)
						if (Powered) return 11418;
						else return 11419;
					else
						if (Powered) return 11420;
						else return 11421;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11422;
						else return 11423;
					else
						if (Powered) return 11424;
						else return 11425;
				else
					if (Open)
						if (Powered) return 11426;
						else return 11427;
					else
						if (Powered) return 11428;
						else return 11429;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11430;
						else return 11431;
					else
						if (Powered) return 11432;
						else return 11433;
				else
					if (Open)
						if (Powered) return 11434;
						else return 11435;
					else
						if (Powered) return 11436;
						else return 11437;
		}
		BlockState AcaciaFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace AcaciaHangingSign
	{
		constexpr BlockState AcaciaHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5026;
					else return 5027;
				else if (Rotation == 1)
					if (Waterlogged) return 5028;
					else return 5029;
				else if (Rotation == 2)
					if (Waterlogged) return 5030;
					else return 5031;
				else if (Rotation == 3)
					if (Waterlogged) return 5032;
					else return 5033;
				else if (Rotation == 4)
					if (Waterlogged) return 5034;
					else return 5035;
				else if (Rotation == 5)
					if (Waterlogged) return 5036;
					else return 5037;
				else if (Rotation == 6)
					if (Waterlogged) return 5038;
					else return 5039;
				else if (Rotation == 7)
					if (Waterlogged) return 5040;
					else return 5041;
				else if (Rotation == 8)
					if (Waterlogged) return 5042;
					else return 5043;
				else if (Rotation == 9)
					if (Waterlogged) return 5044;
					else return 5045;
				else if (Rotation == 10)
					if (Waterlogged) return 5046;
					else return 5047;
				else if (Rotation == 11)
					if (Waterlogged) return 5048;
					else return 5049;
				else if (Rotation == 12)
					if (Waterlogged) return 5050;
					else return 5051;
				else if (Rotation == 13)
					if (Waterlogged) return 5052;
					else return 5053;
				else if (Rotation == 14)
					if (Waterlogged) return 5054;
					else return 5055;
				else
					if (Waterlogged) return 5056;
					else return 5057;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5058;
					else return 5059;
				else if (Rotation == 1)
					if (Waterlogged) return 5060;
					else return 5061;
				else if (Rotation == 2)
					if (Waterlogged) return 5062;
					else return 5063;
				else if (Rotation == 3)
					if (Waterlogged) return 5064;
					else return 5065;
				else if (Rotation == 4)
					if (Waterlogged) return 5066;
					else return 5067;
				else if (Rotation == 5)
					if (Waterlogged) return 5068;
					else return 5069;
				else if (Rotation == 6)
					if (Waterlogged) return 5070;
					else return 5071;
				else if (Rotation == 7)
					if (Waterlogged) return 5072;
					else return 5073;
				else if (Rotation == 8)
					if (Waterlogged) return 5074;
					else return 5075;
				else if (Rotation == 9)
					if (Waterlogged) return 5076;
					else return 5077;
				else if (Rotation == 10)
					if (Waterlogged) return 5078;
					else return 5079;
				else if (Rotation == 11)
					if (Waterlogged) return 5080;
					else return 5081;
				else if (Rotation == 12)
					if (Waterlogged) return 5082;
					else return 5083;
				else if (Rotation == 13)
					if (Waterlogged) return 5084;
					else return 5085;
				else if (Rotation == 14)
					if (Waterlogged) return 5086;
					else return 5087;
				else
					if (Waterlogged) return 5088;
					else return 5089;
		}
		BlockState AcaciaHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaLeaves
	{
		constexpr BlockState AcaciaLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 349;
					else return 350;
				else
					if (Waterlogged) return 351;
					else return 352;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 353;
					else return 354;
				else
					if (Waterlogged) return 355;
					else return 356;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 357;
					else return 358;
				else
					if (Waterlogged) return 359;
					else return 360;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 361;
					else return 362;
				else
					if (Waterlogged) return 363;
					else return 364;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 365;
					else return 366;
				else
					if (Waterlogged) return 367;
					else return 368;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 369;
					else return 370;
				else
					if (Waterlogged) return 371;
					else return 372;
			else
				if (Persistent)
					if (Waterlogged) return 373;
					else return 374;
				else
					if (Waterlogged) return 375;
					else return 376;
		}
		BlockState AcaciaLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState AcaciaLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 142;
			else if (Axis == Axis::Y) return 143;
			else return 144;
		}
		BlockState AcaciaLog();
		enum Axis Axis(BlockState Block);
	}
	namespace AcaciaPlanks
	{
		constexpr BlockState AcaciaPlanks()
		{
			return 19;
		}
	}
	namespace AcaciaPressurePlate
	{
		constexpr BlockState AcaciaPressurePlate(const bool Powered)
		{
			if (Powered) return 5724;
			else return 5725;
		}
		BlockState AcaciaPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace AcaciaSapling
	{
		constexpr BlockState AcaciaSapling(const int Stage)
		{
			if (Stage == 0) return 33;
			else return 34;
		}
		BlockState AcaciaSapling();
		int Stage(BlockState Block);
	}
	namespace AcaciaSign
	{
		constexpr BlockState AcaciaSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4398;
				else return 4399;
			else if (Rotation == 1)
				if (Waterlogged) return 4400;
				else return 4401;
			else if (Rotation == 2)
				if (Waterlogged) return 4402;
				else return 4403;
			else if (Rotation == 3)
				if (Waterlogged) return 4404;
				else return 4405;
			else if (Rotation == 4)
				if (Waterlogged) return 4406;
				else return 4407;
			else if (Rotation == 5)
				if (Waterlogged) return 4408;
				else return 4409;
			else if (Rotation == 6)
				if (Waterlogged) return 4410;
				else return 4411;
			else if (Rotation == 7)
				if (Waterlogged) return 4412;
				else return 4413;
			else if (Rotation == 8)
				if (Waterlogged) return 4414;
				else return 4415;
			else if (Rotation == 9)
				if (Waterlogged) return 4416;
				else return 4417;
			else if (Rotation == 10)
				if (Waterlogged) return 4418;
				else return 4419;
			else if (Rotation == 11)
				if (Waterlogged) return 4420;
				else return 4421;
			else if (Rotation == 12)
				if (Waterlogged) return 4422;
				else return 4423;
			else if (Rotation == 13)
				if (Waterlogged) return 4424;
				else return 4425;
			else if (Rotation == 14)
				if (Waterlogged) return 4426;
				else return 4427;
			else
				if (Waterlogged) return 4428;
				else return 4429;
		}
		BlockState AcaciaSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState AcaciaSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11186;
				else return 11187;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11188;
				else return 11189;
			else
				if (Waterlogged) return 11190;
				else return 11191;
		}
		BlockState AcaciaSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState AcaciaStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9884;
						else return 9885;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9886;
						else return 9887;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9888;
						else return 9889;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9890;
						else return 9891;
					else
						if (Waterlogged) return 9892;
						else return 9893;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9894;
						else return 9895;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9896;
						else return 9897;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9898;
						else return 9899;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9900;
						else return 9901;
					else
						if (Waterlogged) return 9902;
						else return 9903;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9904;
						else return 9905;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9906;
						else return 9907;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9908;
						else return 9909;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9910;
						else return 9911;
					else
						if (Waterlogged) return 9912;
						else return 9913;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9914;
						else return 9915;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9916;
						else return 9917;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9918;
						else return 9919;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9920;
						else return 9921;
					else
						if (Waterlogged) return 9922;
						else return 9923;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9924;
						else return 9925;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9926;
						else return 9927;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9928;
						else return 9929;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9930;
						else return 9931;
					else
						if (Waterlogged) return 9932;
						else return 9933;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9934;
						else return 9935;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9936;
						else return 9937;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9938;
						else return 9939;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9940;
						else return 9941;
					else
						if (Waterlogged) return 9942;
						else return 9943;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9944;
						else return 9945;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9946;
						else return 9947;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9948;
						else return 9949;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9950;
						else return 9951;
					else
						if (Waterlogged) return 9952;
						else return 9953;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9954;
						else return 9955;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9956;
						else return 9957;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9958;
						else return 9959;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9960;
						else return 9961;
					else
						if (Waterlogged) return 9962;
						else return 9963;
		}
		BlockState AcaciaStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState AcaciaTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6217;
							else return 6218;
						else
							if (Waterlogged) return 6219;
							else return 6220;
					else
						if (Powered)
							if (Waterlogged) return 6221;
							else return 6222;
						else
							if (Waterlogged) return 6223;
							else return 6224;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6225;
							else return 6226;
						else
							if (Waterlogged) return 6227;
							else return 6228;
					else
						if (Powered)
							if (Waterlogged) return 6229;
							else return 6230;
						else
							if (Waterlogged) return 6231;
							else return 6232;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6233;
							else return 6234;
						else
							if (Waterlogged) return 6235;
							else return 6236;
					else
						if (Powered)
							if (Waterlogged) return 6237;
							else return 6238;
						else
							if (Waterlogged) return 6239;
							else return 6240;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6241;
							else return 6242;
						else
							if (Waterlogged) return 6243;
							else return 6244;
					else
						if (Powered)
							if (Waterlogged) return 6245;
							else return 6246;
						else
							if (Waterlogged) return 6247;
							else return 6248;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6249;
							else return 6250;
						else
							if (Waterlogged) return 6251;
							else return 6252;
					else
						if (Powered)
							if (Waterlogged) return 6253;
							else return 6254;
						else
							if (Waterlogged) return 6255;
							else return 6256;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6257;
							else return 6258;
						else
							if (Waterlogged) return 6259;
							else return 6260;
					else
						if (Powered)
							if (Waterlogged) return 6261;
							else return 6262;
						else
							if (Waterlogged) return 6263;
							else return 6264;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6265;
							else return 6266;
						else
							if (Waterlogged) return 6267;
							else return 6268;
					else
						if (Powered)
							if (Waterlogged) return 6269;
							else return 6270;
						else
							if (Waterlogged) return 6271;
							else return 6272;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6273;
							else return 6274;
						else
							if (Waterlogged) return 6275;
							else return 6276;
					else
						if (Powered)
							if (Waterlogged) return 6277;
							else return 6278;
						else
							if (Waterlogged) return 6279;
							else return 6280;
		}
		BlockState AcaciaTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWallHangingSign
	{
		constexpr BlockState AcaciaWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5562;
				else return 5563;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5564;
				else return 5565;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5566;
				else return 5567;
			else
				if (Waterlogged) return 5568;
				else return 5569;
		}
		BlockState AcaciaWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWallSign
	{
		constexpr BlockState AcaciaWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4786;
				else return 4787;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4788;
				else return 4789;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4790;
				else return 4791;
			else
				if (Waterlogged) return 4792;
				else return 4793;
		}
		BlockState AcaciaWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AcaciaWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState AcaciaWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 201;
			else if (Axis == Axis::Y) return 202;
			else return 203;
		}
		BlockState AcaciaWood();
		enum Axis Axis(BlockState Block);
	}
	namespace ActivatorRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState ActivatorRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 9320;
					else return 9321;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 9322;
					else return 9323;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 9324;
					else return 9325;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 9326;
					else return 9327;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 9328;
					else return 9329;
				else
					if (Waterlogged) return 9330;
					else return 9331;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 9332;
					else return 9333;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 9334;
					else return 9335;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 9336;
					else return 9337;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 9338;
					else return 9339;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 9340;
					else return 9341;
				else
					if (Waterlogged) return 9342;
					else return 9343;
		}
		BlockState ActivatorRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Air
	{
		constexpr BlockState Air()
		{
			return 0;
		}
	}
	namespace Allium
	{
		constexpr BlockState Allium()
		{
			return 2079;
		}
	}
	namespace AmethystBlock
	{
		constexpr BlockState AmethystBlock()
		{
			return 21031;
		}
	}
	namespace AmethystCluster
	{
		constexpr BlockState AmethystCluster(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 21033;
				else return 21034;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 21035;
				else return 21036;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 21037;
				else return 21038;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 21039;
				else return 21040;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 21041;
				else return 21042;
			else
				if (Waterlogged) return 21043;
				else return 21044;
		}
		BlockState AmethystCluster();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AncientDebris
	{
		constexpr BlockState AncientDebris()
		{
			return 19448;
		}
	}
	namespace Andesite
	{
		constexpr BlockState Andesite()
		{
			return 6;
		}
	}
	namespace AndesiteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState AndesiteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14136;
				else return 14137;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14138;
				else return 14139;
			else
				if (Waterlogged) return 14140;
				else return 14141;
		}
		BlockState AndesiteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AndesiteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState AndesiteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13762;
						else return 13763;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13764;
						else return 13765;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13766;
						else return 13767;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13768;
						else return 13769;
					else
						if (Waterlogged) return 13770;
						else return 13771;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13772;
						else return 13773;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13774;
						else return 13775;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13776;
						else return 13777;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13778;
						else return 13779;
					else
						if (Waterlogged) return 13780;
						else return 13781;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13782;
						else return 13783;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13784;
						else return 13785;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13786;
						else return 13787;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13788;
						else return 13789;
					else
						if (Waterlogged) return 13790;
						else return 13791;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13792;
						else return 13793;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13794;
						else return 13795;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13796;
						else return 13797;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13798;
						else return 13799;
					else
						if (Waterlogged) return 13800;
						else return 13801;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13802;
						else return 13803;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13804;
						else return 13805;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13806;
						else return 13807;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13808;
						else return 13809;
					else
						if (Waterlogged) return 13810;
						else return 13811;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13812;
						else return 13813;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13814;
						else return 13815;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13816;
						else return 13817;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13818;
						else return 13819;
					else
						if (Waterlogged) return 13820;
						else return 13821;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13822;
						else return 13823;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13824;
						else return 13825;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13826;
						else return 13827;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13828;
						else return 13829;
					else
						if (Waterlogged) return 13830;
						else return 13831;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13832;
						else return 13833;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13834;
						else return 13835;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13836;
						else return 13837;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13838;
						else return 13839;
					else
						if (Waterlogged) return 13840;
						else return 13841;
		}
		BlockState AndesiteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AndesiteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState AndesiteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16752;
								else if (West == West::Low) return 16753;
								else return 16754;
							else
								if (West == West::None) return 16755;
								else if (West == West::Low) return 16756;
								else return 16757;
						else
							if (Waterlogged)
								if (West == West::None) return 16758;
								else if (West == West::Low) return 16759;
								else return 16760;
							else
								if (West == West::None) return 16761;
								else if (West == West::Low) return 16762;
								else return 16763;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16764;
								else if (West == West::Low) return 16765;
								else return 16766;
							else
								if (West == West::None) return 16767;
								else if (West == West::Low) return 16768;
								else return 16769;
						else
							if (Waterlogged)
								if (West == West::None) return 16770;
								else if (West == West::Low) return 16771;
								else return 16772;
							else
								if (West == West::None) return 16773;
								else if (West == West::Low) return 16774;
								else return 16775;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16776;
								else if (West == West::Low) return 16777;
								else return 16778;
							else
								if (West == West::None) return 16779;
								else if (West == West::Low) return 16780;
								else return 16781;
						else
							if (Waterlogged)
								if (West == West::None) return 16782;
								else if (West == West::Low) return 16783;
								else return 16784;
							else
								if (West == West::None) return 16785;
								else if (West == West::Low) return 16786;
								else return 16787;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16788;
								else if (West == West::Low) return 16789;
								else return 16790;
							else
								if (West == West::None) return 16791;
								else if (West == West::Low) return 16792;
								else return 16793;
						else
							if (Waterlogged)
								if (West == West::None) return 16794;
								else if (West == West::Low) return 16795;
								else return 16796;
							else
								if (West == West::None) return 16797;
								else if (West == West::Low) return 16798;
								else return 16799;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16800;
								else if (West == West::Low) return 16801;
								else return 16802;
							else
								if (West == West::None) return 16803;
								else if (West == West::Low) return 16804;
								else return 16805;
						else
							if (Waterlogged)
								if (West == West::None) return 16806;
								else if (West == West::Low) return 16807;
								else return 16808;
							else
								if (West == West::None) return 16809;
								else if (West == West::Low) return 16810;
								else return 16811;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16812;
								else if (West == West::Low) return 16813;
								else return 16814;
							else
								if (West == West::None) return 16815;
								else if (West == West::Low) return 16816;
								else return 16817;
						else
							if (Waterlogged)
								if (West == West::None) return 16818;
								else if (West == West::Low) return 16819;
								else return 16820;
							else
								if (West == West::None) return 16821;
								else if (West == West::Low) return 16822;
								else return 16823;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16824;
								else if (West == West::Low) return 16825;
								else return 16826;
							else
								if (West == West::None) return 16827;
								else if (West == West::Low) return 16828;
								else return 16829;
						else
							if (Waterlogged)
								if (West == West::None) return 16830;
								else if (West == West::Low) return 16831;
								else return 16832;
							else
								if (West == West::None) return 16833;
								else if (West == West::Low) return 16834;
								else return 16835;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16836;
								else if (West == West::Low) return 16837;
								else return 16838;
							else
								if (West == West::None) return 16839;
								else if (West == West::Low) return 16840;
								else return 16841;
						else
							if (Waterlogged)
								if (West == West::None) return 16842;
								else if (West == West::Low) return 16843;
								else return 16844;
							else
								if (West == West::None) return 16845;
								else if (West == West::Low) return 16846;
								else return 16847;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16848;
								else if (West == West::Low) return 16849;
								else return 16850;
							else
								if (West == West::None) return 16851;
								else if (West == West::Low) return 16852;
								else return 16853;
						else
							if (Waterlogged)
								if (West == West::None) return 16854;
								else if (West == West::Low) return 16855;
								else return 16856;
							else
								if (West == West::None) return 16857;
								else if (West == West::Low) return 16858;
								else return 16859;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16860;
								else if (West == West::Low) return 16861;
								else return 16862;
							else
								if (West == West::None) return 16863;
								else if (West == West::Low) return 16864;
								else return 16865;
						else
							if (Waterlogged)
								if (West == West::None) return 16866;
								else if (West == West::Low) return 16867;
								else return 16868;
							else
								if (West == West::None) return 16869;
								else if (West == West::Low) return 16870;
								else return 16871;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16872;
								else if (West == West::Low) return 16873;
								else return 16874;
							else
								if (West == West::None) return 16875;
								else if (West == West::Low) return 16876;
								else return 16877;
						else
							if (Waterlogged)
								if (West == West::None) return 16878;
								else if (West == West::Low) return 16879;
								else return 16880;
							else
								if (West == West::None) return 16881;
								else if (West == West::Low) return 16882;
								else return 16883;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16884;
								else if (West == West::Low) return 16885;
								else return 16886;
							else
								if (West == West::None) return 16887;
								else if (West == West::Low) return 16888;
								else return 16889;
						else
							if (Waterlogged)
								if (West == West::None) return 16890;
								else if (West == West::Low) return 16891;
								else return 16892;
							else
								if (West == West::None) return 16893;
								else if (West == West::Low) return 16894;
								else return 16895;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16896;
								else if (West == West::Low) return 16897;
								else return 16898;
							else
								if (West == West::None) return 16899;
								else if (West == West::Low) return 16900;
								else return 16901;
						else
							if (Waterlogged)
								if (West == West::None) return 16902;
								else if (West == West::Low) return 16903;
								else return 16904;
							else
								if (West == West::None) return 16905;
								else if (West == West::Low) return 16906;
								else return 16907;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16908;
								else if (West == West::Low) return 16909;
								else return 16910;
							else
								if (West == West::None) return 16911;
								else if (West == West::Low) return 16912;
								else return 16913;
						else
							if (Waterlogged)
								if (West == West::None) return 16914;
								else if (West == West::Low) return 16915;
								else return 16916;
							else
								if (West == West::None) return 16917;
								else if (West == West::Low) return 16918;
								else return 16919;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16920;
								else if (West == West::Low) return 16921;
								else return 16922;
							else
								if (West == West::None) return 16923;
								else if (West == West::Low) return 16924;
								else return 16925;
						else
							if (Waterlogged)
								if (West == West::None) return 16926;
								else if (West == West::Low) return 16927;
								else return 16928;
							else
								if (West == West::None) return 16929;
								else if (West == West::Low) return 16930;
								else return 16931;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16932;
								else if (West == West::Low) return 16933;
								else return 16934;
							else
								if (West == West::None) return 16935;
								else if (West == West::Low) return 16936;
								else return 16937;
						else
							if (Waterlogged)
								if (West == West::None) return 16938;
								else if (West == West::Low) return 16939;
								else return 16940;
							else
								if (West == West::None) return 16941;
								else if (West == West::Low) return 16942;
								else return 16943;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16944;
								else if (West == West::Low) return 16945;
								else return 16946;
							else
								if (West == West::None) return 16947;
								else if (West == West::Low) return 16948;
								else return 16949;
						else
							if (Waterlogged)
								if (West == West::None) return 16950;
								else if (West == West::Low) return 16951;
								else return 16952;
							else
								if (West == West::None) return 16953;
								else if (West == West::Low) return 16954;
								else return 16955;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16956;
								else if (West == West::Low) return 16957;
								else return 16958;
							else
								if (West == West::None) return 16959;
								else if (West == West::Low) return 16960;
								else return 16961;
						else
							if (Waterlogged)
								if (West == West::None) return 16962;
								else if (West == West::Low) return 16963;
								else return 16964;
							else
								if (West == West::None) return 16965;
								else if (West == West::Low) return 16966;
								else return 16967;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16968;
								else if (West == West::Low) return 16969;
								else return 16970;
							else
								if (West == West::None) return 16971;
								else if (West == West::Low) return 16972;
								else return 16973;
						else
							if (Waterlogged)
								if (West == West::None) return 16974;
								else if (West == West::Low) return 16975;
								else return 16976;
							else
								if (West == West::None) return 16977;
								else if (West == West::Low) return 16978;
								else return 16979;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16980;
								else if (West == West::Low) return 16981;
								else return 16982;
							else
								if (West == West::None) return 16983;
								else if (West == West::Low) return 16984;
								else return 16985;
						else
							if (Waterlogged)
								if (West == West::None) return 16986;
								else if (West == West::Low) return 16987;
								else return 16988;
							else
								if (West == West::None) return 16989;
								else if (West == West::Low) return 16990;
								else return 16991;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16992;
								else if (West == West::Low) return 16993;
								else return 16994;
							else
								if (West == West::None) return 16995;
								else if (West == West::Low) return 16996;
								else return 16997;
						else
							if (Waterlogged)
								if (West == West::None) return 16998;
								else if (West == West::Low) return 16999;
								else return 17000;
							else
								if (West == West::None) return 17001;
								else if (West == West::Low) return 17002;
								else return 17003;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17004;
								else if (West == West::Low) return 17005;
								else return 17006;
							else
								if (West == West::None) return 17007;
								else if (West == West::Low) return 17008;
								else return 17009;
						else
							if (Waterlogged)
								if (West == West::None) return 17010;
								else if (West == West::Low) return 17011;
								else return 17012;
							else
								if (West == West::None) return 17013;
								else if (West == West::Low) return 17014;
								else return 17015;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17016;
								else if (West == West::Low) return 17017;
								else return 17018;
							else
								if (West == West::None) return 17019;
								else if (West == West::Low) return 17020;
								else return 17021;
						else
							if (Waterlogged)
								if (West == West::None) return 17022;
								else if (West == West::Low) return 17023;
								else return 17024;
							else
								if (West == West::None) return 17025;
								else if (West == West::Low) return 17026;
								else return 17027;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17028;
								else if (West == West::Low) return 17029;
								else return 17030;
							else
								if (West == West::None) return 17031;
								else if (West == West::Low) return 17032;
								else return 17033;
						else
							if (Waterlogged)
								if (West == West::None) return 17034;
								else if (West == West::Low) return 17035;
								else return 17036;
							else
								if (West == West::None) return 17037;
								else if (West == West::Low) return 17038;
								else return 17039;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17040;
								else if (West == West::Low) return 17041;
								else return 17042;
							else
								if (West == West::None) return 17043;
								else if (West == West::Low) return 17044;
								else return 17045;
						else
							if (Waterlogged)
								if (West == West::None) return 17046;
								else if (West == West::Low) return 17047;
								else return 17048;
							else
								if (West == West::None) return 17049;
								else if (West == West::Low) return 17050;
								else return 17051;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17052;
								else if (West == West::Low) return 17053;
								else return 17054;
							else
								if (West == West::None) return 17055;
								else if (West == West::Low) return 17056;
								else return 17057;
						else
							if (Waterlogged)
								if (West == West::None) return 17058;
								else if (West == West::Low) return 17059;
								else return 17060;
							else
								if (West == West::None) return 17061;
								else if (West == West::Low) return 17062;
								else return 17063;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17064;
								else if (West == West::Low) return 17065;
								else return 17066;
							else
								if (West == West::None) return 17067;
								else if (West == West::Low) return 17068;
								else return 17069;
						else
							if (Waterlogged)
								if (West == West::None) return 17070;
								else if (West == West::Low) return 17071;
								else return 17072;
							else
								if (West == West::None) return 17073;
								else if (West == West::Low) return 17074;
								else return 17075;
		}
		BlockState AndesiteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Anvil
	{
		constexpr BlockState Anvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9107;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9108;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9109;
			else return 9110;
		}
		BlockState Anvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace AttachedMelonStem
	{
		constexpr BlockState AttachedMelonStem(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 6817;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 6818;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 6819;
			else return 6820;
		}
		BlockState AttachedMelonStem();
		eBlockFace Facing(BlockState Block);
	}
	namespace AttachedPumpkinStem
	{
		constexpr BlockState AttachedPumpkinStem(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 6813;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 6814;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 6815;
			else return 6816;
		}
		BlockState AttachedPumpkinStem();
		eBlockFace Facing(BlockState Block);
	}
	namespace Azalea
	{
		constexpr BlockState Azalea()
		{
			return 24824;
		}
	}
	namespace AzaleaLeaves
	{
		constexpr BlockState AzaleaLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 461;
					else return 462;
				else
					if (Waterlogged) return 463;
					else return 464;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 465;
					else return 466;
				else
					if (Waterlogged) return 467;
					else return 468;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 469;
					else return 470;
				else
					if (Waterlogged) return 471;
					else return 472;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 473;
					else return 474;
				else
					if (Waterlogged) return 475;
					else return 476;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 477;
					else return 478;
				else
					if (Waterlogged) return 479;
					else return 480;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 481;
					else return 482;
				else
					if (Waterlogged) return 483;
					else return 484;
			else
				if (Persistent)
					if (Waterlogged) return 485;
					else return 486;
				else
					if (Waterlogged) return 487;
					else return 488;
		}
		BlockState AzaleaLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace AzureBluet
	{
		constexpr BlockState AzureBluet()
		{
			return 2080;
		}
	}
	namespace Bamboo
	{
		enum class Leaves
		{
			None,
			Small,
			Large,
		};
		constexpr BlockState Bamboo(const int Age, const enum Leaves Leaves, const int Stage)
		{
			if (Age == 0)
				if (Leaves == Leaves::None)
					if (Stage == 0) return 12945;
					else return 12946;
				else if (Leaves == Leaves::Small)
					if (Stage == 0) return 12947;
					else return 12948;
				else
					if (Stage == 0) return 12949;
					else return 12950;
			else
				if (Leaves == Leaves::None)
					if (Stage == 0) return 12951;
					else return 12952;
				else if (Leaves == Leaves::Small)
					if (Stage == 0) return 12953;
					else return 12954;
				else
					if (Stage == 0) return 12955;
					else return 12956;
		}
		BlockState Bamboo();
		int Age(BlockState Block);
		enum Leaves Leaves(BlockState Block);
		int Stage(BlockState Block);
	}
	namespace BambooBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BambooBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 159;
			else if (Axis == Axis::Y) return 160;
			else return 161;
		}
		BlockState BambooBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace BambooButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState BambooButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8803;
					else return 8804;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8805;
					else return 8806;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8807;
					else return 8808;
				else
					if (Powered) return 8809;
					else return 8810;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8811;
					else return 8812;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8813;
					else return 8814;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8815;
					else return 8816;
				else
					if (Powered) return 8817;
					else return 8818;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8819;
					else return 8820;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8821;
					else return 8822;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8823;
					else return 8824;
				else
					if (Powered) return 8825;
					else return 8826;
		}
		BlockState BambooButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState BambooDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12270;
							else return 12271;
						else
							if (Powered) return 12272;
							else return 12273;
					else
						if (Open)
							if (Powered) return 12274;
							else return 12275;
						else
							if (Powered) return 12276;
							else return 12277;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12278;
							else return 12279;
						else
							if (Powered) return 12280;
							else return 12281;
					else
						if (Open)
							if (Powered) return 12282;
							else return 12283;
						else
							if (Powered) return 12284;
							else return 12285;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12286;
							else return 12287;
						else
							if (Powered) return 12288;
							else return 12289;
					else
						if (Open)
							if (Powered) return 12290;
							else return 12291;
						else
							if (Powered) return 12292;
							else return 12293;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12294;
							else return 12295;
						else
							if (Powered) return 12296;
							else return 12297;
					else
						if (Open)
							if (Powered) return 12298;
							else return 12299;
						else
							if (Powered) return 12300;
							else return 12301;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12302;
							else return 12303;
						else
							if (Powered) return 12304;
							else return 12305;
					else
						if (Open)
							if (Powered) return 12306;
							else return 12307;
						else
							if (Powered) return 12308;
							else return 12309;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12310;
							else return 12311;
						else
							if (Powered) return 12312;
							else return 12313;
					else
						if (Open)
							if (Powered) return 12314;
							else return 12315;
						else
							if (Powered) return 12316;
							else return 12317;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12318;
							else return 12319;
						else
							if (Powered) return 12320;
							else return 12321;
					else
						if (Open)
							if (Powered) return 12322;
							else return 12323;
						else
							if (Powered) return 12324;
							else return 12325;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12326;
							else return 12327;
						else
							if (Powered) return 12328;
							else return 12329;
					else
						if (Open)
							if (Powered) return 12330;
							else return 12331;
						else
							if (Powered) return 12332;
							else return 12333;
		}
		BlockState BambooDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooFence
	{
		constexpr BlockState BambooFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11790;
							else return 11791;
						else
							if (West) return 11792;
							else return 11793;
					else
						if (Waterlogged)
							if (West) return 11794;
							else return 11795;
						else
							if (West) return 11796;
							else return 11797;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11798;
							else return 11799;
						else
							if (West) return 11800;
							else return 11801;
					else
						if (Waterlogged)
							if (West) return 11802;
							else return 11803;
						else
							if (West) return 11804;
							else return 11805;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11806;
							else return 11807;
						else
							if (West) return 11808;
							else return 11809;
					else
						if (Waterlogged)
							if (West) return 11810;
							else return 11811;
						else
							if (West) return 11812;
							else return 11813;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11814;
							else return 11815;
						else
							if (West) return 11816;
							else return 11817;
					else
						if (Waterlogged)
							if (West) return 11818;
							else return 11819;
						else
							if (West) return 11820;
							else return 11821;
		}
		BlockState BambooFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BambooFenceGate
	{
		constexpr BlockState BambooFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11534;
						else return 11535;
					else
						if (Powered) return 11536;
						else return 11537;
				else
					if (Open)
						if (Powered) return 11538;
						else return 11539;
					else
						if (Powered) return 11540;
						else return 11541;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11542;
						else return 11543;
					else
						if (Powered) return 11544;
						else return 11545;
				else
					if (Open)
						if (Powered) return 11546;
						else return 11547;
					else
						if (Powered) return 11548;
						else return 11549;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11550;
						else return 11551;
					else
						if (Powered) return 11552;
						else return 11553;
				else
					if (Open)
						if (Powered) return 11554;
						else return 11555;
					else
						if (Powered) return 11556;
						else return 11557;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11558;
						else return 11559;
					else
						if (Powered) return 11560;
						else return 11561;
				else
					if (Open)
						if (Powered) return 11562;
						else return 11563;
					else
						if (Powered) return 11564;
						else return 11565;
		}
		BlockState BambooFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BambooHangingSign
	{
		constexpr BlockState BambooHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5474;
					else return 5475;
				else if (Rotation == 1)
					if (Waterlogged) return 5476;
					else return 5477;
				else if (Rotation == 2)
					if (Waterlogged) return 5478;
					else return 5479;
				else if (Rotation == 3)
					if (Waterlogged) return 5480;
					else return 5481;
				else if (Rotation == 4)
					if (Waterlogged) return 5482;
					else return 5483;
				else if (Rotation == 5)
					if (Waterlogged) return 5484;
					else return 5485;
				else if (Rotation == 6)
					if (Waterlogged) return 5486;
					else return 5487;
				else if (Rotation == 7)
					if (Waterlogged) return 5488;
					else return 5489;
				else if (Rotation == 8)
					if (Waterlogged) return 5490;
					else return 5491;
				else if (Rotation == 9)
					if (Waterlogged) return 5492;
					else return 5493;
				else if (Rotation == 10)
					if (Waterlogged) return 5494;
					else return 5495;
				else if (Rotation == 11)
					if (Waterlogged) return 5496;
					else return 5497;
				else if (Rotation == 12)
					if (Waterlogged) return 5498;
					else return 5499;
				else if (Rotation == 13)
					if (Waterlogged) return 5500;
					else return 5501;
				else if (Rotation == 14)
					if (Waterlogged) return 5502;
					else return 5503;
				else
					if (Waterlogged) return 5504;
					else return 5505;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5506;
					else return 5507;
				else if (Rotation == 1)
					if (Waterlogged) return 5508;
					else return 5509;
				else if (Rotation == 2)
					if (Waterlogged) return 5510;
					else return 5511;
				else if (Rotation == 3)
					if (Waterlogged) return 5512;
					else return 5513;
				else if (Rotation == 4)
					if (Waterlogged) return 5514;
					else return 5515;
				else if (Rotation == 5)
					if (Waterlogged) return 5516;
					else return 5517;
				else if (Rotation == 6)
					if (Waterlogged) return 5518;
					else return 5519;
				else if (Rotation == 7)
					if (Waterlogged) return 5520;
					else return 5521;
				else if (Rotation == 8)
					if (Waterlogged) return 5522;
					else return 5523;
				else if (Rotation == 9)
					if (Waterlogged) return 5524;
					else return 5525;
				else if (Rotation == 10)
					if (Waterlogged) return 5526;
					else return 5527;
				else if (Rotation == 11)
					if (Waterlogged) return 5528;
					else return 5529;
				else if (Rotation == 12)
					if (Waterlogged) return 5530;
					else return 5531;
				else if (Rotation == 13)
					if (Waterlogged) return 5532;
					else return 5533;
				else if (Rotation == 14)
					if (Waterlogged) return 5534;
					else return 5535;
				else
					if (Waterlogged) return 5536;
					else return 5537;
		}
		BlockState BambooHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooMosaic
	{
		constexpr BlockState BambooMosaic()
		{
			return 24;
		}
	}
	namespace BambooMosaicSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BambooMosaicSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11216;
				else return 11217;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11218;
				else return 11219;
			else
				if (Waterlogged) return 11220;
				else return 11221;
		}
		BlockState BambooMosaicSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooMosaicStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BambooMosaicStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10284;
						else return 10285;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10286;
						else return 10287;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10288;
						else return 10289;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10290;
						else return 10291;
					else
						if (Waterlogged) return 10292;
						else return 10293;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10294;
						else return 10295;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10296;
						else return 10297;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10298;
						else return 10299;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10300;
						else return 10301;
					else
						if (Waterlogged) return 10302;
						else return 10303;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10304;
						else return 10305;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10306;
						else return 10307;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10308;
						else return 10309;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10310;
						else return 10311;
					else
						if (Waterlogged) return 10312;
						else return 10313;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10314;
						else return 10315;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10316;
						else return 10317;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10318;
						else return 10319;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10320;
						else return 10321;
					else
						if (Waterlogged) return 10322;
						else return 10323;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10324;
						else return 10325;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10326;
						else return 10327;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10328;
						else return 10329;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10330;
						else return 10331;
					else
						if (Waterlogged) return 10332;
						else return 10333;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10334;
						else return 10335;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10336;
						else return 10337;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10338;
						else return 10339;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10340;
						else return 10341;
					else
						if (Waterlogged) return 10342;
						else return 10343;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10344;
						else return 10345;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10346;
						else return 10347;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10348;
						else return 10349;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10350;
						else return 10351;
					else
						if (Waterlogged) return 10352;
						else return 10353;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10354;
						else return 10355;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10356;
						else return 10357;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10358;
						else return 10359;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10360;
						else return 10361;
					else
						if (Waterlogged) return 10362;
						else return 10363;
		}
		BlockState BambooMosaicStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooPlanks
	{
		constexpr BlockState BambooPlanks()
		{
			return 23;
		}
	}
	namespace BambooPressurePlate
	{
		constexpr BlockState BambooPressurePlate(const bool Powered)
		{
			if (Powered) return 5732;
			else return 5733;
		}
		BlockState BambooPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace BambooSapling
	{
		constexpr BlockState BambooSapling()
		{
			return 12944;
		}
	}
	namespace BambooSign
	{
		constexpr BlockState BambooSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4558;
				else return 4559;
			else if (Rotation == 1)
				if (Waterlogged) return 4560;
				else return 4561;
			else if (Rotation == 2)
				if (Waterlogged) return 4562;
				else return 4563;
			else if (Rotation == 3)
				if (Waterlogged) return 4564;
				else return 4565;
			else if (Rotation == 4)
				if (Waterlogged) return 4566;
				else return 4567;
			else if (Rotation == 5)
				if (Waterlogged) return 4568;
				else return 4569;
			else if (Rotation == 6)
				if (Waterlogged) return 4570;
				else return 4571;
			else if (Rotation == 7)
				if (Waterlogged) return 4572;
				else return 4573;
			else if (Rotation == 8)
				if (Waterlogged) return 4574;
				else return 4575;
			else if (Rotation == 9)
				if (Waterlogged) return 4576;
				else return 4577;
			else if (Rotation == 10)
				if (Waterlogged) return 4578;
				else return 4579;
			else if (Rotation == 11)
				if (Waterlogged) return 4580;
				else return 4581;
			else if (Rotation == 12)
				if (Waterlogged) return 4582;
				else return 4583;
			else if (Rotation == 13)
				if (Waterlogged) return 4584;
				else return 4585;
			else if (Rotation == 14)
				if (Waterlogged) return 4586;
				else return 4587;
			else
				if (Waterlogged) return 4588;
				else return 4589;
		}
		BlockState BambooSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BambooSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11210;
				else return 11211;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11212;
				else return 11213;
			else
				if (Waterlogged) return 11214;
				else return 11215;
		}
		BlockState BambooSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BambooStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10204;
						else return 10205;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10206;
						else return 10207;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10208;
						else return 10209;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10210;
						else return 10211;
					else
						if (Waterlogged) return 10212;
						else return 10213;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10214;
						else return 10215;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10216;
						else return 10217;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10218;
						else return 10219;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10220;
						else return 10221;
					else
						if (Waterlogged) return 10222;
						else return 10223;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10224;
						else return 10225;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10226;
						else return 10227;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10228;
						else return 10229;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10230;
						else return 10231;
					else
						if (Waterlogged) return 10232;
						else return 10233;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10234;
						else return 10235;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10236;
						else return 10237;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10238;
						else return 10239;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10240;
						else return 10241;
					else
						if (Waterlogged) return 10242;
						else return 10243;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10244;
						else return 10245;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10246;
						else return 10247;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10248;
						else return 10249;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10250;
						else return 10251;
					else
						if (Waterlogged) return 10252;
						else return 10253;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10254;
						else return 10255;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10256;
						else return 10257;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10258;
						else return 10259;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10260;
						else return 10261;
					else
						if (Waterlogged) return 10262;
						else return 10263;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10264;
						else return 10265;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10266;
						else return 10267;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10268;
						else return 10269;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10270;
						else return 10271;
					else
						if (Waterlogged) return 10272;
						else return 10273;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10274;
						else return 10275;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10276;
						else return 10277;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10278;
						else return 10279;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10280;
						else return 10281;
					else
						if (Waterlogged) return 10282;
						else return 10283;
		}
		BlockState BambooStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState BambooTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6473;
							else return 6474;
						else
							if (Waterlogged) return 6475;
							else return 6476;
					else
						if (Powered)
							if (Waterlogged) return 6477;
							else return 6478;
						else
							if (Waterlogged) return 6479;
							else return 6480;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6481;
							else return 6482;
						else
							if (Waterlogged) return 6483;
							else return 6484;
					else
						if (Powered)
							if (Waterlogged) return 6485;
							else return 6486;
						else
							if (Waterlogged) return 6487;
							else return 6488;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6489;
							else return 6490;
						else
							if (Waterlogged) return 6491;
							else return 6492;
					else
						if (Powered)
							if (Waterlogged) return 6493;
							else return 6494;
						else
							if (Waterlogged) return 6495;
							else return 6496;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6497;
							else return 6498;
						else
							if (Waterlogged) return 6499;
							else return 6500;
					else
						if (Powered)
							if (Waterlogged) return 6501;
							else return 6502;
						else
							if (Waterlogged) return 6503;
							else return 6504;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6505;
							else return 6506;
						else
							if (Waterlogged) return 6507;
							else return 6508;
					else
						if (Powered)
							if (Waterlogged) return 6509;
							else return 6510;
						else
							if (Waterlogged) return 6511;
							else return 6512;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6513;
							else return 6514;
						else
							if (Waterlogged) return 6515;
							else return 6516;
					else
						if (Powered)
							if (Waterlogged) return 6517;
							else return 6518;
						else
							if (Waterlogged) return 6519;
							else return 6520;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6521;
							else return 6522;
						else
							if (Waterlogged) return 6523;
							else return 6524;
					else
						if (Powered)
							if (Waterlogged) return 6525;
							else return 6526;
						else
							if (Waterlogged) return 6527;
							else return 6528;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6529;
							else return 6530;
						else
							if (Waterlogged) return 6531;
							else return 6532;
					else
						if (Powered)
							if (Waterlogged) return 6533;
							else return 6534;
						else
							if (Waterlogged) return 6535;
							else return 6536;
		}
		BlockState BambooTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooWallHangingSign
	{
		constexpr BlockState BambooWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5618;
				else return 5619;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5620;
				else return 5621;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5622;
				else return 5623;
			else
				if (Waterlogged) return 5624;
				else return 5625;
		}
		BlockState BambooWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BambooWallSign
	{
		constexpr BlockState BambooWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4826;
				else return 4827;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4828;
				else return 4829;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4830;
				else return 4831;
			else
				if (Waterlogged) return 4832;
				else return 4833;
		}
		BlockState BambooWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Barrel
	{
		constexpr BlockState Barrel(const eBlockFace Facing, const bool Open)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Open) return 18408;
				else return 18409;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Open) return 18410;
				else return 18411;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Open) return 18412;
				else return 18413;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Open) return 18414;
				else return 18415;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Open) return 18416;
				else return 18417;
			else
				if (Open) return 18418;
				else return 18419;
		}
		BlockState Barrel();
		eBlockFace Facing(BlockState Block);
		bool Open(BlockState Block);
	}
	namespace Barrier
	{
		constexpr BlockState Barrier(const bool Waterlogged)
		{
			if (Waterlogged) return 10365;
			else return 10366;
		}
		BlockState Barrier();
		bool Waterlogged(BlockState Block);
	}
	namespace Basalt
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Basalt(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 5852;
			else if (Axis == Axis::Y) return 5853;
			else return 5854;
		}
		BlockState Basalt();
		enum Axis Axis(BlockState Block);
	}
	namespace Beacon
	{
		constexpr BlockState Beacon()
		{
			return 7918;
		}
	}
	namespace Bedrock
	{
		constexpr BlockState Bedrock()
		{
			return 79;
		}
	}
	namespace BeeNest
	{
		constexpr BlockState BeeNest(const eBlockFace Facing, const int HoneyLevel)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HoneyLevel == 0) return 19397;
				else if (HoneyLevel == 1) return 19398;
				else if (HoneyLevel == 2) return 19399;
				else if (HoneyLevel == 3) return 19400;
				else if (HoneyLevel == 4) return 19401;
				else return 19402;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HoneyLevel == 0) return 19403;
				else if (HoneyLevel == 1) return 19404;
				else if (HoneyLevel == 2) return 19405;
				else if (HoneyLevel == 3) return 19406;
				else if (HoneyLevel == 4) return 19407;
				else return 19408;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HoneyLevel == 0) return 19409;
				else if (HoneyLevel == 1) return 19410;
				else if (HoneyLevel == 2) return 19411;
				else if (HoneyLevel == 3) return 19412;
				else if (HoneyLevel == 4) return 19413;
				else return 19414;
			else
				if (HoneyLevel == 0) return 19415;
				else if (HoneyLevel == 1) return 19416;
				else if (HoneyLevel == 2) return 19417;
				else if (HoneyLevel == 3) return 19418;
				else if (HoneyLevel == 4) return 19419;
				else return 19420;
		}
		BlockState BeeNest();
		eBlockFace Facing(BlockState Block);
		int HoneyLevel(BlockState Block);
	}
	namespace Beehive
	{
		constexpr BlockState Beehive(const eBlockFace Facing, const int HoneyLevel)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HoneyLevel == 0) return 19421;
				else if (HoneyLevel == 1) return 19422;
				else if (HoneyLevel == 2) return 19423;
				else if (HoneyLevel == 3) return 19424;
				else if (HoneyLevel == 4) return 19425;
				else return 19426;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HoneyLevel == 0) return 19427;
				else if (HoneyLevel == 1) return 19428;
				else if (HoneyLevel == 2) return 19429;
				else if (HoneyLevel == 3) return 19430;
				else if (HoneyLevel == 4) return 19431;
				else return 19432;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HoneyLevel == 0) return 19433;
				else if (HoneyLevel == 1) return 19434;
				else if (HoneyLevel == 2) return 19435;
				else if (HoneyLevel == 3) return 19436;
				else if (HoneyLevel == 4) return 19437;
				else return 19438;
			else
				if (HoneyLevel == 0) return 19439;
				else if (HoneyLevel == 1) return 19440;
				else if (HoneyLevel == 2) return 19441;
				else if (HoneyLevel == 3) return 19442;
				else if (HoneyLevel == 4) return 19443;
				else return 19444;
		}
		BlockState Beehive();
		eBlockFace Facing(BlockState Block);
		int HoneyLevel(BlockState Block);
	}
	namespace Beetroots
	{
		constexpr BlockState Beetroots(const int Age)
		{
			if (Age == 0) return 12509;
			else if (Age == 1) return 12510;
			else if (Age == 2) return 12511;
			else return 12512;
		}
		BlockState Beetroots();
		int Age(BlockState Block);
	}
	namespace Bell
	{
		enum class Attachment
		{
			Floor,
			Ceiling,
			SingleWall,
			DoubleWall,
		};
		constexpr BlockState Bell(const enum Attachment Attachment, const eBlockFace Facing, const bool Powered)
		{
			if (Attachment == Attachment::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 18471;
					else return 18472;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 18473;
					else return 18474;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 18475;
					else return 18476;
				else
					if (Powered) return 18477;
					else return 18478;
			else if (Attachment == Attachment::Ceiling)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 18479;
					else return 18480;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 18481;
					else return 18482;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 18483;
					else return 18484;
				else
					if (Powered) return 18485;
					else return 18486;
			else if (Attachment == Attachment::SingleWall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 18487;
					else return 18488;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 18489;
					else return 18490;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 18491;
					else return 18492;
				else
					if (Powered) return 18493;
					else return 18494;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 18495;
					else return 18496;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 18497;
					else return 18498;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 18499;
					else return 18500;
				else
					if (Powered) return 18501;
					else return 18502;
		}
		BlockState Bell();
		enum Attachment Attachment(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BigDripleaf
	{
		enum class Tilt
		{
			None,
			Unstable,
			Partial,
			Full,
		};
		constexpr BlockState BigDripleaf(const eBlockFace Facing, const enum Tilt Tilt, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 24844;
					else return 24845;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 24846;
					else return 24847;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 24848;
					else return 24849;
				else
					if (Waterlogged) return 24850;
					else return 24851;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 24852;
					else return 24853;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 24854;
					else return 24855;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 24856;
					else return 24857;
				else
					if (Waterlogged) return 24858;
					else return 24859;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Tilt == Tilt::None)
					if (Waterlogged) return 24860;
					else return 24861;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 24862;
					else return 24863;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 24864;
					else return 24865;
				else
					if (Waterlogged) return 24866;
					else return 24867;
			else
				if (Tilt == Tilt::None)
					if (Waterlogged) return 24868;
					else return 24869;
				else if (Tilt == Tilt::Unstable)
					if (Waterlogged) return 24870;
					else return 24871;
				else if (Tilt == Tilt::Partial)
					if (Waterlogged) return 24872;
					else return 24873;
				else
					if (Waterlogged) return 24874;
					else return 24875;
		}
		BlockState BigDripleaf();
		eBlockFace Facing(BlockState Block);
		enum Tilt Tilt(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BigDripleafStem
	{
		constexpr BlockState BigDripleafStem(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 24876;
				else return 24877;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 24878;
				else return 24879;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 24880;
				else return 24881;
			else
				if (Waterlogged) return 24882;
				else return 24883;
		}
		BlockState BigDripleafStem();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState BirchButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8659;
					else return 8660;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8661;
					else return 8662;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8663;
					else return 8664;
				else
					if (Powered) return 8665;
					else return 8666;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8667;
					else return 8668;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8669;
					else return 8670;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8671;
					else return 8672;
				else
					if (Powered) return 8673;
					else return 8674;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8675;
					else return 8676;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8677;
					else return 8678;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8679;
					else return 8680;
				else
					if (Powered) return 8681;
					else return 8682;
		}
		BlockState BirchButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState BirchDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11886;
							else return 11887;
						else
							if (Powered) return 11888;
							else return 11889;
					else
						if (Open)
							if (Powered) return 11890;
							else return 11891;
						else
							if (Powered) return 11892;
							else return 11893;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11894;
							else return 11895;
						else
							if (Powered) return 11896;
							else return 11897;
					else
						if (Open)
							if (Powered) return 11898;
							else return 11899;
						else
							if (Powered) return 11900;
							else return 11901;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11902;
							else return 11903;
						else
							if (Powered) return 11904;
							else return 11905;
					else
						if (Open)
							if (Powered) return 11906;
							else return 11907;
						else
							if (Powered) return 11908;
							else return 11909;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11910;
							else return 11911;
						else
							if (Powered) return 11912;
							else return 11913;
					else
						if (Open)
							if (Powered) return 11914;
							else return 11915;
						else
							if (Powered) return 11916;
							else return 11917;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11918;
							else return 11919;
						else
							if (Powered) return 11920;
							else return 11921;
					else
						if (Open)
							if (Powered) return 11922;
							else return 11923;
						else
							if (Powered) return 11924;
							else return 11925;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11926;
							else return 11927;
						else
							if (Powered) return 11928;
							else return 11929;
					else
						if (Open)
							if (Powered) return 11930;
							else return 11931;
						else
							if (Powered) return 11932;
							else return 11933;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11934;
							else return 11935;
						else
							if (Powered) return 11936;
							else return 11937;
					else
						if (Open)
							if (Powered) return 11938;
							else return 11939;
						else
							if (Powered) return 11940;
							else return 11941;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11942;
							else return 11943;
						else
							if (Powered) return 11944;
							else return 11945;
					else
						if (Open)
							if (Powered) return 11946;
							else return 11947;
						else
							if (Powered) return 11948;
							else return 11949;
		}
		BlockState BirchDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchFence
	{
		constexpr BlockState BirchFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11598;
							else return 11599;
						else
							if (West) return 11600;
							else return 11601;
					else
						if (Waterlogged)
							if (West) return 11602;
							else return 11603;
						else
							if (West) return 11604;
							else return 11605;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11606;
							else return 11607;
						else
							if (West) return 11608;
							else return 11609;
					else
						if (Waterlogged)
							if (West) return 11610;
							else return 11611;
						else
							if (West) return 11612;
							else return 11613;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11614;
							else return 11615;
						else
							if (West) return 11616;
							else return 11617;
					else
						if (Waterlogged)
							if (West) return 11618;
							else return 11619;
						else
							if (West) return 11620;
							else return 11621;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11622;
							else return 11623;
						else
							if (West) return 11624;
							else return 11625;
					else
						if (Waterlogged)
							if (West) return 11626;
							else return 11627;
						else
							if (West) return 11628;
							else return 11629;
		}
		BlockState BirchFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BirchFenceGate
	{
		constexpr BlockState BirchFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11342;
						else return 11343;
					else
						if (Powered) return 11344;
						else return 11345;
				else
					if (Open)
						if (Powered) return 11346;
						else return 11347;
					else
						if (Powered) return 11348;
						else return 11349;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11350;
						else return 11351;
					else
						if (Powered) return 11352;
						else return 11353;
				else
					if (Open)
						if (Powered) return 11354;
						else return 11355;
					else
						if (Powered) return 11356;
						else return 11357;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11358;
						else return 11359;
					else
						if (Powered) return 11360;
						else return 11361;
				else
					if (Open)
						if (Powered) return 11362;
						else return 11363;
					else
						if (Powered) return 11364;
						else return 11365;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11366;
						else return 11367;
					else
						if (Powered) return 11368;
						else return 11369;
				else
					if (Open)
						if (Powered) return 11370;
						else return 11371;
					else
						if (Powered) return 11372;
						else return 11373;
		}
		BlockState BirchFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace BirchHangingSign
	{
		constexpr BlockState BirchHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 4962;
					else return 4963;
				else if (Rotation == 1)
					if (Waterlogged) return 4964;
					else return 4965;
				else if (Rotation == 2)
					if (Waterlogged) return 4966;
					else return 4967;
				else if (Rotation == 3)
					if (Waterlogged) return 4968;
					else return 4969;
				else if (Rotation == 4)
					if (Waterlogged) return 4970;
					else return 4971;
				else if (Rotation == 5)
					if (Waterlogged) return 4972;
					else return 4973;
				else if (Rotation == 6)
					if (Waterlogged) return 4974;
					else return 4975;
				else if (Rotation == 7)
					if (Waterlogged) return 4976;
					else return 4977;
				else if (Rotation == 8)
					if (Waterlogged) return 4978;
					else return 4979;
				else if (Rotation == 9)
					if (Waterlogged) return 4980;
					else return 4981;
				else if (Rotation == 10)
					if (Waterlogged) return 4982;
					else return 4983;
				else if (Rotation == 11)
					if (Waterlogged) return 4984;
					else return 4985;
				else if (Rotation == 12)
					if (Waterlogged) return 4986;
					else return 4987;
				else if (Rotation == 13)
					if (Waterlogged) return 4988;
					else return 4989;
				else if (Rotation == 14)
					if (Waterlogged) return 4990;
					else return 4991;
				else
					if (Waterlogged) return 4992;
					else return 4993;
			else
				if (Rotation == 0)
					if (Waterlogged) return 4994;
					else return 4995;
				else if (Rotation == 1)
					if (Waterlogged) return 4996;
					else return 4997;
				else if (Rotation == 2)
					if (Waterlogged) return 4998;
					else return 4999;
				else if (Rotation == 3)
					if (Waterlogged) return 5000;
					else return 5001;
				else if (Rotation == 4)
					if (Waterlogged) return 5002;
					else return 5003;
				else if (Rotation == 5)
					if (Waterlogged) return 5004;
					else return 5005;
				else if (Rotation == 6)
					if (Waterlogged) return 5006;
					else return 5007;
				else if (Rotation == 7)
					if (Waterlogged) return 5008;
					else return 5009;
				else if (Rotation == 8)
					if (Waterlogged) return 5010;
					else return 5011;
				else if (Rotation == 9)
					if (Waterlogged) return 5012;
					else return 5013;
				else if (Rotation == 10)
					if (Waterlogged) return 5014;
					else return 5015;
				else if (Rotation == 11)
					if (Waterlogged) return 5016;
					else return 5017;
				else if (Rotation == 12)
					if (Waterlogged) return 5018;
					else return 5019;
				else if (Rotation == 13)
					if (Waterlogged) return 5020;
					else return 5021;
				else if (Rotation == 14)
					if (Waterlogged) return 5022;
					else return 5023;
				else
					if (Waterlogged) return 5024;
					else return 5025;
		}
		BlockState BirchHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchLeaves
	{
		constexpr BlockState BirchLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 293;
					else return 294;
				else
					if (Waterlogged) return 295;
					else return 296;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 297;
					else return 298;
				else
					if (Waterlogged) return 299;
					else return 300;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 301;
					else return 302;
				else
					if (Waterlogged) return 303;
					else return 304;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 305;
					else return 306;
				else
					if (Waterlogged) return 307;
					else return 308;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 309;
					else return 310;
				else
					if (Waterlogged) return 311;
					else return 312;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 313;
					else return 314;
				else
					if (Waterlogged) return 315;
					else return 316;
			else
				if (Persistent)
					if (Waterlogged) return 317;
					else return 318;
				else
					if (Waterlogged) return 319;
					else return 320;
		}
		BlockState BirchLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BirchLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 136;
			else if (Axis == Axis::Y) return 137;
			else return 138;
		}
		BlockState BirchLog();
		enum Axis Axis(BlockState Block);
	}
	namespace BirchPlanks
	{
		constexpr BlockState BirchPlanks()
		{
			return 17;
		}
	}
	namespace BirchPressurePlate
	{
		constexpr BlockState BirchPressurePlate(const bool Powered)
		{
			if (Powered) return 5720;
			else return 5721;
		}
		BlockState BirchPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace BirchSapling
	{
		constexpr BlockState BirchSapling(const int Stage)
		{
			if (Stage == 0) return 29;
			else return 30;
		}
		BlockState BirchSapling();
		int Stage(BlockState Block);
	}
	namespace BirchSign
	{
		constexpr BlockState BirchSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4366;
				else return 4367;
			else if (Rotation == 1)
				if (Waterlogged) return 4368;
				else return 4369;
			else if (Rotation == 2)
				if (Waterlogged) return 4370;
				else return 4371;
			else if (Rotation == 3)
				if (Waterlogged) return 4372;
				else return 4373;
			else if (Rotation == 4)
				if (Waterlogged) return 4374;
				else return 4375;
			else if (Rotation == 5)
				if (Waterlogged) return 4376;
				else return 4377;
			else if (Rotation == 6)
				if (Waterlogged) return 4378;
				else return 4379;
			else if (Rotation == 7)
				if (Waterlogged) return 4380;
				else return 4381;
			else if (Rotation == 8)
				if (Waterlogged) return 4382;
				else return 4383;
			else if (Rotation == 9)
				if (Waterlogged) return 4384;
				else return 4385;
			else if (Rotation == 10)
				if (Waterlogged) return 4386;
				else return 4387;
			else if (Rotation == 11)
				if (Waterlogged) return 4388;
				else return 4389;
			else if (Rotation == 12)
				if (Waterlogged) return 4390;
				else return 4391;
			else if (Rotation == 13)
				if (Waterlogged) return 4392;
				else return 4393;
			else if (Rotation == 14)
				if (Waterlogged) return 4394;
				else return 4395;
			else
				if (Waterlogged) return 4396;
				else return 4397;
		}
		BlockState BirchSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BirchSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11174;
				else return 11175;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11176;
				else return 11177;
			else
				if (Waterlogged) return 11178;
				else return 11179;
		}
		BlockState BirchSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BirchStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7746;
						else return 7747;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7748;
						else return 7749;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7750;
						else return 7751;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7752;
						else return 7753;
					else
						if (Waterlogged) return 7754;
						else return 7755;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7756;
						else return 7757;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7758;
						else return 7759;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7760;
						else return 7761;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7762;
						else return 7763;
					else
						if (Waterlogged) return 7764;
						else return 7765;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7766;
						else return 7767;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7768;
						else return 7769;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7770;
						else return 7771;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7772;
						else return 7773;
					else
						if (Waterlogged) return 7774;
						else return 7775;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7776;
						else return 7777;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7778;
						else return 7779;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7780;
						else return 7781;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7782;
						else return 7783;
					else
						if (Waterlogged) return 7784;
						else return 7785;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7786;
						else return 7787;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7788;
						else return 7789;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7790;
						else return 7791;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7792;
						else return 7793;
					else
						if (Waterlogged) return 7794;
						else return 7795;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7796;
						else return 7797;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7798;
						else return 7799;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7800;
						else return 7801;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7802;
						else return 7803;
					else
						if (Waterlogged) return 7804;
						else return 7805;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7806;
						else return 7807;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7808;
						else return 7809;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7810;
						else return 7811;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7812;
						else return 7813;
					else
						if (Waterlogged) return 7814;
						else return 7815;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7816;
						else return 7817;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7818;
						else return 7819;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7820;
						else return 7821;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7822;
						else return 7823;
					else
						if (Waterlogged) return 7824;
						else return 7825;
		}
		BlockState BirchStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState BirchTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6089;
							else return 6090;
						else
							if (Waterlogged) return 6091;
							else return 6092;
					else
						if (Powered)
							if (Waterlogged) return 6093;
							else return 6094;
						else
							if (Waterlogged) return 6095;
							else return 6096;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6097;
							else return 6098;
						else
							if (Waterlogged) return 6099;
							else return 6100;
					else
						if (Powered)
							if (Waterlogged) return 6101;
							else return 6102;
						else
							if (Waterlogged) return 6103;
							else return 6104;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6105;
							else return 6106;
						else
							if (Waterlogged) return 6107;
							else return 6108;
					else
						if (Powered)
							if (Waterlogged) return 6109;
							else return 6110;
						else
							if (Waterlogged) return 6111;
							else return 6112;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6113;
							else return 6114;
						else
							if (Waterlogged) return 6115;
							else return 6116;
					else
						if (Powered)
							if (Waterlogged) return 6117;
							else return 6118;
						else
							if (Waterlogged) return 6119;
							else return 6120;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6121;
							else return 6122;
						else
							if (Waterlogged) return 6123;
							else return 6124;
					else
						if (Powered)
							if (Waterlogged) return 6125;
							else return 6126;
						else
							if (Waterlogged) return 6127;
							else return 6128;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6129;
							else return 6130;
						else
							if (Waterlogged) return 6131;
							else return 6132;
					else
						if (Powered)
							if (Waterlogged) return 6133;
							else return 6134;
						else
							if (Waterlogged) return 6135;
							else return 6136;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6137;
							else return 6138;
						else
							if (Waterlogged) return 6139;
							else return 6140;
					else
						if (Powered)
							if (Waterlogged) return 6141;
							else return 6142;
						else
							if (Waterlogged) return 6143;
							else return 6144;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6145;
							else return 6146;
						else
							if (Waterlogged) return 6147;
							else return 6148;
					else
						if (Powered)
							if (Waterlogged) return 6149;
							else return 6150;
						else
							if (Waterlogged) return 6151;
							else return 6152;
		}
		BlockState BirchTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWallHangingSign
	{
		constexpr BlockState BirchWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5554;
				else return 5555;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5556;
				else return 5557;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5558;
				else return 5559;
			else
				if (Waterlogged) return 5560;
				else return 5561;
		}
		BlockState BirchWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWallSign
	{
		constexpr BlockState BirchWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4778;
				else return 4779;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4780;
				else return 4781;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4782;
				else return 4783;
			else
				if (Waterlogged) return 4784;
				else return 4785;
		}
		BlockState BirchWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BirchWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BirchWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 195;
			else if (Axis == Axis::Y) return 196;
			else return 197;
		}
		BlockState BirchWood();
		enum Axis Axis(BlockState Block);
	}
	namespace BlackBanner
	{
		constexpr BlockState BlackBanner(const int Rotation)
		{
			if (Rotation == 0) return 10999;
			else if (Rotation == 1) return 11000;
			else if (Rotation == 2) return 11001;
			else if (Rotation == 3) return 11002;
			else if (Rotation == 4) return 11003;
			else if (Rotation == 5) return 11004;
			else if (Rotation == 6) return 11005;
			else if (Rotation == 7) return 11006;
			else if (Rotation == 8) return 11007;
			else if (Rotation == 9) return 11008;
			else if (Rotation == 10) return 11009;
			else if (Rotation == 11) return 11010;
			else if (Rotation == 12) return 11011;
			else if (Rotation == 13) return 11012;
			else if (Rotation == 14) return 11013;
			else return 11014;
		}
		BlockState BlackBanner();
		int Rotation(BlockState Block);
	}
	namespace BlackBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BlackBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1928;
					else return 1929;
				else
					if (Part == Part::Head) return 1930;
					else return 1931;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1932;
					else return 1933;
				else
					if (Part == Part::Head) return 1934;
					else return 1935;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1936;
					else return 1937;
				else
					if (Part == Part::Head) return 1938;
					else return 1939;
			else
				if (Occupied)
					if (Part == Part::Head) return 1940;
					else return 1941;
				else
					if (Part == Part::Head) return 1942;
					else return 1943;
		}
		BlockState BlackBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BlackCandle
	{
		constexpr BlockState BlackCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20981;
					else return 20982;
				else
					if (Waterlogged) return 20983;
					else return 20984;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20985;
					else return 20986;
				else
					if (Waterlogged) return 20987;
					else return 20988;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20989;
					else return 20990;
				else
					if (Waterlogged) return 20991;
					else return 20992;
			else
				if (Lit)
					if (Waterlogged) return 20993;
					else return 20994;
				else
					if (Waterlogged) return 20995;
					else return 20996;
		}
		BlockState BlackCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackCandleCake
	{
		constexpr BlockState BlackCandleCake(const bool Lit)
		{
			if (Lit) return 21029;
			else return 21030;
		}
		BlockState BlackCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BlackCarpet
	{
		constexpr BlockState BlackCarpet()
		{
			return 10743;
		}
	}
	namespace BlackConcrete
	{
		constexpr BlockState BlackConcrete()
		{
			return 12743;
		}
	}
	namespace BlackConcretePowder
	{
		constexpr BlockState BlackConcretePowder()
		{
			return 12759;
		}
	}
	namespace BlackGlazedTerracotta
	{
		constexpr BlockState BlackGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12724;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12725;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12726;
			else return 12727;
		}
		BlockState BlackGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackShulkerBox
	{
		constexpr BlockState BlackShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12658;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12659;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12660;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12661;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12662;
			else return 12663;
		}
		BlockState BlackShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackStainedGlass
	{
		constexpr BlockState BlackStainedGlass()
		{
			return 5960;
		}
	}
	namespace BlackStainedGlassPane
	{
		constexpr BlockState BlackStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9852;
							else return 9853;
						else
							if (West) return 9854;
							else return 9855;
					else
						if (Waterlogged)
							if (West) return 9856;
							else return 9857;
						else
							if (West) return 9858;
							else return 9859;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9860;
							else return 9861;
						else
							if (West) return 9862;
							else return 9863;
					else
						if (Waterlogged)
							if (West) return 9864;
							else return 9865;
						else
							if (West) return 9866;
							else return 9867;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9868;
							else return 9869;
						else
							if (West) return 9870;
							else return 9871;
					else
						if (Waterlogged)
							if (West) return 9872;
							else return 9873;
						else
							if (West) return 9874;
							else return 9875;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9876;
							else return 9877;
						else
							if (West) return 9878;
							else return 9879;
					else
						if (Waterlogged)
							if (West) return 9880;
							else return 9881;
						else
							if (West) return 9882;
							else return 9883;
		}
		BlockState BlackStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BlackTerracotta
	{
		constexpr BlockState BlackTerracotta()
		{
			return 9371;
		}
	}
	namespace BlackWallBanner
	{
		constexpr BlockState BlackWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11075;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11076;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11077;
			else return 11078;
		}
		BlockState BlackWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlackWool
	{
		constexpr BlockState BlackWool()
		{
			return 2062;
		}
	}
	namespace Blackstone
	{
		constexpr BlockState Blackstone()
		{
			return 19460;
		}
	}
	namespace BlackstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BlackstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 19865;
				else return 19866;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 19867;
				else return 19868;
			else
				if (Waterlogged) return 19869;
				else return 19870;
		}
		BlockState BlackstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BlackstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19461;
						else return 19462;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19463;
						else return 19464;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19465;
						else return 19466;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19467;
						else return 19468;
					else
						if (Waterlogged) return 19469;
						else return 19470;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19471;
						else return 19472;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19473;
						else return 19474;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19475;
						else return 19476;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19477;
						else return 19478;
					else
						if (Waterlogged) return 19479;
						else return 19480;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19481;
						else return 19482;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19483;
						else return 19484;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19485;
						else return 19486;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19487;
						else return 19488;
					else
						if (Waterlogged) return 19489;
						else return 19490;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19491;
						else return 19492;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19493;
						else return 19494;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19495;
						else return 19496;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19497;
						else return 19498;
					else
						if (Waterlogged) return 19499;
						else return 19500;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19501;
						else return 19502;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19503;
						else return 19504;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19505;
						else return 19506;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19507;
						else return 19508;
					else
						if (Waterlogged) return 19509;
						else return 19510;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19511;
						else return 19512;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19513;
						else return 19514;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19515;
						else return 19516;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19517;
						else return 19518;
					else
						if (Waterlogged) return 19519;
						else return 19520;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19521;
						else return 19522;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19523;
						else return 19524;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19525;
						else return 19526;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19527;
						else return 19528;
					else
						if (Waterlogged) return 19529;
						else return 19530;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19531;
						else return 19532;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19533;
						else return 19534;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19535;
						else return 19536;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19537;
						else return 19538;
					else
						if (Waterlogged) return 19539;
						else return 19540;
		}
		BlockState BlackstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlackstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState BlackstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19541;
								else if (West == West::Low) return 19542;
								else return 19543;
							else
								if (West == West::None) return 19544;
								else if (West == West::Low) return 19545;
								else return 19546;
						else
							if (Waterlogged)
								if (West == West::None) return 19547;
								else if (West == West::Low) return 19548;
								else return 19549;
							else
								if (West == West::None) return 19550;
								else if (West == West::Low) return 19551;
								else return 19552;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19553;
								else if (West == West::Low) return 19554;
								else return 19555;
							else
								if (West == West::None) return 19556;
								else if (West == West::Low) return 19557;
								else return 19558;
						else
							if (Waterlogged)
								if (West == West::None) return 19559;
								else if (West == West::Low) return 19560;
								else return 19561;
							else
								if (West == West::None) return 19562;
								else if (West == West::Low) return 19563;
								else return 19564;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19565;
								else if (West == West::Low) return 19566;
								else return 19567;
							else
								if (West == West::None) return 19568;
								else if (West == West::Low) return 19569;
								else return 19570;
						else
							if (Waterlogged)
								if (West == West::None) return 19571;
								else if (West == West::Low) return 19572;
								else return 19573;
							else
								if (West == West::None) return 19574;
								else if (West == West::Low) return 19575;
								else return 19576;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19577;
								else if (West == West::Low) return 19578;
								else return 19579;
							else
								if (West == West::None) return 19580;
								else if (West == West::Low) return 19581;
								else return 19582;
						else
							if (Waterlogged)
								if (West == West::None) return 19583;
								else if (West == West::Low) return 19584;
								else return 19585;
							else
								if (West == West::None) return 19586;
								else if (West == West::Low) return 19587;
								else return 19588;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19589;
								else if (West == West::Low) return 19590;
								else return 19591;
							else
								if (West == West::None) return 19592;
								else if (West == West::Low) return 19593;
								else return 19594;
						else
							if (Waterlogged)
								if (West == West::None) return 19595;
								else if (West == West::Low) return 19596;
								else return 19597;
							else
								if (West == West::None) return 19598;
								else if (West == West::Low) return 19599;
								else return 19600;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19601;
								else if (West == West::Low) return 19602;
								else return 19603;
							else
								if (West == West::None) return 19604;
								else if (West == West::Low) return 19605;
								else return 19606;
						else
							if (Waterlogged)
								if (West == West::None) return 19607;
								else if (West == West::Low) return 19608;
								else return 19609;
							else
								if (West == West::None) return 19610;
								else if (West == West::Low) return 19611;
								else return 19612;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19613;
								else if (West == West::Low) return 19614;
								else return 19615;
							else
								if (West == West::None) return 19616;
								else if (West == West::Low) return 19617;
								else return 19618;
						else
							if (Waterlogged)
								if (West == West::None) return 19619;
								else if (West == West::Low) return 19620;
								else return 19621;
							else
								if (West == West::None) return 19622;
								else if (West == West::Low) return 19623;
								else return 19624;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19625;
								else if (West == West::Low) return 19626;
								else return 19627;
							else
								if (West == West::None) return 19628;
								else if (West == West::Low) return 19629;
								else return 19630;
						else
							if (Waterlogged)
								if (West == West::None) return 19631;
								else if (West == West::Low) return 19632;
								else return 19633;
							else
								if (West == West::None) return 19634;
								else if (West == West::Low) return 19635;
								else return 19636;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19637;
								else if (West == West::Low) return 19638;
								else return 19639;
							else
								if (West == West::None) return 19640;
								else if (West == West::Low) return 19641;
								else return 19642;
						else
							if (Waterlogged)
								if (West == West::None) return 19643;
								else if (West == West::Low) return 19644;
								else return 19645;
							else
								if (West == West::None) return 19646;
								else if (West == West::Low) return 19647;
								else return 19648;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19649;
								else if (West == West::Low) return 19650;
								else return 19651;
							else
								if (West == West::None) return 19652;
								else if (West == West::Low) return 19653;
								else return 19654;
						else
							if (Waterlogged)
								if (West == West::None) return 19655;
								else if (West == West::Low) return 19656;
								else return 19657;
							else
								if (West == West::None) return 19658;
								else if (West == West::Low) return 19659;
								else return 19660;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19661;
								else if (West == West::Low) return 19662;
								else return 19663;
							else
								if (West == West::None) return 19664;
								else if (West == West::Low) return 19665;
								else return 19666;
						else
							if (Waterlogged)
								if (West == West::None) return 19667;
								else if (West == West::Low) return 19668;
								else return 19669;
							else
								if (West == West::None) return 19670;
								else if (West == West::Low) return 19671;
								else return 19672;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19673;
								else if (West == West::Low) return 19674;
								else return 19675;
							else
								if (West == West::None) return 19676;
								else if (West == West::Low) return 19677;
								else return 19678;
						else
							if (Waterlogged)
								if (West == West::None) return 19679;
								else if (West == West::Low) return 19680;
								else return 19681;
							else
								if (West == West::None) return 19682;
								else if (West == West::Low) return 19683;
								else return 19684;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19685;
								else if (West == West::Low) return 19686;
								else return 19687;
							else
								if (West == West::None) return 19688;
								else if (West == West::Low) return 19689;
								else return 19690;
						else
							if (Waterlogged)
								if (West == West::None) return 19691;
								else if (West == West::Low) return 19692;
								else return 19693;
							else
								if (West == West::None) return 19694;
								else if (West == West::Low) return 19695;
								else return 19696;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19697;
								else if (West == West::Low) return 19698;
								else return 19699;
							else
								if (West == West::None) return 19700;
								else if (West == West::Low) return 19701;
								else return 19702;
						else
							if (Waterlogged)
								if (West == West::None) return 19703;
								else if (West == West::Low) return 19704;
								else return 19705;
							else
								if (West == West::None) return 19706;
								else if (West == West::Low) return 19707;
								else return 19708;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19709;
								else if (West == West::Low) return 19710;
								else return 19711;
							else
								if (West == West::None) return 19712;
								else if (West == West::Low) return 19713;
								else return 19714;
						else
							if (Waterlogged)
								if (West == West::None) return 19715;
								else if (West == West::Low) return 19716;
								else return 19717;
							else
								if (West == West::None) return 19718;
								else if (West == West::Low) return 19719;
								else return 19720;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19721;
								else if (West == West::Low) return 19722;
								else return 19723;
							else
								if (West == West::None) return 19724;
								else if (West == West::Low) return 19725;
								else return 19726;
						else
							if (Waterlogged)
								if (West == West::None) return 19727;
								else if (West == West::Low) return 19728;
								else return 19729;
							else
								if (West == West::None) return 19730;
								else if (West == West::Low) return 19731;
								else return 19732;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19733;
								else if (West == West::Low) return 19734;
								else return 19735;
							else
								if (West == West::None) return 19736;
								else if (West == West::Low) return 19737;
								else return 19738;
						else
							if (Waterlogged)
								if (West == West::None) return 19739;
								else if (West == West::Low) return 19740;
								else return 19741;
							else
								if (West == West::None) return 19742;
								else if (West == West::Low) return 19743;
								else return 19744;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19745;
								else if (West == West::Low) return 19746;
								else return 19747;
							else
								if (West == West::None) return 19748;
								else if (West == West::Low) return 19749;
								else return 19750;
						else
							if (Waterlogged)
								if (West == West::None) return 19751;
								else if (West == West::Low) return 19752;
								else return 19753;
							else
								if (West == West::None) return 19754;
								else if (West == West::Low) return 19755;
								else return 19756;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19757;
								else if (West == West::Low) return 19758;
								else return 19759;
							else
								if (West == West::None) return 19760;
								else if (West == West::Low) return 19761;
								else return 19762;
						else
							if (Waterlogged)
								if (West == West::None) return 19763;
								else if (West == West::Low) return 19764;
								else return 19765;
							else
								if (West == West::None) return 19766;
								else if (West == West::Low) return 19767;
								else return 19768;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19769;
								else if (West == West::Low) return 19770;
								else return 19771;
							else
								if (West == West::None) return 19772;
								else if (West == West::Low) return 19773;
								else return 19774;
						else
							if (Waterlogged)
								if (West == West::None) return 19775;
								else if (West == West::Low) return 19776;
								else return 19777;
							else
								if (West == West::None) return 19778;
								else if (West == West::Low) return 19779;
								else return 19780;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19781;
								else if (West == West::Low) return 19782;
								else return 19783;
							else
								if (West == West::None) return 19784;
								else if (West == West::Low) return 19785;
								else return 19786;
						else
							if (Waterlogged)
								if (West == West::None) return 19787;
								else if (West == West::Low) return 19788;
								else return 19789;
							else
								if (West == West::None) return 19790;
								else if (West == West::Low) return 19791;
								else return 19792;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19793;
								else if (West == West::Low) return 19794;
								else return 19795;
							else
								if (West == West::None) return 19796;
								else if (West == West::Low) return 19797;
								else return 19798;
						else
							if (Waterlogged)
								if (West == West::None) return 19799;
								else if (West == West::Low) return 19800;
								else return 19801;
							else
								if (West == West::None) return 19802;
								else if (West == West::Low) return 19803;
								else return 19804;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19805;
								else if (West == West::Low) return 19806;
								else return 19807;
							else
								if (West == West::None) return 19808;
								else if (West == West::Low) return 19809;
								else return 19810;
						else
							if (Waterlogged)
								if (West == West::None) return 19811;
								else if (West == West::Low) return 19812;
								else return 19813;
							else
								if (West == West::None) return 19814;
								else if (West == West::Low) return 19815;
								else return 19816;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19817;
								else if (West == West::Low) return 19818;
								else return 19819;
							else
								if (West == West::None) return 19820;
								else if (West == West::Low) return 19821;
								else return 19822;
						else
							if (Waterlogged)
								if (West == West::None) return 19823;
								else if (West == West::Low) return 19824;
								else return 19825;
							else
								if (West == West::None) return 19826;
								else if (West == West::Low) return 19827;
								else return 19828;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19829;
								else if (West == West::Low) return 19830;
								else return 19831;
							else
								if (West == West::None) return 19832;
								else if (West == West::Low) return 19833;
								else return 19834;
						else
							if (Waterlogged)
								if (West == West::None) return 19835;
								else if (West == West::Low) return 19836;
								else return 19837;
							else
								if (West == West::None) return 19838;
								else if (West == West::Low) return 19839;
								else return 19840;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19841;
								else if (West == West::Low) return 19842;
								else return 19843;
							else
								if (West == West::None) return 19844;
								else if (West == West::Low) return 19845;
								else return 19846;
						else
							if (Waterlogged)
								if (West == West::None) return 19847;
								else if (West == West::Low) return 19848;
								else return 19849;
							else
								if (West == West::None) return 19850;
								else if (West == West::Low) return 19851;
								else return 19852;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19853;
								else if (West == West::Low) return 19854;
								else return 19855;
							else
								if (West == West::None) return 19856;
								else if (West == West::Low) return 19857;
								else return 19858;
						else
							if (Waterlogged)
								if (West == West::None) return 19859;
								else if (West == West::Low) return 19860;
								else return 19861;
							else
								if (West == West::None) return 19862;
								else if (West == West::Low) return 19863;
								else return 19864;
		}
		BlockState BlackstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace BlastFurnace
	{
		constexpr BlockState BlastFurnace(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 18428;
				else return 18429;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 18430;
				else return 18431;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 18432;
				else return 18433;
			else
				if (Lit) return 18434;
				else return 18435;
		}
		BlockState BlastFurnace();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace BlueBanner
	{
		constexpr BlockState BlueBanner(const int Rotation)
		{
			if (Rotation == 0) return 10935;
			else if (Rotation == 1) return 10936;
			else if (Rotation == 2) return 10937;
			else if (Rotation == 3) return 10938;
			else if (Rotation == 4) return 10939;
			else if (Rotation == 5) return 10940;
			else if (Rotation == 6) return 10941;
			else if (Rotation == 7) return 10942;
			else if (Rotation == 8) return 10943;
			else if (Rotation == 9) return 10944;
			else if (Rotation == 10) return 10945;
			else if (Rotation == 11) return 10946;
			else if (Rotation == 12) return 10947;
			else if (Rotation == 13) return 10948;
			else if (Rotation == 14) return 10949;
			else return 10950;
		}
		BlockState BlueBanner();
		int Rotation(BlockState Block);
	}
	namespace BlueBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BlueBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1864;
					else return 1865;
				else
					if (Part == Part::Head) return 1866;
					else return 1867;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1868;
					else return 1869;
				else
					if (Part == Part::Head) return 1870;
					else return 1871;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1872;
					else return 1873;
				else
					if (Part == Part::Head) return 1874;
					else return 1875;
			else
				if (Occupied)
					if (Part == Part::Head) return 1876;
					else return 1877;
				else
					if (Part == Part::Head) return 1878;
					else return 1879;
		}
		BlockState BlueBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BlueCandle
	{
		constexpr BlockState BlueCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20917;
					else return 20918;
				else
					if (Waterlogged) return 20919;
					else return 20920;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20921;
					else return 20922;
				else
					if (Waterlogged) return 20923;
					else return 20924;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20925;
					else return 20926;
				else
					if (Waterlogged) return 20927;
					else return 20928;
			else
				if (Lit)
					if (Waterlogged) return 20929;
					else return 20930;
				else
					if (Waterlogged) return 20931;
					else return 20932;
		}
		BlockState BlueCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BlueCandleCake
	{
		constexpr BlockState BlueCandleCake(const bool Lit)
		{
			if (Lit) return 21021;
			else return 21022;
		}
		BlockState BlueCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BlueCarpet
	{
		constexpr BlockState BlueCarpet()
		{
			return 10739;
		}
	}
	namespace BlueConcrete
	{
		constexpr BlockState BlueConcrete()
		{
			return 12739;
		}
	}
	namespace BlueConcretePowder
	{
		constexpr BlockState BlueConcretePowder()
		{
			return 12755;
		}
	}
	namespace BlueGlazedTerracotta
	{
		constexpr BlockState BlueGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12708;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12709;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12710;
			else return 12711;
		}
		BlockState BlueGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueIce
	{
		constexpr BlockState BlueIce()
		{
			return 12941;
		}
	}
	namespace BlueOrchid
	{
		constexpr BlockState BlueOrchid()
		{
			return 2078;
		}
	}
	namespace BlueShulkerBox
	{
		constexpr BlockState BlueShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12634;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12635;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12636;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12637;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12638;
			else return 12639;
		}
		BlockState BlueShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueStainedGlass
	{
		constexpr BlockState BlueStainedGlass()
		{
			return 5956;
		}
	}
	namespace BlueStainedGlassPane
	{
		constexpr BlockState BlueStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9724;
							else return 9725;
						else
							if (West) return 9726;
							else return 9727;
					else
						if (Waterlogged)
							if (West) return 9728;
							else return 9729;
						else
							if (West) return 9730;
							else return 9731;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9732;
							else return 9733;
						else
							if (West) return 9734;
							else return 9735;
					else
						if (Waterlogged)
							if (West) return 9736;
							else return 9737;
						else
							if (West) return 9738;
							else return 9739;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9740;
							else return 9741;
						else
							if (West) return 9742;
							else return 9743;
					else
						if (Waterlogged)
							if (West) return 9744;
							else return 9745;
						else
							if (West) return 9746;
							else return 9747;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9748;
							else return 9749;
						else
							if (West) return 9750;
							else return 9751;
					else
						if (Waterlogged)
							if (West) return 9752;
							else return 9753;
						else
							if (West) return 9754;
							else return 9755;
		}
		BlockState BlueStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BlueTerracotta
	{
		constexpr BlockState BlueTerracotta()
		{
			return 9367;
		}
	}
	namespace BlueWallBanner
	{
		constexpr BlockState BlueWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11059;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11060;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11061;
			else return 11062;
		}
		BlockState BlueWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BlueWool
	{
		constexpr BlockState BlueWool()
		{
			return 2058;
		}
	}
	namespace BoneBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState BoneBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 12546;
			else if (Axis == Axis::Y) return 12547;
			else return 12548;
		}
		BlockState BoneBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace Bookshelf
	{
		constexpr BlockState Bookshelf()
		{
			return 2096;
		}
	}
	namespace BrainCoral
	{
		constexpr BlockState BrainCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12825;
			else return 12826;
		}
		BlockState BrainCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace BrainCoralBlock
	{
		constexpr BlockState BrainCoralBlock()
		{
			return 12809;
		}
	}
	namespace BrainCoralFan
	{
		constexpr BlockState BrainCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12845;
			else return 12846;
		}
		BlockState BrainCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace BrainCoralWallFan
	{
		constexpr BlockState BrainCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12901;
				else return 12902;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12903;
				else return 12904;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12905;
				else return 12906;
			else
				if (Waterlogged) return 12907;
				else return 12908;
		}
		BlockState BrainCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrewingStand
	{
		constexpr BlockState BrewingStand(const bool HasBottle0, const bool HasBottle1, const bool HasBottle2)
		{
			if (HasBottle0)
				if (HasBottle1)
					if (HasBottle2) return 7390;
					else return 7391;
				else
					if (HasBottle2) return 7392;
					else return 7393;
			else
				if (HasBottle1)
					if (HasBottle2) return 7394;
					else return 7395;
				else
					if (HasBottle2) return 7396;
					else return 7397;
		}
		BlockState BrewingStand();
		bool HasBottle0(BlockState Block);
		bool HasBottle1(BlockState Block);
		bool HasBottle2(BlockState Block);
	}
	namespace BrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState BrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11258;
				else return 11259;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11260;
				else return 11261;
			else
				if (Waterlogged) return 11262;
				else return 11263;
		}
		BlockState BrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState BrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7029;
						else return 7030;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7031;
						else return 7032;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7033;
						else return 7034;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7035;
						else return 7036;
					else
						if (Waterlogged) return 7037;
						else return 7038;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7039;
						else return 7040;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7041;
						else return 7042;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7043;
						else return 7044;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7045;
						else return 7046;
					else
						if (Waterlogged) return 7047;
						else return 7048;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7049;
						else return 7050;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7051;
						else return 7052;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7053;
						else return 7054;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7055;
						else return 7056;
					else
						if (Waterlogged) return 7057;
						else return 7058;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7059;
						else return 7060;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7061;
						else return 7062;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7063;
						else return 7064;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7065;
						else return 7066;
					else
						if (Waterlogged) return 7067;
						else return 7068;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7069;
						else return 7070;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7071;
						else return 7072;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7073;
						else return 7074;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7075;
						else return 7076;
					else
						if (Waterlogged) return 7077;
						else return 7078;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7079;
						else return 7080;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7081;
						else return 7082;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7083;
						else return 7084;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7085;
						else return 7086;
					else
						if (Waterlogged) return 7087;
						else return 7088;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7089;
						else return 7090;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7091;
						else return 7092;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7093;
						else return 7094;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7095;
						else return 7096;
					else
						if (Waterlogged) return 7097;
						else return 7098;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7099;
						else return 7100;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7101;
						else return 7102;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7103;
						else return 7104;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7105;
						else return 7106;
					else
						if (Waterlogged) return 7107;
						else return 7108;
		}
		BlockState BrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState BrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14160;
								else if (West == West::Low) return 14161;
								else return 14162;
							else
								if (West == West::None) return 14163;
								else if (West == West::Low) return 14164;
								else return 14165;
						else
							if (Waterlogged)
								if (West == West::None) return 14166;
								else if (West == West::Low) return 14167;
								else return 14168;
							else
								if (West == West::None) return 14169;
								else if (West == West::Low) return 14170;
								else return 14171;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14172;
								else if (West == West::Low) return 14173;
								else return 14174;
							else
								if (West == West::None) return 14175;
								else if (West == West::Low) return 14176;
								else return 14177;
						else
							if (Waterlogged)
								if (West == West::None) return 14178;
								else if (West == West::Low) return 14179;
								else return 14180;
							else
								if (West == West::None) return 14181;
								else if (West == West::Low) return 14182;
								else return 14183;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14184;
								else if (West == West::Low) return 14185;
								else return 14186;
							else
								if (West == West::None) return 14187;
								else if (West == West::Low) return 14188;
								else return 14189;
						else
							if (Waterlogged)
								if (West == West::None) return 14190;
								else if (West == West::Low) return 14191;
								else return 14192;
							else
								if (West == West::None) return 14193;
								else if (West == West::Low) return 14194;
								else return 14195;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14196;
								else if (West == West::Low) return 14197;
								else return 14198;
							else
								if (West == West::None) return 14199;
								else if (West == West::Low) return 14200;
								else return 14201;
						else
							if (Waterlogged)
								if (West == West::None) return 14202;
								else if (West == West::Low) return 14203;
								else return 14204;
							else
								if (West == West::None) return 14205;
								else if (West == West::Low) return 14206;
								else return 14207;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14208;
								else if (West == West::Low) return 14209;
								else return 14210;
							else
								if (West == West::None) return 14211;
								else if (West == West::Low) return 14212;
								else return 14213;
						else
							if (Waterlogged)
								if (West == West::None) return 14214;
								else if (West == West::Low) return 14215;
								else return 14216;
							else
								if (West == West::None) return 14217;
								else if (West == West::Low) return 14218;
								else return 14219;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14220;
								else if (West == West::Low) return 14221;
								else return 14222;
							else
								if (West == West::None) return 14223;
								else if (West == West::Low) return 14224;
								else return 14225;
						else
							if (Waterlogged)
								if (West == West::None) return 14226;
								else if (West == West::Low) return 14227;
								else return 14228;
							else
								if (West == West::None) return 14229;
								else if (West == West::Low) return 14230;
								else return 14231;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14232;
								else if (West == West::Low) return 14233;
								else return 14234;
							else
								if (West == West::None) return 14235;
								else if (West == West::Low) return 14236;
								else return 14237;
						else
							if (Waterlogged)
								if (West == West::None) return 14238;
								else if (West == West::Low) return 14239;
								else return 14240;
							else
								if (West == West::None) return 14241;
								else if (West == West::Low) return 14242;
								else return 14243;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14244;
								else if (West == West::Low) return 14245;
								else return 14246;
							else
								if (West == West::None) return 14247;
								else if (West == West::Low) return 14248;
								else return 14249;
						else
							if (Waterlogged)
								if (West == West::None) return 14250;
								else if (West == West::Low) return 14251;
								else return 14252;
							else
								if (West == West::None) return 14253;
								else if (West == West::Low) return 14254;
								else return 14255;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14256;
								else if (West == West::Low) return 14257;
								else return 14258;
							else
								if (West == West::None) return 14259;
								else if (West == West::Low) return 14260;
								else return 14261;
						else
							if (Waterlogged)
								if (West == West::None) return 14262;
								else if (West == West::Low) return 14263;
								else return 14264;
							else
								if (West == West::None) return 14265;
								else if (West == West::Low) return 14266;
								else return 14267;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14268;
								else if (West == West::Low) return 14269;
								else return 14270;
							else
								if (West == West::None) return 14271;
								else if (West == West::Low) return 14272;
								else return 14273;
						else
							if (Waterlogged)
								if (West == West::None) return 14274;
								else if (West == West::Low) return 14275;
								else return 14276;
							else
								if (West == West::None) return 14277;
								else if (West == West::Low) return 14278;
								else return 14279;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14280;
								else if (West == West::Low) return 14281;
								else return 14282;
							else
								if (West == West::None) return 14283;
								else if (West == West::Low) return 14284;
								else return 14285;
						else
							if (Waterlogged)
								if (West == West::None) return 14286;
								else if (West == West::Low) return 14287;
								else return 14288;
							else
								if (West == West::None) return 14289;
								else if (West == West::Low) return 14290;
								else return 14291;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14292;
								else if (West == West::Low) return 14293;
								else return 14294;
							else
								if (West == West::None) return 14295;
								else if (West == West::Low) return 14296;
								else return 14297;
						else
							if (Waterlogged)
								if (West == West::None) return 14298;
								else if (West == West::Low) return 14299;
								else return 14300;
							else
								if (West == West::None) return 14301;
								else if (West == West::Low) return 14302;
								else return 14303;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14304;
								else if (West == West::Low) return 14305;
								else return 14306;
							else
								if (West == West::None) return 14307;
								else if (West == West::Low) return 14308;
								else return 14309;
						else
							if (Waterlogged)
								if (West == West::None) return 14310;
								else if (West == West::Low) return 14311;
								else return 14312;
							else
								if (West == West::None) return 14313;
								else if (West == West::Low) return 14314;
								else return 14315;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14316;
								else if (West == West::Low) return 14317;
								else return 14318;
							else
								if (West == West::None) return 14319;
								else if (West == West::Low) return 14320;
								else return 14321;
						else
							if (Waterlogged)
								if (West == West::None) return 14322;
								else if (West == West::Low) return 14323;
								else return 14324;
							else
								if (West == West::None) return 14325;
								else if (West == West::Low) return 14326;
								else return 14327;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14328;
								else if (West == West::Low) return 14329;
								else return 14330;
							else
								if (West == West::None) return 14331;
								else if (West == West::Low) return 14332;
								else return 14333;
						else
							if (Waterlogged)
								if (West == West::None) return 14334;
								else if (West == West::Low) return 14335;
								else return 14336;
							else
								if (West == West::None) return 14337;
								else if (West == West::Low) return 14338;
								else return 14339;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14340;
								else if (West == West::Low) return 14341;
								else return 14342;
							else
								if (West == West::None) return 14343;
								else if (West == West::Low) return 14344;
								else return 14345;
						else
							if (Waterlogged)
								if (West == West::None) return 14346;
								else if (West == West::Low) return 14347;
								else return 14348;
							else
								if (West == West::None) return 14349;
								else if (West == West::Low) return 14350;
								else return 14351;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14352;
								else if (West == West::Low) return 14353;
								else return 14354;
							else
								if (West == West::None) return 14355;
								else if (West == West::Low) return 14356;
								else return 14357;
						else
							if (Waterlogged)
								if (West == West::None) return 14358;
								else if (West == West::Low) return 14359;
								else return 14360;
							else
								if (West == West::None) return 14361;
								else if (West == West::Low) return 14362;
								else return 14363;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14364;
								else if (West == West::Low) return 14365;
								else return 14366;
							else
								if (West == West::None) return 14367;
								else if (West == West::Low) return 14368;
								else return 14369;
						else
							if (Waterlogged)
								if (West == West::None) return 14370;
								else if (West == West::Low) return 14371;
								else return 14372;
							else
								if (West == West::None) return 14373;
								else if (West == West::Low) return 14374;
								else return 14375;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14376;
								else if (West == West::Low) return 14377;
								else return 14378;
							else
								if (West == West::None) return 14379;
								else if (West == West::Low) return 14380;
								else return 14381;
						else
							if (Waterlogged)
								if (West == West::None) return 14382;
								else if (West == West::Low) return 14383;
								else return 14384;
							else
								if (West == West::None) return 14385;
								else if (West == West::Low) return 14386;
								else return 14387;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14388;
								else if (West == West::Low) return 14389;
								else return 14390;
							else
								if (West == West::None) return 14391;
								else if (West == West::Low) return 14392;
								else return 14393;
						else
							if (Waterlogged)
								if (West == West::None) return 14394;
								else if (West == West::Low) return 14395;
								else return 14396;
							else
								if (West == West::None) return 14397;
								else if (West == West::Low) return 14398;
								else return 14399;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14400;
								else if (West == West::Low) return 14401;
								else return 14402;
							else
								if (West == West::None) return 14403;
								else if (West == West::Low) return 14404;
								else return 14405;
						else
							if (Waterlogged)
								if (West == West::None) return 14406;
								else if (West == West::Low) return 14407;
								else return 14408;
							else
								if (West == West::None) return 14409;
								else if (West == West::Low) return 14410;
								else return 14411;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14412;
								else if (West == West::Low) return 14413;
								else return 14414;
							else
								if (West == West::None) return 14415;
								else if (West == West::Low) return 14416;
								else return 14417;
						else
							if (Waterlogged)
								if (West == West::None) return 14418;
								else if (West == West::Low) return 14419;
								else return 14420;
							else
								if (West == West::None) return 14421;
								else if (West == West::Low) return 14422;
								else return 14423;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14424;
								else if (West == West::Low) return 14425;
								else return 14426;
							else
								if (West == West::None) return 14427;
								else if (West == West::Low) return 14428;
								else return 14429;
						else
							if (Waterlogged)
								if (West == West::None) return 14430;
								else if (West == West::Low) return 14431;
								else return 14432;
							else
								if (West == West::None) return 14433;
								else if (West == West::Low) return 14434;
								else return 14435;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14436;
								else if (West == West::Low) return 14437;
								else return 14438;
							else
								if (West == West::None) return 14439;
								else if (West == West::Low) return 14440;
								else return 14441;
						else
							if (Waterlogged)
								if (West == West::None) return 14442;
								else if (West == West::Low) return 14443;
								else return 14444;
							else
								if (West == West::None) return 14445;
								else if (West == West::Low) return 14446;
								else return 14447;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14448;
								else if (West == West::Low) return 14449;
								else return 14450;
							else
								if (West == West::None) return 14451;
								else if (West == West::Low) return 14452;
								else return 14453;
						else
							if (Waterlogged)
								if (West == West::None) return 14454;
								else if (West == West::Low) return 14455;
								else return 14456;
							else
								if (West == West::None) return 14457;
								else if (West == West::Low) return 14458;
								else return 14459;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14460;
								else if (West == West::Low) return 14461;
								else return 14462;
							else
								if (West == West::None) return 14463;
								else if (West == West::Low) return 14464;
								else return 14465;
						else
							if (Waterlogged)
								if (West == West::None) return 14466;
								else if (West == West::Low) return 14467;
								else return 14468;
							else
								if (West == West::None) return 14469;
								else if (West == West::Low) return 14470;
								else return 14471;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14472;
								else if (West == West::Low) return 14473;
								else return 14474;
							else
								if (West == West::None) return 14475;
								else if (West == West::Low) return 14476;
								else return 14477;
						else
							if (Waterlogged)
								if (West == West::None) return 14478;
								else if (West == West::Low) return 14479;
								else return 14480;
							else
								if (West == West::None) return 14481;
								else if (West == West::Low) return 14482;
								else return 14483;
		}
		BlockState BrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Bricks
	{
		constexpr BlockState Bricks()
		{
			return 2093;
		}
	}
	namespace BrownBanner
	{
		constexpr BlockState BrownBanner(const int Rotation)
		{
			if (Rotation == 0) return 10951;
			else if (Rotation == 1) return 10952;
			else if (Rotation == 2) return 10953;
			else if (Rotation == 3) return 10954;
			else if (Rotation == 4) return 10955;
			else if (Rotation == 5) return 10956;
			else if (Rotation == 6) return 10957;
			else if (Rotation == 7) return 10958;
			else if (Rotation == 8) return 10959;
			else if (Rotation == 9) return 10960;
			else if (Rotation == 10) return 10961;
			else if (Rotation == 11) return 10962;
			else if (Rotation == 12) return 10963;
			else if (Rotation == 13) return 10964;
			else if (Rotation == 14) return 10965;
			else return 10966;
		}
		BlockState BrownBanner();
		int Rotation(BlockState Block);
	}
	namespace BrownBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState BrownBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1880;
					else return 1881;
				else
					if (Part == Part::Head) return 1882;
					else return 1883;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1884;
					else return 1885;
				else
					if (Part == Part::Head) return 1886;
					else return 1887;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1888;
					else return 1889;
				else
					if (Part == Part::Head) return 1890;
					else return 1891;
			else
				if (Occupied)
					if (Part == Part::Head) return 1892;
					else return 1893;
				else
					if (Part == Part::Head) return 1894;
					else return 1895;
		}
		BlockState BrownBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace BrownCandle
	{
		constexpr BlockState BrownCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20933;
					else return 20934;
				else
					if (Waterlogged) return 20935;
					else return 20936;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20937;
					else return 20938;
				else
					if (Waterlogged) return 20939;
					else return 20940;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20941;
					else return 20942;
				else
					if (Waterlogged) return 20943;
					else return 20944;
			else
				if (Lit)
					if (Waterlogged) return 20945;
					else return 20946;
				else
					if (Waterlogged) return 20947;
					else return 20948;
		}
		BlockState BrownCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BrownCandleCake
	{
		constexpr BlockState BrownCandleCake(const bool Lit)
		{
			if (Lit) return 21023;
			else return 21024;
		}
		BlockState BrownCandleCake();
		bool Lit(BlockState Block);
	}
	namespace BrownCarpet
	{
		constexpr BlockState BrownCarpet()
		{
			return 10740;
		}
	}
	namespace BrownConcrete
	{
		constexpr BlockState BrownConcrete()
		{
			return 12740;
		}
	}
	namespace BrownConcretePowder
	{
		constexpr BlockState BrownConcretePowder()
		{
			return 12756;
		}
	}
	namespace BrownGlazedTerracotta
	{
		constexpr BlockState BrownGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12712;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12713;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12714;
			else return 12715;
		}
		BlockState BrownGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownMushroom
	{
		constexpr BlockState BrownMushroom()
		{
			return 2089;
		}
	}
	namespace BrownMushroomBlock
	{
		constexpr BlockState BrownMushroomBlock(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6549;
								else return 6550;
							else
								if (West) return 6551;
								else return 6552;
						else
							if (Up)
								if (West) return 6553;
								else return 6554;
							else
								if (West) return 6555;
								else return 6556;
					else
						if (South)
							if (Up)
								if (West) return 6557;
								else return 6558;
							else
								if (West) return 6559;
								else return 6560;
						else
							if (Up)
								if (West) return 6561;
								else return 6562;
							else
								if (West) return 6563;
								else return 6564;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6565;
								else return 6566;
							else
								if (West) return 6567;
								else return 6568;
						else
							if (Up)
								if (West) return 6569;
								else return 6570;
							else
								if (West) return 6571;
								else return 6572;
					else
						if (South)
							if (Up)
								if (West) return 6573;
								else return 6574;
							else
								if (West) return 6575;
								else return 6576;
						else
							if (Up)
								if (West) return 6577;
								else return 6578;
							else
								if (West) return 6579;
								else return 6580;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6581;
								else return 6582;
							else
								if (West) return 6583;
								else return 6584;
						else
							if (Up)
								if (West) return 6585;
								else return 6586;
							else
								if (West) return 6587;
								else return 6588;
					else
						if (South)
							if (Up)
								if (West) return 6589;
								else return 6590;
							else
								if (West) return 6591;
								else return 6592;
						else
							if (Up)
								if (West) return 6593;
								else return 6594;
							else
								if (West) return 6595;
								else return 6596;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6597;
								else return 6598;
							else
								if (West) return 6599;
								else return 6600;
						else
							if (Up)
								if (West) return 6601;
								else return 6602;
							else
								if (West) return 6603;
								else return 6604;
					else
						if (South)
							if (Up)
								if (West) return 6605;
								else return 6606;
							else
								if (West) return 6607;
								else return 6608;
						else
							if (Up)
								if (West) return 6609;
								else return 6610;
							else
								if (West) return 6611;
								else return 6612;
		}
		BlockState BrownMushroomBlock();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BrownShulkerBox
	{
		constexpr BlockState BrownShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12640;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12641;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12642;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12643;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12644;
			else return 12645;
		}
		BlockState BrownShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownStainedGlass
	{
		constexpr BlockState BrownStainedGlass()
		{
			return 5957;
		}
	}
	namespace BrownStainedGlassPane
	{
		constexpr BlockState BrownStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9756;
							else return 9757;
						else
							if (West) return 9758;
							else return 9759;
					else
						if (Waterlogged)
							if (West) return 9760;
							else return 9761;
						else
							if (West) return 9762;
							else return 9763;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9764;
							else return 9765;
						else
							if (West) return 9766;
							else return 9767;
					else
						if (Waterlogged)
							if (West) return 9768;
							else return 9769;
						else
							if (West) return 9770;
							else return 9771;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9772;
							else return 9773;
						else
							if (West) return 9774;
							else return 9775;
					else
						if (Waterlogged)
							if (West) return 9776;
							else return 9777;
						else
							if (West) return 9778;
							else return 9779;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9780;
							else return 9781;
						else
							if (West) return 9782;
							else return 9783;
					else
						if (Waterlogged)
							if (West) return 9784;
							else return 9785;
						else
							if (West) return 9786;
							else return 9787;
		}
		BlockState BrownStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace BrownTerracotta
	{
		constexpr BlockState BrownTerracotta()
		{
			return 9368;
		}
	}
	namespace BrownWallBanner
	{
		constexpr BlockState BrownWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11063;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11064;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11065;
			else return 11066;
		}
		BlockState BrownWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace BrownWool
	{
		constexpr BlockState BrownWool()
		{
			return 2059;
		}
	}
	namespace BubbleColumn
	{
		constexpr BlockState BubbleColumn(const bool Drag)
		{
			if (Drag) return 12960;
			else return 12961;
		}
		BlockState BubbleColumn();
		bool Drag(BlockState Block);
	}
	namespace BubbleCoral
	{
		constexpr BlockState BubbleCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12827;
			else return 12828;
		}
		BlockState BubbleCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace BubbleCoralBlock
	{
		constexpr BlockState BubbleCoralBlock()
		{
			return 12810;
		}
	}
	namespace BubbleCoralFan
	{
		constexpr BlockState BubbleCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12847;
			else return 12848;
		}
		BlockState BubbleCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace BubbleCoralWallFan
	{
		constexpr BlockState BubbleCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12909;
				else return 12910;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12911;
				else return 12912;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12913;
				else return 12914;
			else
				if (Waterlogged) return 12915;
				else return 12916;
		}
		BlockState BubbleCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace BuddingAmethyst
	{
		constexpr BlockState BuddingAmethyst()
		{
			return 21032;
		}
	}
	namespace Cactus
	{
		constexpr BlockState Cactus(const int Age)
		{
			if (Age == 0) return 5782;
			else if (Age == 1) return 5783;
			else if (Age == 2) return 5784;
			else if (Age == 3) return 5785;
			else if (Age == 4) return 5786;
			else if (Age == 5) return 5787;
			else if (Age == 6) return 5788;
			else if (Age == 7) return 5789;
			else if (Age == 8) return 5790;
			else if (Age == 9) return 5791;
			else if (Age == 10) return 5792;
			else if (Age == 11) return 5793;
			else if (Age == 12) return 5794;
			else if (Age == 13) return 5795;
			else if (Age == 14) return 5796;
			else return 5797;
		}
		BlockState Cactus();
		int Age(BlockState Block);
	}
	namespace Cake
	{
		constexpr BlockState Cake(const int Bites)
		{
			if (Bites == 0) return 5874;
			else if (Bites == 1) return 5875;
			else if (Bites == 2) return 5876;
			else if (Bites == 3) return 5877;
			else if (Bites == 4) return 5878;
			else if (Bites == 5) return 5879;
			else return 5880;
		}
		BlockState Cake();
		int Bites(BlockState Block);
	}
	namespace Calcite
	{
		constexpr BlockState Calcite()
		{
			return 22316;
		}
	}
	namespace CalibratedSculkSensor
	{
		enum class SculkSensorPhase
		{
			Inactive,
			Active,
			Cooldown,
		};
		constexpr BlockState CalibratedSculkSensor(const eBlockFace Facing, const int Power, const enum SculkSensorPhase SculkSensorPhase, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22415;
						else return 22416;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22417;
						else return 22418;
					else
						if (Waterlogged) return 22419;
						else return 22420;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22421;
						else return 22422;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22423;
						else return 22424;
					else
						if (Waterlogged) return 22425;
						else return 22426;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22427;
						else return 22428;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22429;
						else return 22430;
					else
						if (Waterlogged) return 22431;
						else return 22432;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22433;
						else return 22434;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22435;
						else return 22436;
					else
						if (Waterlogged) return 22437;
						else return 22438;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22439;
						else return 22440;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22441;
						else return 22442;
					else
						if (Waterlogged) return 22443;
						else return 22444;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22445;
						else return 22446;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22447;
						else return 22448;
					else
						if (Waterlogged) return 22449;
						else return 22450;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22451;
						else return 22452;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22453;
						else return 22454;
					else
						if (Waterlogged) return 22455;
						else return 22456;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22457;
						else return 22458;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22459;
						else return 22460;
					else
						if (Waterlogged) return 22461;
						else return 22462;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22463;
						else return 22464;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22465;
						else return 22466;
					else
						if (Waterlogged) return 22467;
						else return 22468;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22469;
						else return 22470;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22471;
						else return 22472;
					else
						if (Waterlogged) return 22473;
						else return 22474;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22475;
						else return 22476;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22477;
						else return 22478;
					else
						if (Waterlogged) return 22479;
						else return 22480;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22481;
						else return 22482;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22483;
						else return 22484;
					else
						if (Waterlogged) return 22485;
						else return 22486;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22487;
						else return 22488;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22489;
						else return 22490;
					else
						if (Waterlogged) return 22491;
						else return 22492;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22493;
						else return 22494;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22495;
						else return 22496;
					else
						if (Waterlogged) return 22497;
						else return 22498;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22499;
						else return 22500;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22501;
						else return 22502;
					else
						if (Waterlogged) return 22503;
						else return 22504;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22505;
						else return 22506;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22507;
						else return 22508;
					else
						if (Waterlogged) return 22509;
						else return 22510;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22511;
						else return 22512;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22513;
						else return 22514;
					else
						if (Waterlogged) return 22515;
						else return 22516;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22517;
						else return 22518;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22519;
						else return 22520;
					else
						if (Waterlogged) return 22521;
						else return 22522;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22523;
						else return 22524;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22525;
						else return 22526;
					else
						if (Waterlogged) return 22527;
						else return 22528;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22529;
						else return 22530;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22531;
						else return 22532;
					else
						if (Waterlogged) return 22533;
						else return 22534;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22535;
						else return 22536;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22537;
						else return 22538;
					else
						if (Waterlogged) return 22539;
						else return 22540;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22541;
						else return 22542;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22543;
						else return 22544;
					else
						if (Waterlogged) return 22545;
						else return 22546;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22547;
						else return 22548;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22549;
						else return 22550;
					else
						if (Waterlogged) return 22551;
						else return 22552;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22553;
						else return 22554;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22555;
						else return 22556;
					else
						if (Waterlogged) return 22557;
						else return 22558;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22559;
						else return 22560;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22561;
						else return 22562;
					else
						if (Waterlogged) return 22563;
						else return 22564;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22565;
						else return 22566;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22567;
						else return 22568;
					else
						if (Waterlogged) return 22569;
						else return 22570;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22571;
						else return 22572;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22573;
						else return 22574;
					else
						if (Waterlogged) return 22575;
						else return 22576;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22577;
						else return 22578;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22579;
						else return 22580;
					else
						if (Waterlogged) return 22581;
						else return 22582;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22583;
						else return 22584;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22585;
						else return 22586;
					else
						if (Waterlogged) return 22587;
						else return 22588;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22589;
						else return 22590;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22591;
						else return 22592;
					else
						if (Waterlogged) return 22593;
						else return 22594;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22595;
						else return 22596;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22597;
						else return 22598;
					else
						if (Waterlogged) return 22599;
						else return 22600;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22601;
						else return 22602;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22603;
						else return 22604;
					else
						if (Waterlogged) return 22605;
						else return 22606;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22607;
						else return 22608;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22609;
						else return 22610;
					else
						if (Waterlogged) return 22611;
						else return 22612;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22613;
						else return 22614;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22615;
						else return 22616;
					else
						if (Waterlogged) return 22617;
						else return 22618;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22619;
						else return 22620;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22621;
						else return 22622;
					else
						if (Waterlogged) return 22623;
						else return 22624;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22625;
						else return 22626;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22627;
						else return 22628;
					else
						if (Waterlogged) return 22629;
						else return 22630;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22631;
						else return 22632;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22633;
						else return 22634;
					else
						if (Waterlogged) return 22635;
						else return 22636;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22637;
						else return 22638;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22639;
						else return 22640;
					else
						if (Waterlogged) return 22641;
						else return 22642;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22643;
						else return 22644;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22645;
						else return 22646;
					else
						if (Waterlogged) return 22647;
						else return 22648;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22649;
						else return 22650;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22651;
						else return 22652;
					else
						if (Waterlogged) return 22653;
						else return 22654;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22655;
						else return 22656;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22657;
						else return 22658;
					else
						if (Waterlogged) return 22659;
						else return 22660;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22661;
						else return 22662;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22663;
						else return 22664;
					else
						if (Waterlogged) return 22665;
						else return 22666;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22667;
						else return 22668;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22669;
						else return 22670;
					else
						if (Waterlogged) return 22671;
						else return 22672;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22673;
						else return 22674;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22675;
						else return 22676;
					else
						if (Waterlogged) return 22677;
						else return 22678;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22679;
						else return 22680;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22681;
						else return 22682;
					else
						if (Waterlogged) return 22683;
						else return 22684;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22685;
						else return 22686;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22687;
						else return 22688;
					else
						if (Waterlogged) return 22689;
						else return 22690;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22691;
						else return 22692;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22693;
						else return 22694;
					else
						if (Waterlogged) return 22695;
						else return 22696;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22697;
						else return 22698;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22699;
						else return 22700;
					else
						if (Waterlogged) return 22701;
						else return 22702;
			else
				if (Power == 0)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22703;
						else return 22704;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22705;
						else return 22706;
					else
						if (Waterlogged) return 22707;
						else return 22708;
				else if (Power == 1)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22709;
						else return 22710;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22711;
						else return 22712;
					else
						if (Waterlogged) return 22713;
						else return 22714;
				else if (Power == 2)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22715;
						else return 22716;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22717;
						else return 22718;
					else
						if (Waterlogged) return 22719;
						else return 22720;
				else if (Power == 3)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22721;
						else return 22722;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22723;
						else return 22724;
					else
						if (Waterlogged) return 22725;
						else return 22726;
				else if (Power == 4)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22727;
						else return 22728;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22729;
						else return 22730;
					else
						if (Waterlogged) return 22731;
						else return 22732;
				else if (Power == 5)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22733;
						else return 22734;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22735;
						else return 22736;
					else
						if (Waterlogged) return 22737;
						else return 22738;
				else if (Power == 6)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22739;
						else return 22740;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22741;
						else return 22742;
					else
						if (Waterlogged) return 22743;
						else return 22744;
				else if (Power == 7)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22745;
						else return 22746;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22747;
						else return 22748;
					else
						if (Waterlogged) return 22749;
						else return 22750;
				else if (Power == 8)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22751;
						else return 22752;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22753;
						else return 22754;
					else
						if (Waterlogged) return 22755;
						else return 22756;
				else if (Power == 9)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22757;
						else return 22758;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22759;
						else return 22760;
					else
						if (Waterlogged) return 22761;
						else return 22762;
				else if (Power == 10)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22763;
						else return 22764;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22765;
						else return 22766;
					else
						if (Waterlogged) return 22767;
						else return 22768;
				else if (Power == 11)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22769;
						else return 22770;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22771;
						else return 22772;
					else
						if (Waterlogged) return 22773;
						else return 22774;
				else if (Power == 12)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22775;
						else return 22776;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22777;
						else return 22778;
					else
						if (Waterlogged) return 22779;
						else return 22780;
				else if (Power == 13)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22781;
						else return 22782;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22783;
						else return 22784;
					else
						if (Waterlogged) return 22785;
						else return 22786;
				else if (Power == 14)
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22787;
						else return 22788;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22789;
						else return 22790;
					else
						if (Waterlogged) return 22791;
						else return 22792;
				else
					if (SculkSensorPhase == SculkSensorPhase::Inactive)
						if (Waterlogged) return 22793;
						else return 22794;
					else if (SculkSensorPhase == SculkSensorPhase::Active)
						if (Waterlogged) return 22795;
						else return 22796;
					else
						if (Waterlogged) return 22797;
						else return 22798;
		}
		BlockState CalibratedSculkSensor();
		eBlockFace Facing(BlockState Block);
		int Power(BlockState Block);
		enum SculkSensorPhase SculkSensorPhase(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Campfire
	{
		constexpr BlockState Campfire(const eBlockFace Facing, const bool Lit, const bool SignalFire, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18511;
						else return 18512;
					else
						if (Waterlogged) return 18513;
						else return 18514;
				else
					if (SignalFire)
						if (Waterlogged) return 18515;
						else return 18516;
					else
						if (Waterlogged) return 18517;
						else return 18518;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18519;
						else return 18520;
					else
						if (Waterlogged) return 18521;
						else return 18522;
				else
					if (SignalFire)
						if (Waterlogged) return 18523;
						else return 18524;
					else
						if (Waterlogged) return 18525;
						else return 18526;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18527;
						else return 18528;
					else
						if (Waterlogged) return 18529;
						else return 18530;
				else
					if (SignalFire)
						if (Waterlogged) return 18531;
						else return 18532;
					else
						if (Waterlogged) return 18533;
						else return 18534;
			else
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18535;
						else return 18536;
					else
						if (Waterlogged) return 18537;
						else return 18538;
				else
					if (SignalFire)
						if (Waterlogged) return 18539;
						else return 18540;
					else
						if (Waterlogged) return 18541;
						else return 18542;
		}
		BlockState Campfire();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
		bool SignalFire(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Candle
	{
		constexpr BlockState Candle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20725;
					else return 20726;
				else
					if (Waterlogged) return 20727;
					else return 20728;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20729;
					else return 20730;
				else
					if (Waterlogged) return 20731;
					else return 20732;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20733;
					else return 20734;
				else
					if (Waterlogged) return 20735;
					else return 20736;
			else
				if (Lit)
					if (Waterlogged) return 20737;
					else return 20738;
				else
					if (Waterlogged) return 20739;
					else return 20740;
		}
		BlockState Candle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CandleCake
	{
		constexpr BlockState CandleCake(const bool Lit)
		{
			if (Lit) return 20997;
			else return 20998;
		}
		BlockState CandleCake();
		bool Lit(BlockState Block);
	}
	namespace Carrots
	{
		constexpr BlockState Carrots(const int Age)
		{
			if (Age == 0) return 8595;
			else if (Age == 1) return 8596;
			else if (Age == 2) return 8597;
			else if (Age == 3) return 8598;
			else if (Age == 4) return 8599;
			else if (Age == 5) return 8600;
			else if (Age == 6) return 8601;
			else return 8602;
		}
		BlockState Carrots();
		int Age(BlockState Block);
	}
	namespace CartographyTable
	{
		constexpr BlockState CartographyTable()
		{
			return 18436;
		}
	}
	namespace CarvedPumpkin
	{
		constexpr BlockState CarvedPumpkin(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 5866;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 5867;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 5868;
			else return 5869;
		}
		BlockState CarvedPumpkin();
		eBlockFace Facing(BlockState Block);
	}
	namespace Cauldron
	{
		constexpr BlockState Cauldron()
		{
			return 7398;
		}
	}
	namespace CaveAir
	{
		constexpr BlockState CaveAir()
		{
			return 12959;
		}
	}
	namespace CaveVines
	{
		constexpr BlockState CaveVines(const int Age, const bool Berries)
		{
			if (Age == 0)
				if (Berries) return 24769;
				else return 24770;
			else if (Age == 1)
				if (Berries) return 24771;
				else return 24772;
			else if (Age == 2)
				if (Berries) return 24773;
				else return 24774;
			else if (Age == 3)
				if (Berries) return 24775;
				else return 24776;
			else if (Age == 4)
				if (Berries) return 24777;
				else return 24778;
			else if (Age == 5)
				if (Berries) return 24779;
				else return 24780;
			else if (Age == 6)
				if (Berries) return 24781;
				else return 24782;
			else if (Age == 7)
				if (Berries) return 24783;
				else return 24784;
			else if (Age == 8)
				if (Berries) return 24785;
				else return 24786;
			else if (Age == 9)
				if (Berries) return 24787;
				else return 24788;
			else if (Age == 10)
				if (Berries) return 24789;
				else return 24790;
			else if (Age == 11)
				if (Berries) return 24791;
				else return 24792;
			else if (Age == 12)
				if (Berries) return 24793;
				else return 24794;
			else if (Age == 13)
				if (Berries) return 24795;
				else return 24796;
			else if (Age == 14)
				if (Berries) return 24797;
				else return 24798;
			else if (Age == 15)
				if (Berries) return 24799;
				else return 24800;
			else if (Age == 16)
				if (Berries) return 24801;
				else return 24802;
			else if (Age == 17)
				if (Berries) return 24803;
				else return 24804;
			else if (Age == 18)
				if (Berries) return 24805;
				else return 24806;
			else if (Age == 19)
				if (Berries) return 24807;
				else return 24808;
			else if (Age == 20)
				if (Berries) return 24809;
				else return 24810;
			else if (Age == 21)
				if (Berries) return 24811;
				else return 24812;
			else if (Age == 22)
				if (Berries) return 24813;
				else return 24814;
			else if (Age == 23)
				if (Berries) return 24815;
				else return 24816;
			else if (Age == 24)
				if (Berries) return 24817;
				else return 24818;
			else
				if (Berries) return 24819;
				else return 24820;
		}
		BlockState CaveVines();
		int Age(BlockState Block);
		bool Berries(BlockState Block);
	}
	namespace CaveVinesPlant
	{
		constexpr BlockState CaveVinesPlant(const bool Berries)
		{
			if (Berries) return 24821;
			else return 24822;
		}
		BlockState CaveVinesPlant();
		bool Berries(BlockState Block);
	}
	namespace Chain
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Chain(const enum Axis Axis, const bool Waterlogged)
		{
			if (Axis == Axis::X)
				if (Waterlogged) return 6773;
				else return 6774;
			else if (Axis == Axis::Y)
				if (Waterlogged) return 6775;
				else return 6776;
			else
				if (Waterlogged) return 6777;
				else return 6778;
		}
		BlockState Chain();
		enum Axis Axis(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ChainCommandBlock
	{
		constexpr BlockState ChainCommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12527;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12528;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12529;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12530;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12531;
				else return 12532;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12533;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12534;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12535;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12536;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12537;
				else return 12538;
		}
		BlockState ChainCommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace CherryButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState CherryButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8731;
					else return 8732;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8733;
					else return 8734;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8735;
					else return 8736;
				else
					if (Powered) return 8737;
					else return 8738;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8739;
					else return 8740;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8741;
					else return 8742;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8743;
					else return 8744;
				else
					if (Powered) return 8745;
					else return 8746;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8747;
					else return 8748;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8749;
					else return 8750;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8751;
					else return 8752;
				else
					if (Powered) return 8753;
					else return 8754;
		}
		BlockState CherryButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CherryDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12078;
							else return 12079;
						else
							if (Powered) return 12080;
							else return 12081;
					else
						if (Open)
							if (Powered) return 12082;
							else return 12083;
						else
							if (Powered) return 12084;
							else return 12085;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12086;
							else return 12087;
						else
							if (Powered) return 12088;
							else return 12089;
					else
						if (Open)
							if (Powered) return 12090;
							else return 12091;
						else
							if (Powered) return 12092;
							else return 12093;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12094;
							else return 12095;
						else
							if (Powered) return 12096;
							else return 12097;
					else
						if (Open)
							if (Powered) return 12098;
							else return 12099;
						else
							if (Powered) return 12100;
							else return 12101;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12102;
							else return 12103;
						else
							if (Powered) return 12104;
							else return 12105;
					else
						if (Open)
							if (Powered) return 12106;
							else return 12107;
						else
							if (Powered) return 12108;
							else return 12109;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12110;
							else return 12111;
						else
							if (Powered) return 12112;
							else return 12113;
					else
						if (Open)
							if (Powered) return 12114;
							else return 12115;
						else
							if (Powered) return 12116;
							else return 12117;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12118;
							else return 12119;
						else
							if (Powered) return 12120;
							else return 12121;
					else
						if (Open)
							if (Powered) return 12122;
							else return 12123;
						else
							if (Powered) return 12124;
							else return 12125;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12126;
							else return 12127;
						else
							if (Powered) return 12128;
							else return 12129;
					else
						if (Open)
							if (Powered) return 12130;
							else return 12131;
						else
							if (Powered) return 12132;
							else return 12133;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12134;
							else return 12135;
						else
							if (Powered) return 12136;
							else return 12137;
					else
						if (Open)
							if (Powered) return 12138;
							else return 12139;
						else
							if (Powered) return 12140;
							else return 12141;
		}
		BlockState CherryDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryFence
	{
		constexpr BlockState CherryFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11694;
							else return 11695;
						else
							if (West) return 11696;
							else return 11697;
					else
						if (Waterlogged)
							if (West) return 11698;
							else return 11699;
						else
							if (West) return 11700;
							else return 11701;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11702;
							else return 11703;
						else
							if (West) return 11704;
							else return 11705;
					else
						if (Waterlogged)
							if (West) return 11706;
							else return 11707;
						else
							if (West) return 11708;
							else return 11709;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11710;
							else return 11711;
						else
							if (West) return 11712;
							else return 11713;
					else
						if (Waterlogged)
							if (West) return 11714;
							else return 11715;
						else
							if (West) return 11716;
							else return 11717;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11718;
							else return 11719;
						else
							if (West) return 11720;
							else return 11721;
					else
						if (Waterlogged)
							if (West) return 11722;
							else return 11723;
						else
							if (West) return 11724;
							else return 11725;
		}
		BlockState CherryFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CherryFenceGate
	{
		constexpr BlockState CherryFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11438;
						else return 11439;
					else
						if (Powered) return 11440;
						else return 11441;
				else
					if (Open)
						if (Powered) return 11442;
						else return 11443;
					else
						if (Powered) return 11444;
						else return 11445;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11446;
						else return 11447;
					else
						if (Powered) return 11448;
						else return 11449;
				else
					if (Open)
						if (Powered) return 11450;
						else return 11451;
					else
						if (Powered) return 11452;
						else return 11453;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11454;
						else return 11455;
					else
						if (Powered) return 11456;
						else return 11457;
				else
					if (Open)
						if (Powered) return 11458;
						else return 11459;
					else
						if (Powered) return 11460;
						else return 11461;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11462;
						else return 11463;
					else
						if (Powered) return 11464;
						else return 11465;
				else
					if (Open)
						if (Powered) return 11466;
						else return 11467;
					else
						if (Powered) return 11468;
						else return 11469;
		}
		BlockState CherryFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CherryHangingSign
	{
		constexpr BlockState CherryHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5090;
					else return 5091;
				else if (Rotation == 1)
					if (Waterlogged) return 5092;
					else return 5093;
				else if (Rotation == 2)
					if (Waterlogged) return 5094;
					else return 5095;
				else if (Rotation == 3)
					if (Waterlogged) return 5096;
					else return 5097;
				else if (Rotation == 4)
					if (Waterlogged) return 5098;
					else return 5099;
				else if (Rotation == 5)
					if (Waterlogged) return 5100;
					else return 5101;
				else if (Rotation == 6)
					if (Waterlogged) return 5102;
					else return 5103;
				else if (Rotation == 7)
					if (Waterlogged) return 5104;
					else return 5105;
				else if (Rotation == 8)
					if (Waterlogged) return 5106;
					else return 5107;
				else if (Rotation == 9)
					if (Waterlogged) return 5108;
					else return 5109;
				else if (Rotation == 10)
					if (Waterlogged) return 5110;
					else return 5111;
				else if (Rotation == 11)
					if (Waterlogged) return 5112;
					else return 5113;
				else if (Rotation == 12)
					if (Waterlogged) return 5114;
					else return 5115;
				else if (Rotation == 13)
					if (Waterlogged) return 5116;
					else return 5117;
				else if (Rotation == 14)
					if (Waterlogged) return 5118;
					else return 5119;
				else
					if (Waterlogged) return 5120;
					else return 5121;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5122;
					else return 5123;
				else if (Rotation == 1)
					if (Waterlogged) return 5124;
					else return 5125;
				else if (Rotation == 2)
					if (Waterlogged) return 5126;
					else return 5127;
				else if (Rotation == 3)
					if (Waterlogged) return 5128;
					else return 5129;
				else if (Rotation == 4)
					if (Waterlogged) return 5130;
					else return 5131;
				else if (Rotation == 5)
					if (Waterlogged) return 5132;
					else return 5133;
				else if (Rotation == 6)
					if (Waterlogged) return 5134;
					else return 5135;
				else if (Rotation == 7)
					if (Waterlogged) return 5136;
					else return 5137;
				else if (Rotation == 8)
					if (Waterlogged) return 5138;
					else return 5139;
				else if (Rotation == 9)
					if (Waterlogged) return 5140;
					else return 5141;
				else if (Rotation == 10)
					if (Waterlogged) return 5142;
					else return 5143;
				else if (Rotation == 11)
					if (Waterlogged) return 5144;
					else return 5145;
				else if (Rotation == 12)
					if (Waterlogged) return 5146;
					else return 5147;
				else if (Rotation == 13)
					if (Waterlogged) return 5148;
					else return 5149;
				else if (Rotation == 14)
					if (Waterlogged) return 5150;
					else return 5151;
				else
					if (Waterlogged) return 5152;
					else return 5153;
		}
		BlockState CherryHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryLeaves
	{
		constexpr BlockState CherryLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 377;
					else return 378;
				else
					if (Waterlogged) return 379;
					else return 380;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 381;
					else return 382;
				else
					if (Waterlogged) return 383;
					else return 384;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 385;
					else return 386;
				else
					if (Waterlogged) return 387;
					else return 388;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 389;
					else return 390;
				else
					if (Waterlogged) return 391;
					else return 392;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 393;
					else return 394;
				else
					if (Waterlogged) return 395;
					else return 396;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 397;
					else return 398;
				else
					if (Waterlogged) return 399;
					else return 400;
			else
				if (Persistent)
					if (Waterlogged) return 401;
					else return 402;
				else
					if (Waterlogged) return 403;
					else return 404;
		}
		BlockState CherryLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CherryLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 145;
			else if (Axis == Axis::Y) return 146;
			else return 147;
		}
		BlockState CherryLog();
		enum Axis Axis(BlockState Block);
	}
	namespace CherryPlanks
	{
		constexpr BlockState CherryPlanks()
		{
			return 20;
		}
	}
	namespace CherryPressurePlate
	{
		constexpr BlockState CherryPressurePlate(const bool Powered)
		{
			if (Powered) return 5726;
			else return 5727;
		}
		BlockState CherryPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace CherrySapling
	{
		constexpr BlockState CherrySapling(const int Stage)
		{
			if (Stage == 0) return 35;
			else return 36;
		}
		BlockState CherrySapling();
		int Stage(BlockState Block);
	}
	namespace CherrySign
	{
		constexpr BlockState CherrySign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4430;
				else return 4431;
			else if (Rotation == 1)
				if (Waterlogged) return 4432;
				else return 4433;
			else if (Rotation == 2)
				if (Waterlogged) return 4434;
				else return 4435;
			else if (Rotation == 3)
				if (Waterlogged) return 4436;
				else return 4437;
			else if (Rotation == 4)
				if (Waterlogged) return 4438;
				else return 4439;
			else if (Rotation == 5)
				if (Waterlogged) return 4440;
				else return 4441;
			else if (Rotation == 6)
				if (Waterlogged) return 4442;
				else return 4443;
			else if (Rotation == 7)
				if (Waterlogged) return 4444;
				else return 4445;
			else if (Rotation == 8)
				if (Waterlogged) return 4446;
				else return 4447;
			else if (Rotation == 9)
				if (Waterlogged) return 4448;
				else return 4449;
			else if (Rotation == 10)
				if (Waterlogged) return 4450;
				else return 4451;
			else if (Rotation == 11)
				if (Waterlogged) return 4452;
				else return 4453;
			else if (Rotation == 12)
				if (Waterlogged) return 4454;
				else return 4455;
			else if (Rotation == 13)
				if (Waterlogged) return 4456;
				else return 4457;
			else if (Rotation == 14)
				if (Waterlogged) return 4458;
				else return 4459;
			else
				if (Waterlogged) return 4460;
				else return 4461;
		}
		BlockState CherrySign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherrySlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CherrySlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11192;
				else return 11193;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11194;
				else return 11195;
			else
				if (Waterlogged) return 11196;
				else return 11197;
		}
		BlockState CherrySlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CherryStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9964;
						else return 9965;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9966;
						else return 9967;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9968;
						else return 9969;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9970;
						else return 9971;
					else
						if (Waterlogged) return 9972;
						else return 9973;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9974;
						else return 9975;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9976;
						else return 9977;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9978;
						else return 9979;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9980;
						else return 9981;
					else
						if (Waterlogged) return 9982;
						else return 9983;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9984;
						else return 9985;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9986;
						else return 9987;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9988;
						else return 9989;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9990;
						else return 9991;
					else
						if (Waterlogged) return 9992;
						else return 9993;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9994;
						else return 9995;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9996;
						else return 9997;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9998;
						else return 9999;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10000;
						else return 10001;
					else
						if (Waterlogged) return 10002;
						else return 10003;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10004;
						else return 10005;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10006;
						else return 10007;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10008;
						else return 10009;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10010;
						else return 10011;
					else
						if (Waterlogged) return 10012;
						else return 10013;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10014;
						else return 10015;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10016;
						else return 10017;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10018;
						else return 10019;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10020;
						else return 10021;
					else
						if (Waterlogged) return 10022;
						else return 10023;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10024;
						else return 10025;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10026;
						else return 10027;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10028;
						else return 10029;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10030;
						else return 10031;
					else
						if (Waterlogged) return 10032;
						else return 10033;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10034;
						else return 10035;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10036;
						else return 10037;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10038;
						else return 10039;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10040;
						else return 10041;
					else
						if (Waterlogged) return 10042;
						else return 10043;
		}
		BlockState CherryStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CherryTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6281;
							else return 6282;
						else
							if (Waterlogged) return 6283;
							else return 6284;
					else
						if (Powered)
							if (Waterlogged) return 6285;
							else return 6286;
						else
							if (Waterlogged) return 6287;
							else return 6288;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6289;
							else return 6290;
						else
							if (Waterlogged) return 6291;
							else return 6292;
					else
						if (Powered)
							if (Waterlogged) return 6293;
							else return 6294;
						else
							if (Waterlogged) return 6295;
							else return 6296;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6297;
							else return 6298;
						else
							if (Waterlogged) return 6299;
							else return 6300;
					else
						if (Powered)
							if (Waterlogged) return 6301;
							else return 6302;
						else
							if (Waterlogged) return 6303;
							else return 6304;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6305;
							else return 6306;
						else
							if (Waterlogged) return 6307;
							else return 6308;
					else
						if (Powered)
							if (Waterlogged) return 6309;
							else return 6310;
						else
							if (Waterlogged) return 6311;
							else return 6312;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6313;
							else return 6314;
						else
							if (Waterlogged) return 6315;
							else return 6316;
					else
						if (Powered)
							if (Waterlogged) return 6317;
							else return 6318;
						else
							if (Waterlogged) return 6319;
							else return 6320;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6321;
							else return 6322;
						else
							if (Waterlogged) return 6323;
							else return 6324;
					else
						if (Powered)
							if (Waterlogged) return 6325;
							else return 6326;
						else
							if (Waterlogged) return 6327;
							else return 6328;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6329;
							else return 6330;
						else
							if (Waterlogged) return 6331;
							else return 6332;
					else
						if (Powered)
							if (Waterlogged) return 6333;
							else return 6334;
						else
							if (Waterlogged) return 6335;
							else return 6336;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6337;
							else return 6338;
						else
							if (Waterlogged) return 6339;
							else return 6340;
					else
						if (Powered)
							if (Waterlogged) return 6341;
							else return 6342;
						else
							if (Waterlogged) return 6343;
							else return 6344;
		}
		BlockState CherryTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWallHangingSign
	{
		constexpr BlockState CherryWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5570;
				else return 5571;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5572;
				else return 5573;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5574;
				else return 5575;
			else
				if (Waterlogged) return 5576;
				else return 5577;
		}
		BlockState CherryWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWallSign
	{
		constexpr BlockState CherryWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4794;
				else return 4795;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4796;
				else return 4797;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4798;
				else return 4799;
			else
				if (Waterlogged) return 4800;
				else return 4801;
		}
		BlockState CherryWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CherryWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CherryWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 204;
			else if (Axis == Axis::Y) return 205;
			else return 206;
		}
		BlockState CherryWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Chest
	{
		enum class Type
		{
			Single,
			Left,
			Right,
		};
		constexpr BlockState Chest(const eBlockFace Facing, const enum Type Type, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Single)
					if (Waterlogged) return 2954;
					else return 2955;
				else if (Type == Type::Left)
					if (Waterlogged) return 2956;
					else return 2957;
				else
					if (Waterlogged) return 2958;
					else return 2959;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Single)
					if (Waterlogged) return 2960;
					else return 2961;
				else if (Type == Type::Left)
					if (Waterlogged) return 2962;
					else return 2963;
				else
					if (Waterlogged) return 2964;
					else return 2965;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Single)
					if (Waterlogged) return 2966;
					else return 2967;
				else if (Type == Type::Left)
					if (Waterlogged) return 2968;
					else return 2969;
				else
					if (Waterlogged) return 2970;
					else return 2971;
			else
				if (Type == Type::Single)
					if (Waterlogged) return 2972;
					else return 2973;
				else if (Type == Type::Left)
					if (Waterlogged) return 2974;
					else return 2975;
				else
					if (Waterlogged) return 2976;
					else return 2977;
		}
		BlockState Chest();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ChippedAnvil
	{
		constexpr BlockState ChippedAnvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9111;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9112;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9113;
			else return 9114;
		}
		BlockState ChippedAnvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace ChiseledBookshelf
	{
		constexpr BlockState ChiseledBookshelf(const eBlockFace Facing, const bool Slot0Occupied, const bool Slot1Occupied, const bool Slot2Occupied, const bool Slot3Occupied, const bool Slot4Occupied, const bool Slot5Occupied)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2097;
									else return 2098;
								else
									if (Slot5Occupied) return 2099;
									else return 2100;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2101;
									else return 2102;
								else
									if (Slot5Occupied) return 2103;
									else return 2104;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2105;
									else return 2106;
								else
									if (Slot5Occupied) return 2107;
									else return 2108;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2109;
									else return 2110;
								else
									if (Slot5Occupied) return 2111;
									else return 2112;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2113;
									else return 2114;
								else
									if (Slot5Occupied) return 2115;
									else return 2116;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2117;
									else return 2118;
								else
									if (Slot5Occupied) return 2119;
									else return 2120;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2121;
									else return 2122;
								else
									if (Slot5Occupied) return 2123;
									else return 2124;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2125;
									else return 2126;
								else
									if (Slot5Occupied) return 2127;
									else return 2128;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2129;
									else return 2130;
								else
									if (Slot5Occupied) return 2131;
									else return 2132;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2133;
									else return 2134;
								else
									if (Slot5Occupied) return 2135;
									else return 2136;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2137;
									else return 2138;
								else
									if (Slot5Occupied) return 2139;
									else return 2140;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2141;
									else return 2142;
								else
									if (Slot5Occupied) return 2143;
									else return 2144;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2145;
									else return 2146;
								else
									if (Slot5Occupied) return 2147;
									else return 2148;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2149;
									else return 2150;
								else
									if (Slot5Occupied) return 2151;
									else return 2152;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2153;
									else return 2154;
								else
									if (Slot5Occupied) return 2155;
									else return 2156;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2157;
									else return 2158;
								else
									if (Slot5Occupied) return 2159;
									else return 2160;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2161;
									else return 2162;
								else
									if (Slot5Occupied) return 2163;
									else return 2164;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2165;
									else return 2166;
								else
									if (Slot5Occupied) return 2167;
									else return 2168;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2169;
									else return 2170;
								else
									if (Slot5Occupied) return 2171;
									else return 2172;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2173;
									else return 2174;
								else
									if (Slot5Occupied) return 2175;
									else return 2176;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2177;
									else return 2178;
								else
									if (Slot5Occupied) return 2179;
									else return 2180;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2181;
									else return 2182;
								else
									if (Slot5Occupied) return 2183;
									else return 2184;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2185;
									else return 2186;
								else
									if (Slot5Occupied) return 2187;
									else return 2188;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2189;
									else return 2190;
								else
									if (Slot5Occupied) return 2191;
									else return 2192;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2193;
									else return 2194;
								else
									if (Slot5Occupied) return 2195;
									else return 2196;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2197;
									else return 2198;
								else
									if (Slot5Occupied) return 2199;
									else return 2200;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2201;
									else return 2202;
								else
									if (Slot5Occupied) return 2203;
									else return 2204;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2205;
									else return 2206;
								else
									if (Slot5Occupied) return 2207;
									else return 2208;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2209;
									else return 2210;
								else
									if (Slot5Occupied) return 2211;
									else return 2212;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2213;
									else return 2214;
								else
									if (Slot5Occupied) return 2215;
									else return 2216;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2217;
									else return 2218;
								else
									if (Slot5Occupied) return 2219;
									else return 2220;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2221;
									else return 2222;
								else
									if (Slot5Occupied) return 2223;
									else return 2224;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2225;
									else return 2226;
								else
									if (Slot5Occupied) return 2227;
									else return 2228;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2229;
									else return 2230;
								else
									if (Slot5Occupied) return 2231;
									else return 2232;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2233;
									else return 2234;
								else
									if (Slot5Occupied) return 2235;
									else return 2236;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2237;
									else return 2238;
								else
									if (Slot5Occupied) return 2239;
									else return 2240;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2241;
									else return 2242;
								else
									if (Slot5Occupied) return 2243;
									else return 2244;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2245;
									else return 2246;
								else
									if (Slot5Occupied) return 2247;
									else return 2248;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2249;
									else return 2250;
								else
									if (Slot5Occupied) return 2251;
									else return 2252;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2253;
									else return 2254;
								else
									if (Slot5Occupied) return 2255;
									else return 2256;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2257;
									else return 2258;
								else
									if (Slot5Occupied) return 2259;
									else return 2260;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2261;
									else return 2262;
								else
									if (Slot5Occupied) return 2263;
									else return 2264;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2265;
									else return 2266;
								else
									if (Slot5Occupied) return 2267;
									else return 2268;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2269;
									else return 2270;
								else
									if (Slot5Occupied) return 2271;
									else return 2272;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2273;
									else return 2274;
								else
									if (Slot5Occupied) return 2275;
									else return 2276;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2277;
									else return 2278;
								else
									if (Slot5Occupied) return 2279;
									else return 2280;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2281;
									else return 2282;
								else
									if (Slot5Occupied) return 2283;
									else return 2284;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2285;
									else return 2286;
								else
									if (Slot5Occupied) return 2287;
									else return 2288;
			else
				if (Slot0Occupied)
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2289;
									else return 2290;
								else
									if (Slot5Occupied) return 2291;
									else return 2292;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2293;
									else return 2294;
								else
									if (Slot5Occupied) return 2295;
									else return 2296;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2297;
									else return 2298;
								else
									if (Slot5Occupied) return 2299;
									else return 2300;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2301;
									else return 2302;
								else
									if (Slot5Occupied) return 2303;
									else return 2304;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2305;
									else return 2306;
								else
									if (Slot5Occupied) return 2307;
									else return 2308;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2309;
									else return 2310;
								else
									if (Slot5Occupied) return 2311;
									else return 2312;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2313;
									else return 2314;
								else
									if (Slot5Occupied) return 2315;
									else return 2316;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2317;
									else return 2318;
								else
									if (Slot5Occupied) return 2319;
									else return 2320;
				else
					if (Slot1Occupied)
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2321;
									else return 2322;
								else
									if (Slot5Occupied) return 2323;
									else return 2324;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2325;
									else return 2326;
								else
									if (Slot5Occupied) return 2327;
									else return 2328;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2329;
									else return 2330;
								else
									if (Slot5Occupied) return 2331;
									else return 2332;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2333;
									else return 2334;
								else
									if (Slot5Occupied) return 2335;
									else return 2336;
					else
						if (Slot2Occupied)
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2337;
									else return 2338;
								else
									if (Slot5Occupied) return 2339;
									else return 2340;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2341;
									else return 2342;
								else
									if (Slot5Occupied) return 2343;
									else return 2344;
						else
							if (Slot3Occupied)
								if (Slot4Occupied)
									if (Slot5Occupied) return 2345;
									else return 2346;
								else
									if (Slot5Occupied) return 2347;
									else return 2348;
							else
								if (Slot4Occupied)
									if (Slot5Occupied) return 2349;
									else return 2350;
								else
									if (Slot5Occupied) return 2351;
									else return 2352;
		}
		BlockState ChiseledBookshelf();
		eBlockFace Facing(BlockState Block);
		bool Slot0Occupied(BlockState Block);
		bool Slot1Occupied(BlockState Block);
		bool Slot2Occupied(BlockState Block);
		bool Slot3Occupied(BlockState Block);
		bool Slot4Occupied(BlockState Block);
		bool Slot5Occupied(BlockState Block);
	}
	namespace ChiseledCopper
	{
		constexpr BlockState ChiseledCopper()
		{
			return 22951;
		}
	}
	namespace ChiseledDeepslate
	{
		constexpr BlockState ChiseledDeepslate()
		{
			return 26551;
		}
	}
	namespace ChiseledNetherBricks
	{
		constexpr BlockState ChiseledNetherBricks()
		{
			return 20722;
		}
	}
	namespace ChiseledPolishedBlackstone
	{
		constexpr BlockState ChiseledPolishedBlackstone()
		{
			return 19874;
		}
	}
	namespace ChiseledQuartzBlock
	{
		constexpr BlockState ChiseledQuartzBlock()
		{
			return 9236;
		}
	}
	namespace ChiseledRedSandstone
	{
		constexpr BlockState ChiseledRedSandstone()
		{
			return 11080;
		}
	}
	namespace ChiseledSandstone
	{
		constexpr BlockState ChiseledSandstone()
		{
			return 536;
		}
	}
	namespace ChiseledStoneBricks
	{
		constexpr BlockState ChiseledStoneBricks()
		{
			return 6540;
		}
	}
	namespace ChiseledTuff
	{
		constexpr BlockState ChiseledTuff()
		{
			return 21903;
		}
	}
	namespace ChiseledTuffBricks
	{
		constexpr BlockState ChiseledTuffBricks()
		{
			return 22315;
		}
	}
	namespace ChorusFlower
	{
		constexpr BlockState ChorusFlower(const int Age)
		{
			if (Age == 0) return 12404;
			else if (Age == 1) return 12405;
			else if (Age == 2) return 12406;
			else if (Age == 3) return 12407;
			else if (Age == 4) return 12408;
			else return 12409;
		}
		BlockState ChorusFlower();
		int Age(BlockState Block);
	}
	namespace ChorusPlant
	{
		constexpr BlockState ChorusPlant(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 12340;
								else return 12341;
							else
								if (West) return 12342;
								else return 12343;
						else
							if (Up)
								if (West) return 12344;
								else return 12345;
							else
								if (West) return 12346;
								else return 12347;
					else
						if (South)
							if (Up)
								if (West) return 12348;
								else return 12349;
							else
								if (West) return 12350;
								else return 12351;
						else
							if (Up)
								if (West) return 12352;
								else return 12353;
							else
								if (West) return 12354;
								else return 12355;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 12356;
								else return 12357;
							else
								if (West) return 12358;
								else return 12359;
						else
							if (Up)
								if (West) return 12360;
								else return 12361;
							else
								if (West) return 12362;
								else return 12363;
					else
						if (South)
							if (Up)
								if (West) return 12364;
								else return 12365;
							else
								if (West) return 12366;
								else return 12367;
						else
							if (Up)
								if (West) return 12368;
								else return 12369;
							else
								if (West) return 12370;
								else return 12371;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 12372;
								else return 12373;
							else
								if (West) return 12374;
								else return 12375;
						else
							if (Up)
								if (West) return 12376;
								else return 12377;
							else
								if (West) return 12378;
								else return 12379;
					else
						if (South)
							if (Up)
								if (West) return 12380;
								else return 12381;
							else
								if (West) return 12382;
								else return 12383;
						else
							if (Up)
								if (West) return 12384;
								else return 12385;
							else
								if (West) return 12386;
								else return 12387;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 12388;
								else return 12389;
							else
								if (West) return 12390;
								else return 12391;
						else
							if (Up)
								if (West) return 12392;
								else return 12393;
							else
								if (West) return 12394;
								else return 12395;
					else
						if (South)
							if (Up)
								if (West) return 12396;
								else return 12397;
							else
								if (West) return 12398;
								else return 12399;
						else
							if (Up)
								if (West) return 12400;
								else return 12401;
							else
								if (West) return 12402;
								else return 12403;
		}
		BlockState ChorusPlant();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Clay
	{
		constexpr BlockState Clay()
		{
			return 5798;
		}
	}
	namespace CoalBlock
	{
		constexpr BlockState CoalBlock()
		{
			return 10745;
		}
	}
	namespace CoalOre
	{
		constexpr BlockState CoalOre()
		{
			return 127;
		}
	}
	namespace CoarseDirt
	{
		constexpr BlockState CoarseDirt()
		{
			return 11;
		}
	}
	namespace CobbledDeepslate
	{
		constexpr BlockState CobbledDeepslate()
		{
			return 24907;
		}
	}
	namespace CobbledDeepslateSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CobbledDeepslateSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 24988;
				else return 24989;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 24990;
				else return 24991;
			else
				if (Waterlogged) return 24992;
				else return 24993;
		}
		BlockState CobbledDeepslateSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobbledDeepslateStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CobbledDeepslateStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24908;
						else return 24909;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24910;
						else return 24911;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24912;
						else return 24913;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24914;
						else return 24915;
					else
						if (Waterlogged) return 24916;
						else return 24917;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24918;
						else return 24919;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24920;
						else return 24921;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24922;
						else return 24923;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24924;
						else return 24925;
					else
						if (Waterlogged) return 24926;
						else return 24927;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24928;
						else return 24929;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24930;
						else return 24931;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24932;
						else return 24933;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24934;
						else return 24935;
					else
						if (Waterlogged) return 24936;
						else return 24937;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24938;
						else return 24939;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24940;
						else return 24941;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24942;
						else return 24943;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24944;
						else return 24945;
					else
						if (Waterlogged) return 24946;
						else return 24947;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24948;
						else return 24949;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24950;
						else return 24951;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24952;
						else return 24953;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24954;
						else return 24955;
					else
						if (Waterlogged) return 24956;
						else return 24957;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24958;
						else return 24959;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24960;
						else return 24961;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24962;
						else return 24963;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24964;
						else return 24965;
					else
						if (Waterlogged) return 24966;
						else return 24967;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24968;
						else return 24969;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24970;
						else return 24971;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24972;
						else return 24973;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24974;
						else return 24975;
					else
						if (Waterlogged) return 24976;
						else return 24977;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 24978;
						else return 24979;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 24980;
						else return 24981;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 24982;
						else return 24983;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 24984;
						else return 24985;
					else
						if (Waterlogged) return 24986;
						else return 24987;
		}
		BlockState CobbledDeepslateStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobbledDeepslateWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState CobbledDeepslateWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 24994;
								else if (West == West::Low) return 24995;
								else return 24996;
							else
								if (West == West::None) return 24997;
								else if (West == West::Low) return 24998;
								else return 24999;
						else
							if (Waterlogged)
								if (West == West::None) return 25000;
								else if (West == West::Low) return 25001;
								else return 25002;
							else
								if (West == West::None) return 25003;
								else if (West == West::Low) return 25004;
								else return 25005;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25006;
								else if (West == West::Low) return 25007;
								else return 25008;
							else
								if (West == West::None) return 25009;
								else if (West == West::Low) return 25010;
								else return 25011;
						else
							if (Waterlogged)
								if (West == West::None) return 25012;
								else if (West == West::Low) return 25013;
								else return 25014;
							else
								if (West == West::None) return 25015;
								else if (West == West::Low) return 25016;
								else return 25017;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25018;
								else if (West == West::Low) return 25019;
								else return 25020;
							else
								if (West == West::None) return 25021;
								else if (West == West::Low) return 25022;
								else return 25023;
						else
							if (Waterlogged)
								if (West == West::None) return 25024;
								else if (West == West::Low) return 25025;
								else return 25026;
							else
								if (West == West::None) return 25027;
								else if (West == West::Low) return 25028;
								else return 25029;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25030;
								else if (West == West::Low) return 25031;
								else return 25032;
							else
								if (West == West::None) return 25033;
								else if (West == West::Low) return 25034;
								else return 25035;
						else
							if (Waterlogged)
								if (West == West::None) return 25036;
								else if (West == West::Low) return 25037;
								else return 25038;
							else
								if (West == West::None) return 25039;
								else if (West == West::Low) return 25040;
								else return 25041;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25042;
								else if (West == West::Low) return 25043;
								else return 25044;
							else
								if (West == West::None) return 25045;
								else if (West == West::Low) return 25046;
								else return 25047;
						else
							if (Waterlogged)
								if (West == West::None) return 25048;
								else if (West == West::Low) return 25049;
								else return 25050;
							else
								if (West == West::None) return 25051;
								else if (West == West::Low) return 25052;
								else return 25053;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25054;
								else if (West == West::Low) return 25055;
								else return 25056;
							else
								if (West == West::None) return 25057;
								else if (West == West::Low) return 25058;
								else return 25059;
						else
							if (Waterlogged)
								if (West == West::None) return 25060;
								else if (West == West::Low) return 25061;
								else return 25062;
							else
								if (West == West::None) return 25063;
								else if (West == West::Low) return 25064;
								else return 25065;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25066;
								else if (West == West::Low) return 25067;
								else return 25068;
							else
								if (West == West::None) return 25069;
								else if (West == West::Low) return 25070;
								else return 25071;
						else
							if (Waterlogged)
								if (West == West::None) return 25072;
								else if (West == West::Low) return 25073;
								else return 25074;
							else
								if (West == West::None) return 25075;
								else if (West == West::Low) return 25076;
								else return 25077;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25078;
								else if (West == West::Low) return 25079;
								else return 25080;
							else
								if (West == West::None) return 25081;
								else if (West == West::Low) return 25082;
								else return 25083;
						else
							if (Waterlogged)
								if (West == West::None) return 25084;
								else if (West == West::Low) return 25085;
								else return 25086;
							else
								if (West == West::None) return 25087;
								else if (West == West::Low) return 25088;
								else return 25089;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25090;
								else if (West == West::Low) return 25091;
								else return 25092;
							else
								if (West == West::None) return 25093;
								else if (West == West::Low) return 25094;
								else return 25095;
						else
							if (Waterlogged)
								if (West == West::None) return 25096;
								else if (West == West::Low) return 25097;
								else return 25098;
							else
								if (West == West::None) return 25099;
								else if (West == West::Low) return 25100;
								else return 25101;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25102;
								else if (West == West::Low) return 25103;
								else return 25104;
							else
								if (West == West::None) return 25105;
								else if (West == West::Low) return 25106;
								else return 25107;
						else
							if (Waterlogged)
								if (West == West::None) return 25108;
								else if (West == West::Low) return 25109;
								else return 25110;
							else
								if (West == West::None) return 25111;
								else if (West == West::Low) return 25112;
								else return 25113;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25114;
								else if (West == West::Low) return 25115;
								else return 25116;
							else
								if (West == West::None) return 25117;
								else if (West == West::Low) return 25118;
								else return 25119;
						else
							if (Waterlogged)
								if (West == West::None) return 25120;
								else if (West == West::Low) return 25121;
								else return 25122;
							else
								if (West == West::None) return 25123;
								else if (West == West::Low) return 25124;
								else return 25125;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25126;
								else if (West == West::Low) return 25127;
								else return 25128;
							else
								if (West == West::None) return 25129;
								else if (West == West::Low) return 25130;
								else return 25131;
						else
							if (Waterlogged)
								if (West == West::None) return 25132;
								else if (West == West::Low) return 25133;
								else return 25134;
							else
								if (West == West::None) return 25135;
								else if (West == West::Low) return 25136;
								else return 25137;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25138;
								else if (West == West::Low) return 25139;
								else return 25140;
							else
								if (West == West::None) return 25141;
								else if (West == West::Low) return 25142;
								else return 25143;
						else
							if (Waterlogged)
								if (West == West::None) return 25144;
								else if (West == West::Low) return 25145;
								else return 25146;
							else
								if (West == West::None) return 25147;
								else if (West == West::Low) return 25148;
								else return 25149;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25150;
								else if (West == West::Low) return 25151;
								else return 25152;
							else
								if (West == West::None) return 25153;
								else if (West == West::Low) return 25154;
								else return 25155;
						else
							if (Waterlogged)
								if (West == West::None) return 25156;
								else if (West == West::Low) return 25157;
								else return 25158;
							else
								if (West == West::None) return 25159;
								else if (West == West::Low) return 25160;
								else return 25161;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25162;
								else if (West == West::Low) return 25163;
								else return 25164;
							else
								if (West == West::None) return 25165;
								else if (West == West::Low) return 25166;
								else return 25167;
						else
							if (Waterlogged)
								if (West == West::None) return 25168;
								else if (West == West::Low) return 25169;
								else return 25170;
							else
								if (West == West::None) return 25171;
								else if (West == West::Low) return 25172;
								else return 25173;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25174;
								else if (West == West::Low) return 25175;
								else return 25176;
							else
								if (West == West::None) return 25177;
								else if (West == West::Low) return 25178;
								else return 25179;
						else
							if (Waterlogged)
								if (West == West::None) return 25180;
								else if (West == West::Low) return 25181;
								else return 25182;
							else
								if (West == West::None) return 25183;
								else if (West == West::Low) return 25184;
								else return 25185;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25186;
								else if (West == West::Low) return 25187;
								else return 25188;
							else
								if (West == West::None) return 25189;
								else if (West == West::Low) return 25190;
								else return 25191;
						else
							if (Waterlogged)
								if (West == West::None) return 25192;
								else if (West == West::Low) return 25193;
								else return 25194;
							else
								if (West == West::None) return 25195;
								else if (West == West::Low) return 25196;
								else return 25197;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25198;
								else if (West == West::Low) return 25199;
								else return 25200;
							else
								if (West == West::None) return 25201;
								else if (West == West::Low) return 25202;
								else return 25203;
						else
							if (Waterlogged)
								if (West == West::None) return 25204;
								else if (West == West::Low) return 25205;
								else return 25206;
							else
								if (West == West::None) return 25207;
								else if (West == West::Low) return 25208;
								else return 25209;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25210;
								else if (West == West::Low) return 25211;
								else return 25212;
							else
								if (West == West::None) return 25213;
								else if (West == West::Low) return 25214;
								else return 25215;
						else
							if (Waterlogged)
								if (West == West::None) return 25216;
								else if (West == West::Low) return 25217;
								else return 25218;
							else
								if (West == West::None) return 25219;
								else if (West == West::Low) return 25220;
								else return 25221;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25222;
								else if (West == West::Low) return 25223;
								else return 25224;
							else
								if (West == West::None) return 25225;
								else if (West == West::Low) return 25226;
								else return 25227;
						else
							if (Waterlogged)
								if (West == West::None) return 25228;
								else if (West == West::Low) return 25229;
								else return 25230;
							else
								if (West == West::None) return 25231;
								else if (West == West::Low) return 25232;
								else return 25233;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25234;
								else if (West == West::Low) return 25235;
								else return 25236;
							else
								if (West == West::None) return 25237;
								else if (West == West::Low) return 25238;
								else return 25239;
						else
							if (Waterlogged)
								if (West == West::None) return 25240;
								else if (West == West::Low) return 25241;
								else return 25242;
							else
								if (West == West::None) return 25243;
								else if (West == West::Low) return 25244;
								else return 25245;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25246;
								else if (West == West::Low) return 25247;
								else return 25248;
							else
								if (West == West::None) return 25249;
								else if (West == West::Low) return 25250;
								else return 25251;
						else
							if (Waterlogged)
								if (West == West::None) return 25252;
								else if (West == West::Low) return 25253;
								else return 25254;
							else
								if (West == West::None) return 25255;
								else if (West == West::Low) return 25256;
								else return 25257;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25258;
								else if (West == West::Low) return 25259;
								else return 25260;
							else
								if (West == West::None) return 25261;
								else if (West == West::Low) return 25262;
								else return 25263;
						else
							if (Waterlogged)
								if (West == West::None) return 25264;
								else if (West == West::Low) return 25265;
								else return 25266;
							else
								if (West == West::None) return 25267;
								else if (West == West::Low) return 25268;
								else return 25269;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25270;
								else if (West == West::Low) return 25271;
								else return 25272;
							else
								if (West == West::None) return 25273;
								else if (West == West::Low) return 25274;
								else return 25275;
						else
							if (Waterlogged)
								if (West == West::None) return 25276;
								else if (West == West::Low) return 25277;
								else return 25278;
							else
								if (West == West::None) return 25279;
								else if (West == West::Low) return 25280;
								else return 25281;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25282;
								else if (West == West::Low) return 25283;
								else return 25284;
							else
								if (West == West::None) return 25285;
								else if (West == West::Low) return 25286;
								else return 25287;
						else
							if (Waterlogged)
								if (West == West::None) return 25288;
								else if (West == West::Low) return 25289;
								else return 25290;
							else
								if (West == West::None) return 25291;
								else if (West == West::Low) return 25292;
								else return 25293;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25294;
								else if (West == West::Low) return 25295;
								else return 25296;
							else
								if (West == West::None) return 25297;
								else if (West == West::Low) return 25298;
								else return 25299;
						else
							if (Waterlogged)
								if (West == West::None) return 25300;
								else if (West == West::Low) return 25301;
								else return 25302;
							else
								if (West == West::None) return 25303;
								else if (West == West::Low) return 25304;
								else return 25305;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25306;
								else if (West == West::Low) return 25307;
								else return 25308;
							else
								if (West == West::None) return 25309;
								else if (West == West::Low) return 25310;
								else return 25311;
						else
							if (Waterlogged)
								if (West == West::None) return 25312;
								else if (West == West::Low) return 25313;
								else return 25314;
							else
								if (West == West::None) return 25315;
								else if (West == West::Low) return 25316;
								else return 25317;
		}
		BlockState CobbledDeepslateWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Cobblestone
	{
		constexpr BlockState Cobblestone()
		{
			return 14;
		}
	}
	namespace CobblestoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CobblestoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11252;
				else return 11253;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11254;
				else return 11255;
			else
				if (Waterlogged) return 11256;
				else return 11257;
		}
		BlockState CobblestoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobblestoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CobblestoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4682;
						else return 4683;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4684;
						else return 4685;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4686;
						else return 4687;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4688;
						else return 4689;
					else
						if (Waterlogged) return 4690;
						else return 4691;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4692;
						else return 4693;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4694;
						else return 4695;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4696;
						else return 4697;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4698;
						else return 4699;
					else
						if (Waterlogged) return 4700;
						else return 4701;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4702;
						else return 4703;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4704;
						else return 4705;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4706;
						else return 4707;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4708;
						else return 4709;
					else
						if (Waterlogged) return 4710;
						else return 4711;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4712;
						else return 4713;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4714;
						else return 4715;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4716;
						else return 4717;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4718;
						else return 4719;
					else
						if (Waterlogged) return 4720;
						else return 4721;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4722;
						else return 4723;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4724;
						else return 4725;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4726;
						else return 4727;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4728;
						else return 4729;
					else
						if (Waterlogged) return 4730;
						else return 4731;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4732;
						else return 4733;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4734;
						else return 4735;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4736;
						else return 4737;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4738;
						else return 4739;
					else
						if (Waterlogged) return 4740;
						else return 4741;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4742;
						else return 4743;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4744;
						else return 4745;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4746;
						else return 4747;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4748;
						else return 4749;
					else
						if (Waterlogged) return 4750;
						else return 4751;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 4752;
						else return 4753;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 4754;
						else return 4755;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 4756;
						else return 4757;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 4758;
						else return 4759;
					else
						if (Waterlogged) return 4760;
						else return 4761;
		}
		BlockState CobblestoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CobblestoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState CobblestoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7919;
								else if (West == West::Low) return 7920;
								else return 7921;
							else
								if (West == West::None) return 7922;
								else if (West == West::Low) return 7923;
								else return 7924;
						else
							if (Waterlogged)
								if (West == West::None) return 7925;
								else if (West == West::Low) return 7926;
								else return 7927;
							else
								if (West == West::None) return 7928;
								else if (West == West::Low) return 7929;
								else return 7930;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7931;
								else if (West == West::Low) return 7932;
								else return 7933;
							else
								if (West == West::None) return 7934;
								else if (West == West::Low) return 7935;
								else return 7936;
						else
							if (Waterlogged)
								if (West == West::None) return 7937;
								else if (West == West::Low) return 7938;
								else return 7939;
							else
								if (West == West::None) return 7940;
								else if (West == West::Low) return 7941;
								else return 7942;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7943;
								else if (West == West::Low) return 7944;
								else return 7945;
							else
								if (West == West::None) return 7946;
								else if (West == West::Low) return 7947;
								else return 7948;
						else
							if (Waterlogged)
								if (West == West::None) return 7949;
								else if (West == West::Low) return 7950;
								else return 7951;
							else
								if (West == West::None) return 7952;
								else if (West == West::Low) return 7953;
								else return 7954;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7955;
								else if (West == West::Low) return 7956;
								else return 7957;
							else
								if (West == West::None) return 7958;
								else if (West == West::Low) return 7959;
								else return 7960;
						else
							if (Waterlogged)
								if (West == West::None) return 7961;
								else if (West == West::Low) return 7962;
								else return 7963;
							else
								if (West == West::None) return 7964;
								else if (West == West::Low) return 7965;
								else return 7966;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7967;
								else if (West == West::Low) return 7968;
								else return 7969;
							else
								if (West == West::None) return 7970;
								else if (West == West::Low) return 7971;
								else return 7972;
						else
							if (Waterlogged)
								if (West == West::None) return 7973;
								else if (West == West::Low) return 7974;
								else return 7975;
							else
								if (West == West::None) return 7976;
								else if (West == West::Low) return 7977;
								else return 7978;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7979;
								else if (West == West::Low) return 7980;
								else return 7981;
							else
								if (West == West::None) return 7982;
								else if (West == West::Low) return 7983;
								else return 7984;
						else
							if (Waterlogged)
								if (West == West::None) return 7985;
								else if (West == West::Low) return 7986;
								else return 7987;
							else
								if (West == West::None) return 7988;
								else if (West == West::Low) return 7989;
								else return 7990;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 7991;
								else if (West == West::Low) return 7992;
								else return 7993;
							else
								if (West == West::None) return 7994;
								else if (West == West::Low) return 7995;
								else return 7996;
						else
							if (Waterlogged)
								if (West == West::None) return 7997;
								else if (West == West::Low) return 7998;
								else return 7999;
							else
								if (West == West::None) return 8000;
								else if (West == West::Low) return 8001;
								else return 8002;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8003;
								else if (West == West::Low) return 8004;
								else return 8005;
							else
								if (West == West::None) return 8006;
								else if (West == West::Low) return 8007;
								else return 8008;
						else
							if (Waterlogged)
								if (West == West::None) return 8009;
								else if (West == West::Low) return 8010;
								else return 8011;
							else
								if (West == West::None) return 8012;
								else if (West == West::Low) return 8013;
								else return 8014;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8015;
								else if (West == West::Low) return 8016;
								else return 8017;
							else
								if (West == West::None) return 8018;
								else if (West == West::Low) return 8019;
								else return 8020;
						else
							if (Waterlogged)
								if (West == West::None) return 8021;
								else if (West == West::Low) return 8022;
								else return 8023;
							else
								if (West == West::None) return 8024;
								else if (West == West::Low) return 8025;
								else return 8026;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8027;
								else if (West == West::Low) return 8028;
								else return 8029;
							else
								if (West == West::None) return 8030;
								else if (West == West::Low) return 8031;
								else return 8032;
						else
							if (Waterlogged)
								if (West == West::None) return 8033;
								else if (West == West::Low) return 8034;
								else return 8035;
							else
								if (West == West::None) return 8036;
								else if (West == West::Low) return 8037;
								else return 8038;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8039;
								else if (West == West::Low) return 8040;
								else return 8041;
							else
								if (West == West::None) return 8042;
								else if (West == West::Low) return 8043;
								else return 8044;
						else
							if (Waterlogged)
								if (West == West::None) return 8045;
								else if (West == West::Low) return 8046;
								else return 8047;
							else
								if (West == West::None) return 8048;
								else if (West == West::Low) return 8049;
								else return 8050;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8051;
								else if (West == West::Low) return 8052;
								else return 8053;
							else
								if (West == West::None) return 8054;
								else if (West == West::Low) return 8055;
								else return 8056;
						else
							if (Waterlogged)
								if (West == West::None) return 8057;
								else if (West == West::Low) return 8058;
								else return 8059;
							else
								if (West == West::None) return 8060;
								else if (West == West::Low) return 8061;
								else return 8062;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8063;
								else if (West == West::Low) return 8064;
								else return 8065;
							else
								if (West == West::None) return 8066;
								else if (West == West::Low) return 8067;
								else return 8068;
						else
							if (Waterlogged)
								if (West == West::None) return 8069;
								else if (West == West::Low) return 8070;
								else return 8071;
							else
								if (West == West::None) return 8072;
								else if (West == West::Low) return 8073;
								else return 8074;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8075;
								else if (West == West::Low) return 8076;
								else return 8077;
							else
								if (West == West::None) return 8078;
								else if (West == West::Low) return 8079;
								else return 8080;
						else
							if (Waterlogged)
								if (West == West::None) return 8081;
								else if (West == West::Low) return 8082;
								else return 8083;
							else
								if (West == West::None) return 8084;
								else if (West == West::Low) return 8085;
								else return 8086;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8087;
								else if (West == West::Low) return 8088;
								else return 8089;
							else
								if (West == West::None) return 8090;
								else if (West == West::Low) return 8091;
								else return 8092;
						else
							if (Waterlogged)
								if (West == West::None) return 8093;
								else if (West == West::Low) return 8094;
								else return 8095;
							else
								if (West == West::None) return 8096;
								else if (West == West::Low) return 8097;
								else return 8098;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8099;
								else if (West == West::Low) return 8100;
								else return 8101;
							else
								if (West == West::None) return 8102;
								else if (West == West::Low) return 8103;
								else return 8104;
						else
							if (Waterlogged)
								if (West == West::None) return 8105;
								else if (West == West::Low) return 8106;
								else return 8107;
							else
								if (West == West::None) return 8108;
								else if (West == West::Low) return 8109;
								else return 8110;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8111;
								else if (West == West::Low) return 8112;
								else return 8113;
							else
								if (West == West::None) return 8114;
								else if (West == West::Low) return 8115;
								else return 8116;
						else
							if (Waterlogged)
								if (West == West::None) return 8117;
								else if (West == West::Low) return 8118;
								else return 8119;
							else
								if (West == West::None) return 8120;
								else if (West == West::Low) return 8121;
								else return 8122;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8123;
								else if (West == West::Low) return 8124;
								else return 8125;
							else
								if (West == West::None) return 8126;
								else if (West == West::Low) return 8127;
								else return 8128;
						else
							if (Waterlogged)
								if (West == West::None) return 8129;
								else if (West == West::Low) return 8130;
								else return 8131;
							else
								if (West == West::None) return 8132;
								else if (West == West::Low) return 8133;
								else return 8134;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8135;
								else if (West == West::Low) return 8136;
								else return 8137;
							else
								if (West == West::None) return 8138;
								else if (West == West::Low) return 8139;
								else return 8140;
						else
							if (Waterlogged)
								if (West == West::None) return 8141;
								else if (West == West::Low) return 8142;
								else return 8143;
							else
								if (West == West::None) return 8144;
								else if (West == West::Low) return 8145;
								else return 8146;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8147;
								else if (West == West::Low) return 8148;
								else return 8149;
							else
								if (West == West::None) return 8150;
								else if (West == West::Low) return 8151;
								else return 8152;
						else
							if (Waterlogged)
								if (West == West::None) return 8153;
								else if (West == West::Low) return 8154;
								else return 8155;
							else
								if (West == West::None) return 8156;
								else if (West == West::Low) return 8157;
								else return 8158;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8159;
								else if (West == West::Low) return 8160;
								else return 8161;
							else
								if (West == West::None) return 8162;
								else if (West == West::Low) return 8163;
								else return 8164;
						else
							if (Waterlogged)
								if (West == West::None) return 8165;
								else if (West == West::Low) return 8166;
								else return 8167;
							else
								if (West == West::None) return 8168;
								else if (West == West::Low) return 8169;
								else return 8170;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8171;
								else if (West == West::Low) return 8172;
								else return 8173;
							else
								if (West == West::None) return 8174;
								else if (West == West::Low) return 8175;
								else return 8176;
						else
							if (Waterlogged)
								if (West == West::None) return 8177;
								else if (West == West::Low) return 8178;
								else return 8179;
							else
								if (West == West::None) return 8180;
								else if (West == West::Low) return 8181;
								else return 8182;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8183;
								else if (West == West::Low) return 8184;
								else return 8185;
							else
								if (West == West::None) return 8186;
								else if (West == West::Low) return 8187;
								else return 8188;
						else
							if (Waterlogged)
								if (West == West::None) return 8189;
								else if (West == West::Low) return 8190;
								else return 8191;
							else
								if (West == West::None) return 8192;
								else if (West == West::Low) return 8193;
								else return 8194;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8195;
								else if (West == West::Low) return 8196;
								else return 8197;
							else
								if (West == West::None) return 8198;
								else if (West == West::Low) return 8199;
								else return 8200;
						else
							if (Waterlogged)
								if (West == West::None) return 8201;
								else if (West == West::Low) return 8202;
								else return 8203;
							else
								if (West == West::None) return 8204;
								else if (West == West::Low) return 8205;
								else return 8206;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8207;
								else if (West == West::Low) return 8208;
								else return 8209;
							else
								if (West == West::None) return 8210;
								else if (West == West::Low) return 8211;
								else return 8212;
						else
							if (Waterlogged)
								if (West == West::None) return 8213;
								else if (West == West::Low) return 8214;
								else return 8215;
							else
								if (West == West::None) return 8216;
								else if (West == West::Low) return 8217;
								else return 8218;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8219;
								else if (West == West::Low) return 8220;
								else return 8221;
							else
								if (West == West::None) return 8222;
								else if (West == West::Low) return 8223;
								else return 8224;
						else
							if (Waterlogged)
								if (West == West::None) return 8225;
								else if (West == West::Low) return 8226;
								else return 8227;
							else
								if (West == West::None) return 8228;
								else if (West == West::Low) return 8229;
								else return 8230;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8231;
								else if (West == West::Low) return 8232;
								else return 8233;
							else
								if (West == West::None) return 8234;
								else if (West == West::Low) return 8235;
								else return 8236;
						else
							if (Waterlogged)
								if (West == West::None) return 8237;
								else if (West == West::Low) return 8238;
								else return 8239;
							else
								if (West == West::None) return 8240;
								else if (West == West::Low) return 8241;
								else return 8242;
		}
		BlockState CobblestoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Cobweb
	{
		constexpr BlockState Cobweb()
		{
			return 2004;
		}
	}
	namespace Cocoa
	{
		constexpr BlockState Cocoa(const int Age, const eBlockFace Facing)
		{
			if (Age == 0)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7419;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7420;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7421;
				else return 7422;
			else if (Age == 1)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7423;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7424;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7425;
				else return 7426;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7427;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7428;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7429;
				else return 7430;
		}
		BlockState Cocoa();
		int Age(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace CommandBlock
	{
		constexpr BlockState CommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7906;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7907;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7908;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 7909;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 7910;
				else return 7911;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7912;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7913;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7914;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 7915;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 7916;
				else return 7917;
		}
		BlockState CommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace Comparator
	{
		enum class Mode
		{
			Compare,
			Subtract,
		};
		constexpr BlockState Comparator(const eBlockFace Facing, const enum Mode Mode, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Mode == Mode::Compare)
					if (Powered) return 9175;
					else return 9176;
				else
					if (Powered) return 9177;
					else return 9178;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Mode == Mode::Compare)
					if (Powered) return 9179;
					else return 9180;
				else
					if (Powered) return 9181;
					else return 9182;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Mode == Mode::Compare)
					if (Powered) return 9183;
					else return 9184;
				else
					if (Powered) return 9185;
					else return 9186;
			else
				if (Mode == Mode::Compare)
					if (Powered) return 9187;
					else return 9188;
				else
					if (Powered) return 9189;
					else return 9190;
		}
		BlockState Comparator();
		eBlockFace Facing(BlockState Block);
		enum Mode Mode(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Composter
	{
		constexpr BlockState Composter(const int Level)
		{
			if (Level == 0) return 19372;
			else if (Level == 1) return 19373;
			else if (Level == 2) return 19374;
			else if (Level == 3) return 19375;
			else if (Level == 4) return 19376;
			else if (Level == 5) return 19377;
			else if (Level == 6) return 19378;
			else if (Level == 7) return 19379;
			else return 19380;
		}
		BlockState Composter();
		int Level(BlockState Block);
	}
	namespace Conduit
	{
		constexpr BlockState Conduit(const bool Waterlogged)
		{
			if (Waterlogged) return 12942;
			else return 12943;
		}
		BlockState Conduit();
		bool Waterlogged(BlockState Block);
	}
	namespace CopperBlock
	{
		constexpr BlockState CopperBlock()
		{
			return 22938;
		}
	}
	namespace CopperBulb
	{
		constexpr BlockState CopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24692;
				else return 24693;
			else
				if (Powered) return 24694;
				else return 24695;
		}
		BlockState CopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23652;
							else return 23653;
						else
							if (Powered) return 23654;
							else return 23655;
					else
						if (Open)
							if (Powered) return 23656;
							else return 23657;
						else
							if (Powered) return 23658;
							else return 23659;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23660;
							else return 23661;
						else
							if (Powered) return 23662;
							else return 23663;
					else
						if (Open)
							if (Powered) return 23664;
							else return 23665;
						else
							if (Powered) return 23666;
							else return 23667;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23668;
							else return 23669;
						else
							if (Powered) return 23670;
							else return 23671;
					else
						if (Open)
							if (Powered) return 23672;
							else return 23673;
						else
							if (Powered) return 23674;
							else return 23675;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23676;
							else return 23677;
						else
							if (Powered) return 23678;
							else return 23679;
					else
						if (Open)
							if (Powered) return 23680;
							else return 23681;
						else
							if (Powered) return 23682;
							else return 23683;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23684;
							else return 23685;
						else
							if (Powered) return 23686;
							else return 23687;
					else
						if (Open)
							if (Powered) return 23688;
							else return 23689;
						else
							if (Powered) return 23690;
							else return 23691;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23692;
							else return 23693;
						else
							if (Powered) return 23694;
							else return 23695;
					else
						if (Open)
							if (Powered) return 23696;
							else return 23697;
						else
							if (Powered) return 23698;
							else return 23699;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23700;
							else return 23701;
						else
							if (Powered) return 23702;
							else return 23703;
					else
						if (Open)
							if (Powered) return 23704;
							else return 23705;
						else
							if (Powered) return 23706;
							else return 23707;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23708;
							else return 23709;
						else
							if (Powered) return 23710;
							else return 23711;
					else
						if (Open)
							if (Powered) return 23712;
							else return 23713;
						else
							if (Powered) return 23714;
							else return 23715;
		}
		BlockState CopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CopperGrate
	{
		constexpr BlockState CopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24676;
			else return 24677;
		}
		BlockState CopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace CopperOre
	{
		constexpr BlockState CopperOre()
		{
			return 22942;
		}
	}
	namespace CopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24164;
							else return 24165;
						else
							if (Waterlogged) return 24166;
							else return 24167;
					else
						if (Powered)
							if (Waterlogged) return 24168;
							else return 24169;
						else
							if (Waterlogged) return 24170;
							else return 24171;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24172;
							else return 24173;
						else
							if (Waterlogged) return 24174;
							else return 24175;
					else
						if (Powered)
							if (Waterlogged) return 24176;
							else return 24177;
						else
							if (Waterlogged) return 24178;
							else return 24179;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24180;
							else return 24181;
						else
							if (Waterlogged) return 24182;
							else return 24183;
					else
						if (Powered)
							if (Waterlogged) return 24184;
							else return 24185;
						else
							if (Waterlogged) return 24186;
							else return 24187;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24188;
							else return 24189;
						else
							if (Waterlogged) return 24190;
							else return 24191;
					else
						if (Powered)
							if (Waterlogged) return 24192;
							else return 24193;
						else
							if (Waterlogged) return 24194;
							else return 24195;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24196;
							else return 24197;
						else
							if (Waterlogged) return 24198;
							else return 24199;
					else
						if (Powered)
							if (Waterlogged) return 24200;
							else return 24201;
						else
							if (Waterlogged) return 24202;
							else return 24203;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24204;
							else return 24205;
						else
							if (Waterlogged) return 24206;
							else return 24207;
					else
						if (Powered)
							if (Waterlogged) return 24208;
							else return 24209;
						else
							if (Waterlogged) return 24210;
							else return 24211;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24212;
							else return 24213;
						else
							if (Waterlogged) return 24214;
							else return 24215;
					else
						if (Powered)
							if (Waterlogged) return 24216;
							else return 24217;
						else
							if (Waterlogged) return 24218;
							else return 24219;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24220;
							else return 24221;
						else
							if (Waterlogged) return 24222;
							else return 24223;
					else
						if (Powered)
							if (Waterlogged) return 24224;
							else return 24225;
						else
							if (Waterlogged) return 24226;
							else return 24227;
		}
		BlockState CopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Cornflower
	{
		constexpr BlockState Cornflower()
		{
			return 2086;
		}
	}
	namespace CrackedDeepslateBricks
	{
		constexpr BlockState CrackedDeepslateBricks()
		{
			return 26552;
		}
	}
	namespace CrackedDeepslateTiles
	{
		constexpr BlockState CrackedDeepslateTiles()
		{
			return 26553;
		}
	}
	namespace CrackedNetherBricks
	{
		constexpr BlockState CrackedNetherBricks()
		{
			return 20723;
		}
	}
	namespace CrackedPolishedBlackstoneBricks
	{
		constexpr BlockState CrackedPolishedBlackstoneBricks()
		{
			return 19873;
		}
	}
	namespace CrackedStoneBricks
	{
		constexpr BlockState CrackedStoneBricks()
		{
			return 6539;
		}
	}
	namespace Crafter
	{
		enum class Orientation
		{
			DownEast,
			DownNorth,
			DownSouth,
			DownWest,
			UpEast,
			UpNorth,
			UpSouth,
			UpWest,
			WestUp,
			EastUp,
			NorthUp,
			SouthUp,
		};
		constexpr BlockState Crafter(const bool Crafting, const enum Orientation Orientation, const bool Triggered)
		{
			if (Crafting)
				if (Orientation == Orientation::DownEast)
					if (Triggered) return 26590;
					else return 26591;
				else if (Orientation == Orientation::DownNorth)
					if (Triggered) return 26592;
					else return 26593;
				else if (Orientation == Orientation::DownSouth)
					if (Triggered) return 26594;
					else return 26595;
				else if (Orientation == Orientation::DownWest)
					if (Triggered) return 26596;
					else return 26597;
				else if (Orientation == Orientation::UpEast)
					if (Triggered) return 26598;
					else return 26599;
				else if (Orientation == Orientation::UpNorth)
					if (Triggered) return 26600;
					else return 26601;
				else if (Orientation == Orientation::UpSouth)
					if (Triggered) return 26602;
					else return 26603;
				else if (Orientation == Orientation::UpWest)
					if (Triggered) return 26604;
					else return 26605;
				else if (Orientation == Orientation::WestUp)
					if (Triggered) return 26606;
					else return 26607;
				else if (Orientation == Orientation::EastUp)
					if (Triggered) return 26608;
					else return 26609;
				else if (Orientation == Orientation::NorthUp)
					if (Triggered) return 26610;
					else return 26611;
				else
					if (Triggered) return 26612;
					else return 26613;
			else
				if (Orientation == Orientation::DownEast)
					if (Triggered) return 26614;
					else return 26615;
				else if (Orientation == Orientation::DownNorth)
					if (Triggered) return 26616;
					else return 26617;
				else if (Orientation == Orientation::DownSouth)
					if (Triggered) return 26618;
					else return 26619;
				else if (Orientation == Orientation::DownWest)
					if (Triggered) return 26620;
					else return 26621;
				else if (Orientation == Orientation::UpEast)
					if (Triggered) return 26622;
					else return 26623;
				else if (Orientation == Orientation::UpNorth)
					if (Triggered) return 26624;
					else return 26625;
				else if (Orientation == Orientation::UpSouth)
					if (Triggered) return 26626;
					else return 26627;
				else if (Orientation == Orientation::UpWest)
					if (Triggered) return 26628;
					else return 26629;
				else if (Orientation == Orientation::WestUp)
					if (Triggered) return 26630;
					else return 26631;
				else if (Orientation == Orientation::EastUp)
					if (Triggered) return 26632;
					else return 26633;
				else if (Orientation == Orientation::NorthUp)
					if (Triggered) return 26634;
					else return 26635;
				else
					if (Triggered) return 26636;
					else return 26637;
		}
		BlockState Crafter();
		bool Crafting(BlockState Block);
		enum Orientation Orientation(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace CraftingTable
	{
		constexpr BlockState CraftingTable()
		{
			return 4277;
		}
	}
	namespace CreeperHead
	{
		constexpr BlockState CreeperHead(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 8987;
				else if (Rotation == 1) return 8988;
				else if (Rotation == 2) return 8989;
				else if (Rotation == 3) return 8990;
				else if (Rotation == 4) return 8991;
				else if (Rotation == 5) return 8992;
				else if (Rotation == 6) return 8993;
				else if (Rotation == 7) return 8994;
				else if (Rotation == 8) return 8995;
				else if (Rotation == 9) return 8996;
				else if (Rotation == 10) return 8997;
				else if (Rotation == 11) return 8998;
				else if (Rotation == 12) return 8999;
				else if (Rotation == 13) return 9000;
				else if (Rotation == 14) return 9001;
				else return 9002;
			else
				if (Rotation == 0) return 9003;
				else if (Rotation == 1) return 9004;
				else if (Rotation == 2) return 9005;
				else if (Rotation == 3) return 9006;
				else if (Rotation == 4) return 9007;
				else if (Rotation == 5) return 9008;
				else if (Rotation == 6) return 9009;
				else if (Rotation == 7) return 9010;
				else if (Rotation == 8) return 9011;
				else if (Rotation == 9) return 9012;
				else if (Rotation == 10) return 9013;
				else if (Rotation == 11) return 9014;
				else if (Rotation == 12) return 9015;
				else if (Rotation == 13) return 9016;
				else if (Rotation == 14) return 9017;
				else return 9018;
		}
		BlockState CreeperHead();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace CreeperWallHead
	{
		constexpr BlockState CreeperWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9019;
				else return 9020;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9021;
				else return 9022;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9023;
				else return 9024;
			else
				if (Powered) return 9025;
				else return 9026;
		}
		BlockState CreeperWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState CrimsonButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19100;
					else return 19101;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19102;
					else return 19103;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19104;
					else return 19105;
				else
					if (Powered) return 19106;
					else return 19107;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19108;
					else return 19109;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19110;
					else return 19111;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19112;
					else return 19113;
				else
					if (Powered) return 19114;
					else return 19115;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19116;
					else return 19117;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19118;
					else return 19119;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19120;
					else return 19121;
				else
					if (Powered) return 19122;
					else return 19123;
		}
		BlockState CrimsonButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState CrimsonDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19148;
							else return 19149;
						else
							if (Powered) return 19150;
							else return 19151;
					else
						if (Open)
							if (Powered) return 19152;
							else return 19153;
						else
							if (Powered) return 19154;
							else return 19155;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19156;
							else return 19157;
						else
							if (Powered) return 19158;
							else return 19159;
					else
						if (Open)
							if (Powered) return 19160;
							else return 19161;
						else
							if (Powered) return 19162;
							else return 19163;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19164;
							else return 19165;
						else
							if (Powered) return 19166;
							else return 19167;
					else
						if (Open)
							if (Powered) return 19168;
							else return 19169;
						else
							if (Powered) return 19170;
							else return 19171;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19172;
							else return 19173;
						else
							if (Powered) return 19174;
							else return 19175;
					else
						if (Open)
							if (Powered) return 19176;
							else return 19177;
						else
							if (Powered) return 19178;
							else return 19179;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19180;
							else return 19181;
						else
							if (Powered) return 19182;
							else return 19183;
					else
						if (Open)
							if (Powered) return 19184;
							else return 19185;
						else
							if (Powered) return 19186;
							else return 19187;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19188;
							else return 19189;
						else
							if (Powered) return 19190;
							else return 19191;
					else
						if (Open)
							if (Powered) return 19192;
							else return 19193;
						else
							if (Powered) return 19194;
							else return 19195;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19196;
							else return 19197;
						else
							if (Powered) return 19198;
							else return 19199;
					else
						if (Open)
							if (Powered) return 19200;
							else return 19201;
						else
							if (Powered) return 19202;
							else return 19203;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19204;
							else return 19205;
						else
							if (Powered) return 19206;
							else return 19207;
					else
						if (Open)
							if (Powered) return 19208;
							else return 19209;
						else
							if (Powered) return 19210;
							else return 19211;
		}
		BlockState CrimsonDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonFence
	{
		constexpr BlockState CrimsonFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 18684;
							else return 18685;
						else
							if (West) return 18686;
							else return 18687;
					else
						if (Waterlogged)
							if (West) return 18688;
							else return 18689;
						else
							if (West) return 18690;
							else return 18691;
				else
					if (South)
						if (Waterlogged)
							if (West) return 18692;
							else return 18693;
						else
							if (West) return 18694;
							else return 18695;
					else
						if (Waterlogged)
							if (West) return 18696;
							else return 18697;
						else
							if (West) return 18698;
							else return 18699;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 18700;
							else return 18701;
						else
							if (West) return 18702;
							else return 18703;
					else
						if (Waterlogged)
							if (West) return 18704;
							else return 18705;
						else
							if (West) return 18706;
							else return 18707;
				else
					if (South)
						if (Waterlogged)
							if (West) return 18708;
							else return 18709;
						else
							if (West) return 18710;
							else return 18711;
					else
						if (Waterlogged)
							if (West) return 18712;
							else return 18713;
						else
							if (West) return 18714;
							else return 18715;
		}
		BlockState CrimsonFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CrimsonFenceGate
	{
		constexpr BlockState CrimsonFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 18876;
						else return 18877;
					else
						if (Powered) return 18878;
						else return 18879;
				else
					if (Open)
						if (Powered) return 18880;
						else return 18881;
					else
						if (Powered) return 18882;
						else return 18883;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 18884;
						else return 18885;
					else
						if (Powered) return 18886;
						else return 18887;
				else
					if (Open)
						if (Powered) return 18888;
						else return 18889;
					else
						if (Powered) return 18890;
						else return 18891;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 18892;
						else return 18893;
					else
						if (Powered) return 18894;
						else return 18895;
				else
					if (Open)
						if (Powered) return 18896;
						else return 18897;
					else
						if (Powered) return 18898;
						else return 18899;
			else
				if (InWall)
					if (Open)
						if (Powered) return 18900;
						else return 18901;
					else
						if (Powered) return 18902;
						else return 18903;
				else
					if (Open)
						if (Powered) return 18904;
						else return 18905;
					else
						if (Powered) return 18906;
						else return 18907;
		}
		BlockState CrimsonFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace CrimsonFungus
	{
		constexpr BlockState CrimsonFungus()
		{
			return 18609;
		}
	}
	namespace CrimsonHangingSign
	{
		constexpr BlockState CrimsonHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5282;
					else return 5283;
				else if (Rotation == 1)
					if (Waterlogged) return 5284;
					else return 5285;
				else if (Rotation == 2)
					if (Waterlogged) return 5286;
					else return 5287;
				else if (Rotation == 3)
					if (Waterlogged) return 5288;
					else return 5289;
				else if (Rotation == 4)
					if (Waterlogged) return 5290;
					else return 5291;
				else if (Rotation == 5)
					if (Waterlogged) return 5292;
					else return 5293;
				else if (Rotation == 6)
					if (Waterlogged) return 5294;
					else return 5295;
				else if (Rotation == 7)
					if (Waterlogged) return 5296;
					else return 5297;
				else if (Rotation == 8)
					if (Waterlogged) return 5298;
					else return 5299;
				else if (Rotation == 9)
					if (Waterlogged) return 5300;
					else return 5301;
				else if (Rotation == 10)
					if (Waterlogged) return 5302;
					else return 5303;
				else if (Rotation == 11)
					if (Waterlogged) return 5304;
					else return 5305;
				else if (Rotation == 12)
					if (Waterlogged) return 5306;
					else return 5307;
				else if (Rotation == 13)
					if (Waterlogged) return 5308;
					else return 5309;
				else if (Rotation == 14)
					if (Waterlogged) return 5310;
					else return 5311;
				else
					if (Waterlogged) return 5312;
					else return 5313;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5314;
					else return 5315;
				else if (Rotation == 1)
					if (Waterlogged) return 5316;
					else return 5317;
				else if (Rotation == 2)
					if (Waterlogged) return 5318;
					else return 5319;
				else if (Rotation == 3)
					if (Waterlogged) return 5320;
					else return 5321;
				else if (Rotation == 4)
					if (Waterlogged) return 5322;
					else return 5323;
				else if (Rotation == 5)
					if (Waterlogged) return 5324;
					else return 5325;
				else if (Rotation == 6)
					if (Waterlogged) return 5326;
					else return 5327;
				else if (Rotation == 7)
					if (Waterlogged) return 5328;
					else return 5329;
				else if (Rotation == 8)
					if (Waterlogged) return 5330;
					else return 5331;
				else if (Rotation == 9)
					if (Waterlogged) return 5332;
					else return 5333;
				else if (Rotation == 10)
					if (Waterlogged) return 5334;
					else return 5335;
				else if (Rotation == 11)
					if (Waterlogged) return 5336;
					else return 5337;
				else if (Rotation == 12)
					if (Waterlogged) return 5338;
					else return 5339;
				else if (Rotation == 13)
					if (Waterlogged) return 5340;
					else return 5341;
				else if (Rotation == 14)
					if (Waterlogged) return 5342;
					else return 5343;
				else
					if (Waterlogged) return 5344;
					else return 5345;
		}
		BlockState CrimsonHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CrimsonHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18602;
			else if (Axis == Axis::Y) return 18603;
			else return 18604;
		}
		BlockState CrimsonHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace CrimsonNylium
	{
		constexpr BlockState CrimsonNylium()
		{
			return 18608;
		}
	}
	namespace CrimsonPlanks
	{
		constexpr BlockState CrimsonPlanks()
		{
			return 18666;
		}
	}
	namespace CrimsonPressurePlate
	{
		constexpr BlockState CrimsonPressurePlate(const bool Powered)
		{
			if (Powered) return 18680;
			else return 18681;
		}
		BlockState CrimsonPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace CrimsonRoots
	{
		constexpr BlockState CrimsonRoots()
		{
			return 18665;
		}
	}
	namespace CrimsonSign
	{
		constexpr BlockState CrimsonSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 19276;
				else return 19277;
			else if (Rotation == 1)
				if (Waterlogged) return 19278;
				else return 19279;
			else if (Rotation == 2)
				if (Waterlogged) return 19280;
				else return 19281;
			else if (Rotation == 3)
				if (Waterlogged) return 19282;
				else return 19283;
			else if (Rotation == 4)
				if (Waterlogged) return 19284;
				else return 19285;
			else if (Rotation == 5)
				if (Waterlogged) return 19286;
				else return 19287;
			else if (Rotation == 6)
				if (Waterlogged) return 19288;
				else return 19289;
			else if (Rotation == 7)
				if (Waterlogged) return 19290;
				else return 19291;
			else if (Rotation == 8)
				if (Waterlogged) return 19292;
				else return 19293;
			else if (Rotation == 9)
				if (Waterlogged) return 19294;
				else return 19295;
			else if (Rotation == 10)
				if (Waterlogged) return 19296;
				else return 19297;
			else if (Rotation == 11)
				if (Waterlogged) return 19298;
				else return 19299;
			else if (Rotation == 12)
				if (Waterlogged) return 19300;
				else return 19301;
			else if (Rotation == 13)
				if (Waterlogged) return 19302;
				else return 19303;
			else if (Rotation == 14)
				if (Waterlogged) return 19304;
				else return 19305;
			else
				if (Waterlogged) return 19306;
				else return 19307;
		}
		BlockState CrimsonSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CrimsonSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 18668;
				else return 18669;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 18670;
				else return 18671;
			else
				if (Waterlogged) return 18672;
				else return 18673;
		}
		BlockState CrimsonSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CrimsonStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18940;
						else return 18941;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18942;
						else return 18943;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18944;
						else return 18945;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18946;
						else return 18947;
					else
						if (Waterlogged) return 18948;
						else return 18949;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18950;
						else return 18951;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18952;
						else return 18953;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18954;
						else return 18955;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18956;
						else return 18957;
					else
						if (Waterlogged) return 18958;
						else return 18959;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18960;
						else return 18961;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18962;
						else return 18963;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18964;
						else return 18965;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18966;
						else return 18967;
					else
						if (Waterlogged) return 18968;
						else return 18969;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18970;
						else return 18971;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18972;
						else return 18973;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18974;
						else return 18975;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18976;
						else return 18977;
					else
						if (Waterlogged) return 18978;
						else return 18979;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18980;
						else return 18981;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18982;
						else return 18983;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18984;
						else return 18985;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18986;
						else return 18987;
					else
						if (Waterlogged) return 18988;
						else return 18989;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 18990;
						else return 18991;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 18992;
						else return 18993;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 18994;
						else return 18995;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 18996;
						else return 18997;
					else
						if (Waterlogged) return 18998;
						else return 18999;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19000;
						else return 19001;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19002;
						else return 19003;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19004;
						else return 19005;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19006;
						else return 19007;
					else
						if (Waterlogged) return 19008;
						else return 19009;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19010;
						else return 19011;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19012;
						else return 19013;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19014;
						else return 19015;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19016;
						else return 19017;
					else
						if (Waterlogged) return 19018;
						else return 19019;
		}
		BlockState CrimsonStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState CrimsonStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18596;
			else if (Axis == Axis::Y) return 18597;
			else return 18598;
		}
		BlockState CrimsonStem();
		enum Axis Axis(BlockState Block);
	}
	namespace CrimsonTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState CrimsonTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18748;
							else return 18749;
						else
							if (Waterlogged) return 18750;
							else return 18751;
					else
						if (Powered)
							if (Waterlogged) return 18752;
							else return 18753;
						else
							if (Waterlogged) return 18754;
							else return 18755;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18756;
							else return 18757;
						else
							if (Waterlogged) return 18758;
							else return 18759;
					else
						if (Powered)
							if (Waterlogged) return 18760;
							else return 18761;
						else
							if (Waterlogged) return 18762;
							else return 18763;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18764;
							else return 18765;
						else
							if (Waterlogged) return 18766;
							else return 18767;
					else
						if (Powered)
							if (Waterlogged) return 18768;
							else return 18769;
						else
							if (Waterlogged) return 18770;
							else return 18771;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18772;
							else return 18773;
						else
							if (Waterlogged) return 18774;
							else return 18775;
					else
						if (Powered)
							if (Waterlogged) return 18776;
							else return 18777;
						else
							if (Waterlogged) return 18778;
							else return 18779;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18780;
							else return 18781;
						else
							if (Waterlogged) return 18782;
							else return 18783;
					else
						if (Powered)
							if (Waterlogged) return 18784;
							else return 18785;
						else
							if (Waterlogged) return 18786;
							else return 18787;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18788;
							else return 18789;
						else
							if (Waterlogged) return 18790;
							else return 18791;
					else
						if (Powered)
							if (Waterlogged) return 18792;
							else return 18793;
						else
							if (Waterlogged) return 18794;
							else return 18795;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18796;
							else return 18797;
						else
							if (Waterlogged) return 18798;
							else return 18799;
					else
						if (Powered)
							if (Waterlogged) return 18800;
							else return 18801;
						else
							if (Waterlogged) return 18802;
							else return 18803;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18804;
							else return 18805;
						else
							if (Waterlogged) return 18806;
							else return 18807;
					else
						if (Powered)
							if (Waterlogged) return 18808;
							else return 18809;
						else
							if (Waterlogged) return 18810;
							else return 18811;
		}
		BlockState CrimsonTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonWallHangingSign
	{
		constexpr BlockState CrimsonWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5602;
				else return 5603;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5604;
				else return 5605;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5606;
				else return 5607;
			else
				if (Waterlogged) return 5608;
				else return 5609;
		}
		BlockState CrimsonWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CrimsonWallSign
	{
		constexpr BlockState CrimsonWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 19340;
				else return 19341;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 19342;
				else return 19343;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 19344;
				else return 19345;
			else
				if (Waterlogged) return 19346;
				else return 19347;
		}
		BlockState CrimsonWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CryingObsidian
	{
		constexpr BlockState CryingObsidian()
		{
			return 19449;
		}
	}
	namespace CutCopper
	{
		constexpr BlockState CutCopper()
		{
			return 22947;
		}
	}
	namespace CutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23294;
				else return 23295;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23296;
				else return 23297;
			else
				if (Waterlogged) return 23298;
				else return 23299;
		}
		BlockState CutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState CutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23196;
						else return 23197;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23198;
						else return 23199;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23200;
						else return 23201;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23202;
						else return 23203;
					else
						if (Waterlogged) return 23204;
						else return 23205;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23206;
						else return 23207;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23208;
						else return 23209;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23210;
						else return 23211;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23212;
						else return 23213;
					else
						if (Waterlogged) return 23214;
						else return 23215;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23216;
						else return 23217;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23218;
						else return 23219;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23220;
						else return 23221;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23222;
						else return 23223;
					else
						if (Waterlogged) return 23224;
						else return 23225;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23226;
						else return 23227;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23228;
						else return 23229;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23230;
						else return 23231;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23232;
						else return 23233;
					else
						if (Waterlogged) return 23234;
						else return 23235;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23236;
						else return 23237;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23238;
						else return 23239;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23240;
						else return 23241;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23242;
						else return 23243;
					else
						if (Waterlogged) return 23244;
						else return 23245;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23246;
						else return 23247;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23248;
						else return 23249;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23250;
						else return 23251;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23252;
						else return 23253;
					else
						if (Waterlogged) return 23254;
						else return 23255;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23256;
						else return 23257;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23258;
						else return 23259;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23260;
						else return 23261;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23262;
						else return 23263;
					else
						if (Waterlogged) return 23264;
						else return 23265;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23266;
						else return 23267;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23268;
						else return 23269;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23270;
						else return 23271;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23272;
						else return 23273;
					else
						if (Waterlogged) return 23274;
						else return 23275;
		}
		BlockState CutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutRedSandstone
	{
		constexpr BlockState CutRedSandstone()
		{
			return 11081;
		}
	}
	namespace CutRedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutRedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11294;
				else return 11295;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11296;
				else return 11297;
			else
				if (Waterlogged) return 11298;
				else return 11299;
		}
		BlockState CutRedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CutSandstone
	{
		constexpr BlockState CutSandstone()
		{
			return 537;
		}
	}
	namespace CutSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState CutSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11240;
				else return 11241;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11242;
				else return 11243;
			else
				if (Waterlogged) return 11244;
				else return 11245;
		}
		BlockState CutSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CyanBanner
	{
		constexpr BlockState CyanBanner(const int Rotation)
		{
			if (Rotation == 0) return 10903;
			else if (Rotation == 1) return 10904;
			else if (Rotation == 2) return 10905;
			else if (Rotation == 3) return 10906;
			else if (Rotation == 4) return 10907;
			else if (Rotation == 5) return 10908;
			else if (Rotation == 6) return 10909;
			else if (Rotation == 7) return 10910;
			else if (Rotation == 8) return 10911;
			else if (Rotation == 9) return 10912;
			else if (Rotation == 10) return 10913;
			else if (Rotation == 11) return 10914;
			else if (Rotation == 12) return 10915;
			else if (Rotation == 13) return 10916;
			else if (Rotation == 14) return 10917;
			else return 10918;
		}
		BlockState CyanBanner();
		int Rotation(BlockState Block);
	}
	namespace CyanBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState CyanBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1832;
					else return 1833;
				else
					if (Part == Part::Head) return 1834;
					else return 1835;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1836;
					else return 1837;
				else
					if (Part == Part::Head) return 1838;
					else return 1839;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1840;
					else return 1841;
				else
					if (Part == Part::Head) return 1842;
					else return 1843;
			else
				if (Occupied)
					if (Part == Part::Head) return 1844;
					else return 1845;
				else
					if (Part == Part::Head) return 1846;
					else return 1847;
		}
		BlockState CyanBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace CyanCandle
	{
		constexpr BlockState CyanCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20885;
					else return 20886;
				else
					if (Waterlogged) return 20887;
					else return 20888;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20889;
					else return 20890;
				else
					if (Waterlogged) return 20891;
					else return 20892;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20893;
					else return 20894;
				else
					if (Waterlogged) return 20895;
					else return 20896;
			else
				if (Lit)
					if (Waterlogged) return 20897;
					else return 20898;
				else
					if (Waterlogged) return 20899;
					else return 20900;
		}
		BlockState CyanCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace CyanCandleCake
	{
		constexpr BlockState CyanCandleCake(const bool Lit)
		{
			if (Lit) return 21017;
			else return 21018;
		}
		BlockState CyanCandleCake();
		bool Lit(BlockState Block);
	}
	namespace CyanCarpet
	{
		constexpr BlockState CyanCarpet()
		{
			return 10737;
		}
	}
	namespace CyanConcrete
	{
		constexpr BlockState CyanConcrete()
		{
			return 12737;
		}
	}
	namespace CyanConcretePowder
	{
		constexpr BlockState CyanConcretePowder()
		{
			return 12753;
		}
	}
	namespace CyanGlazedTerracotta
	{
		constexpr BlockState CyanGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12700;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12701;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12702;
			else return 12703;
		}
		BlockState CyanGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanShulkerBox
	{
		constexpr BlockState CyanShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12622;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12623;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12624;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12625;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12626;
			else return 12627;
		}
		BlockState CyanShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanStainedGlass
	{
		constexpr BlockState CyanStainedGlass()
		{
			return 5954;
		}
	}
	namespace CyanStainedGlassPane
	{
		constexpr BlockState CyanStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9660;
							else return 9661;
						else
							if (West) return 9662;
							else return 9663;
					else
						if (Waterlogged)
							if (West) return 9664;
							else return 9665;
						else
							if (West) return 9666;
							else return 9667;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9668;
							else return 9669;
						else
							if (West) return 9670;
							else return 9671;
					else
						if (Waterlogged)
							if (West) return 9672;
							else return 9673;
						else
							if (West) return 9674;
							else return 9675;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9676;
							else return 9677;
						else
							if (West) return 9678;
							else return 9679;
					else
						if (Waterlogged)
							if (West) return 9680;
							else return 9681;
						else
							if (West) return 9682;
							else return 9683;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9684;
							else return 9685;
						else
							if (West) return 9686;
							else return 9687;
					else
						if (Waterlogged)
							if (West) return 9688;
							else return 9689;
						else
							if (West) return 9690;
							else return 9691;
		}
		BlockState CyanStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace CyanTerracotta
	{
		constexpr BlockState CyanTerracotta()
		{
			return 9365;
		}
	}
	namespace CyanWallBanner
	{
		constexpr BlockState CyanWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11051;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11052;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11053;
			else return 11054;
		}
		BlockState CyanWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace CyanWool
	{
		constexpr BlockState CyanWool()
		{
			return 2056;
		}
	}
	namespace DamagedAnvil
	{
		constexpr BlockState DamagedAnvil(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9115;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9116;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9117;
			else return 9118;
		}
		BlockState DamagedAnvil();
		eBlockFace Facing(BlockState Block);
	}
	namespace Dandelion
	{
		constexpr BlockState Dandelion()
		{
			return 2075;
		}
	}
	namespace DarkOakButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState DarkOakButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8755;
					else return 8756;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8757;
					else return 8758;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8759;
					else return 8760;
				else
					if (Powered) return 8761;
					else return 8762;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8763;
					else return 8764;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8765;
					else return 8766;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8767;
					else return 8768;
				else
					if (Powered) return 8769;
					else return 8770;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8771;
					else return 8772;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8773;
					else return 8774;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8775;
					else return 8776;
				else
					if (Powered) return 8777;
					else return 8778;
		}
		BlockState DarkOakButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState DarkOakDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12142;
							else return 12143;
						else
							if (Powered) return 12144;
							else return 12145;
					else
						if (Open)
							if (Powered) return 12146;
							else return 12147;
						else
							if (Powered) return 12148;
							else return 12149;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12150;
							else return 12151;
						else
							if (Powered) return 12152;
							else return 12153;
					else
						if (Open)
							if (Powered) return 12154;
							else return 12155;
						else
							if (Powered) return 12156;
							else return 12157;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12158;
							else return 12159;
						else
							if (Powered) return 12160;
							else return 12161;
					else
						if (Open)
							if (Powered) return 12162;
							else return 12163;
						else
							if (Powered) return 12164;
							else return 12165;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12166;
							else return 12167;
						else
							if (Powered) return 12168;
							else return 12169;
					else
						if (Open)
							if (Powered) return 12170;
							else return 12171;
						else
							if (Powered) return 12172;
							else return 12173;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12174;
							else return 12175;
						else
							if (Powered) return 12176;
							else return 12177;
					else
						if (Open)
							if (Powered) return 12178;
							else return 12179;
						else
							if (Powered) return 12180;
							else return 12181;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12182;
							else return 12183;
						else
							if (Powered) return 12184;
							else return 12185;
					else
						if (Open)
							if (Powered) return 12186;
							else return 12187;
						else
							if (Powered) return 12188;
							else return 12189;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12190;
							else return 12191;
						else
							if (Powered) return 12192;
							else return 12193;
					else
						if (Open)
							if (Powered) return 12194;
							else return 12195;
						else
							if (Powered) return 12196;
							else return 12197;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12198;
							else return 12199;
						else
							if (Powered) return 12200;
							else return 12201;
					else
						if (Open)
							if (Powered) return 12202;
							else return 12203;
						else
							if (Powered) return 12204;
							else return 12205;
		}
		BlockState DarkOakDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakFence
	{
		constexpr BlockState DarkOakFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11726;
							else return 11727;
						else
							if (West) return 11728;
							else return 11729;
					else
						if (Waterlogged)
							if (West) return 11730;
							else return 11731;
						else
							if (West) return 11732;
							else return 11733;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11734;
							else return 11735;
						else
							if (West) return 11736;
							else return 11737;
					else
						if (Waterlogged)
							if (West) return 11738;
							else return 11739;
						else
							if (West) return 11740;
							else return 11741;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11742;
							else return 11743;
						else
							if (West) return 11744;
							else return 11745;
					else
						if (Waterlogged)
							if (West) return 11746;
							else return 11747;
						else
							if (West) return 11748;
							else return 11749;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11750;
							else return 11751;
						else
							if (West) return 11752;
							else return 11753;
					else
						if (Waterlogged)
							if (West) return 11754;
							else return 11755;
						else
							if (West) return 11756;
							else return 11757;
		}
		BlockState DarkOakFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace DarkOakFenceGate
	{
		constexpr BlockState DarkOakFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11470;
						else return 11471;
					else
						if (Powered) return 11472;
						else return 11473;
				else
					if (Open)
						if (Powered) return 11474;
						else return 11475;
					else
						if (Powered) return 11476;
						else return 11477;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11478;
						else return 11479;
					else
						if (Powered) return 11480;
						else return 11481;
				else
					if (Open)
						if (Powered) return 11482;
						else return 11483;
					else
						if (Powered) return 11484;
						else return 11485;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11486;
						else return 11487;
					else
						if (Powered) return 11488;
						else return 11489;
				else
					if (Open)
						if (Powered) return 11490;
						else return 11491;
					else
						if (Powered) return 11492;
						else return 11493;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11494;
						else return 11495;
					else
						if (Powered) return 11496;
						else return 11497;
				else
					if (Open)
						if (Powered) return 11498;
						else return 11499;
					else
						if (Powered) return 11500;
						else return 11501;
		}
		BlockState DarkOakFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DarkOakHangingSign
	{
		constexpr BlockState DarkOakHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5218;
					else return 5219;
				else if (Rotation == 1)
					if (Waterlogged) return 5220;
					else return 5221;
				else if (Rotation == 2)
					if (Waterlogged) return 5222;
					else return 5223;
				else if (Rotation == 3)
					if (Waterlogged) return 5224;
					else return 5225;
				else if (Rotation == 4)
					if (Waterlogged) return 5226;
					else return 5227;
				else if (Rotation == 5)
					if (Waterlogged) return 5228;
					else return 5229;
				else if (Rotation == 6)
					if (Waterlogged) return 5230;
					else return 5231;
				else if (Rotation == 7)
					if (Waterlogged) return 5232;
					else return 5233;
				else if (Rotation == 8)
					if (Waterlogged) return 5234;
					else return 5235;
				else if (Rotation == 9)
					if (Waterlogged) return 5236;
					else return 5237;
				else if (Rotation == 10)
					if (Waterlogged) return 5238;
					else return 5239;
				else if (Rotation == 11)
					if (Waterlogged) return 5240;
					else return 5241;
				else if (Rotation == 12)
					if (Waterlogged) return 5242;
					else return 5243;
				else if (Rotation == 13)
					if (Waterlogged) return 5244;
					else return 5245;
				else if (Rotation == 14)
					if (Waterlogged) return 5246;
					else return 5247;
				else
					if (Waterlogged) return 5248;
					else return 5249;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5250;
					else return 5251;
				else if (Rotation == 1)
					if (Waterlogged) return 5252;
					else return 5253;
				else if (Rotation == 2)
					if (Waterlogged) return 5254;
					else return 5255;
				else if (Rotation == 3)
					if (Waterlogged) return 5256;
					else return 5257;
				else if (Rotation == 4)
					if (Waterlogged) return 5258;
					else return 5259;
				else if (Rotation == 5)
					if (Waterlogged) return 5260;
					else return 5261;
				else if (Rotation == 6)
					if (Waterlogged) return 5262;
					else return 5263;
				else if (Rotation == 7)
					if (Waterlogged) return 5264;
					else return 5265;
				else if (Rotation == 8)
					if (Waterlogged) return 5266;
					else return 5267;
				else if (Rotation == 9)
					if (Waterlogged) return 5268;
					else return 5269;
				else if (Rotation == 10)
					if (Waterlogged) return 5270;
					else return 5271;
				else if (Rotation == 11)
					if (Waterlogged) return 5272;
					else return 5273;
				else if (Rotation == 12)
					if (Waterlogged) return 5274;
					else return 5275;
				else if (Rotation == 13)
					if (Waterlogged) return 5276;
					else return 5277;
				else if (Rotation == 14)
					if (Waterlogged) return 5278;
					else return 5279;
				else
					if (Waterlogged) return 5280;
					else return 5281;
		}
		BlockState DarkOakHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakLeaves
	{
		constexpr BlockState DarkOakLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 405;
					else return 406;
				else
					if (Waterlogged) return 407;
					else return 408;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 409;
					else return 410;
				else
					if (Waterlogged) return 411;
					else return 412;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 413;
					else return 414;
				else
					if (Waterlogged) return 415;
					else return 416;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 417;
					else return 418;
				else
					if (Waterlogged) return 419;
					else return 420;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 421;
					else return 422;
				else
					if (Waterlogged) return 423;
					else return 424;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 425;
					else return 426;
				else
					if (Waterlogged) return 427;
					else return 428;
			else
				if (Persistent)
					if (Waterlogged) return 429;
					else return 430;
				else
					if (Waterlogged) return 431;
					else return 432;
		}
		BlockState DarkOakLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState DarkOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 148;
			else if (Axis == Axis::Y) return 149;
			else return 150;
		}
		BlockState DarkOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace DarkOakPlanks
	{
		constexpr BlockState DarkOakPlanks()
		{
			return 21;
		}
	}
	namespace DarkOakPressurePlate
	{
		constexpr BlockState DarkOakPressurePlate(const bool Powered)
		{
			if (Powered) return 5728;
			else return 5729;
		}
		BlockState DarkOakPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace DarkOakSapling
	{
		constexpr BlockState DarkOakSapling(const int Stage)
		{
			if (Stage == 0) return 37;
			else return 38;
		}
		BlockState DarkOakSapling();
		int Stage(BlockState Block);
	}
	namespace DarkOakSign
	{
		constexpr BlockState DarkOakSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4494;
				else return 4495;
			else if (Rotation == 1)
				if (Waterlogged) return 4496;
				else return 4497;
			else if (Rotation == 2)
				if (Waterlogged) return 4498;
				else return 4499;
			else if (Rotation == 3)
				if (Waterlogged) return 4500;
				else return 4501;
			else if (Rotation == 4)
				if (Waterlogged) return 4502;
				else return 4503;
			else if (Rotation == 5)
				if (Waterlogged) return 4504;
				else return 4505;
			else if (Rotation == 6)
				if (Waterlogged) return 4506;
				else return 4507;
			else if (Rotation == 7)
				if (Waterlogged) return 4508;
				else return 4509;
			else if (Rotation == 8)
				if (Waterlogged) return 4510;
				else return 4511;
			else if (Rotation == 9)
				if (Waterlogged) return 4512;
				else return 4513;
			else if (Rotation == 10)
				if (Waterlogged) return 4514;
				else return 4515;
			else if (Rotation == 11)
				if (Waterlogged) return 4516;
				else return 4517;
			else if (Rotation == 12)
				if (Waterlogged) return 4518;
				else return 4519;
			else if (Rotation == 13)
				if (Waterlogged) return 4520;
				else return 4521;
			else if (Rotation == 14)
				if (Waterlogged) return 4522;
				else return 4523;
			else
				if (Waterlogged) return 4524;
				else return 4525;
		}
		BlockState DarkOakSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DarkOakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11198;
				else return 11199;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11200;
				else return 11201;
			else
				if (Waterlogged) return 11202;
				else return 11203;
		}
		BlockState DarkOakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DarkOakStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10044;
						else return 10045;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10046;
						else return 10047;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10048;
						else return 10049;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10050;
						else return 10051;
					else
						if (Waterlogged) return 10052;
						else return 10053;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10054;
						else return 10055;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10056;
						else return 10057;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10058;
						else return 10059;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10060;
						else return 10061;
					else
						if (Waterlogged) return 10062;
						else return 10063;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10064;
						else return 10065;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10066;
						else return 10067;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10068;
						else return 10069;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10070;
						else return 10071;
					else
						if (Waterlogged) return 10072;
						else return 10073;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10074;
						else return 10075;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10076;
						else return 10077;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10078;
						else return 10079;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10080;
						else return 10081;
					else
						if (Waterlogged) return 10082;
						else return 10083;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10084;
						else return 10085;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10086;
						else return 10087;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10088;
						else return 10089;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10090;
						else return 10091;
					else
						if (Waterlogged) return 10092;
						else return 10093;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10094;
						else return 10095;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10096;
						else return 10097;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10098;
						else return 10099;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10100;
						else return 10101;
					else
						if (Waterlogged) return 10102;
						else return 10103;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10104;
						else return 10105;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10106;
						else return 10107;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10108;
						else return 10109;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10110;
						else return 10111;
					else
						if (Waterlogged) return 10112;
						else return 10113;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10114;
						else return 10115;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10116;
						else return 10117;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10118;
						else return 10119;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10120;
						else return 10121;
					else
						if (Waterlogged) return 10122;
						else return 10123;
		}
		BlockState DarkOakStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState DarkOakTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6345;
							else return 6346;
						else
							if (Waterlogged) return 6347;
							else return 6348;
					else
						if (Powered)
							if (Waterlogged) return 6349;
							else return 6350;
						else
							if (Waterlogged) return 6351;
							else return 6352;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6353;
							else return 6354;
						else
							if (Waterlogged) return 6355;
							else return 6356;
					else
						if (Powered)
							if (Waterlogged) return 6357;
							else return 6358;
						else
							if (Waterlogged) return 6359;
							else return 6360;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6361;
							else return 6362;
						else
							if (Waterlogged) return 6363;
							else return 6364;
					else
						if (Powered)
							if (Waterlogged) return 6365;
							else return 6366;
						else
							if (Waterlogged) return 6367;
							else return 6368;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6369;
							else return 6370;
						else
							if (Waterlogged) return 6371;
							else return 6372;
					else
						if (Powered)
							if (Waterlogged) return 6373;
							else return 6374;
						else
							if (Waterlogged) return 6375;
							else return 6376;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6377;
							else return 6378;
						else
							if (Waterlogged) return 6379;
							else return 6380;
					else
						if (Powered)
							if (Waterlogged) return 6381;
							else return 6382;
						else
							if (Waterlogged) return 6383;
							else return 6384;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6385;
							else return 6386;
						else
							if (Waterlogged) return 6387;
							else return 6388;
					else
						if (Powered)
							if (Waterlogged) return 6389;
							else return 6390;
						else
							if (Waterlogged) return 6391;
							else return 6392;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6393;
							else return 6394;
						else
							if (Waterlogged) return 6395;
							else return 6396;
					else
						if (Powered)
							if (Waterlogged) return 6397;
							else return 6398;
						else
							if (Waterlogged) return 6399;
							else return 6400;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6401;
							else return 6402;
						else
							if (Waterlogged) return 6403;
							else return 6404;
					else
						if (Powered)
							if (Waterlogged) return 6405;
							else return 6406;
						else
							if (Waterlogged) return 6407;
							else return 6408;
		}
		BlockState DarkOakTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWallHangingSign
	{
		constexpr BlockState DarkOakWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5586;
				else return 5587;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5588;
				else return 5589;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5590;
				else return 5591;
			else
				if (Waterlogged) return 5592;
				else return 5593;
		}
		BlockState DarkOakWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWallSign
	{
		constexpr BlockState DarkOakWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4810;
				else return 4811;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4812;
				else return 4813;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4814;
				else return 4815;
			else
				if (Waterlogged) return 4816;
				else return 4817;
		}
		BlockState DarkOakWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState DarkOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 207;
			else if (Axis == Axis::Y) return 208;
			else return 209;
		}
		BlockState DarkOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace DarkPrismarine
	{
		constexpr BlockState DarkPrismarine()
		{
			return 10465;
		}
	}
	namespace DarkPrismarineSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DarkPrismarineSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 10718;
				else return 10719;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 10720;
				else return 10721;
			else
				if (Waterlogged) return 10722;
				else return 10723;
		}
		BlockState DarkPrismarineSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DarkPrismarineStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DarkPrismarineStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10626;
						else return 10627;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10628;
						else return 10629;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10630;
						else return 10631;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10632;
						else return 10633;
					else
						if (Waterlogged) return 10634;
						else return 10635;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10636;
						else return 10637;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10638;
						else return 10639;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10640;
						else return 10641;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10642;
						else return 10643;
					else
						if (Waterlogged) return 10644;
						else return 10645;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10646;
						else return 10647;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10648;
						else return 10649;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10650;
						else return 10651;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10652;
						else return 10653;
					else
						if (Waterlogged) return 10654;
						else return 10655;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10656;
						else return 10657;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10658;
						else return 10659;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10660;
						else return 10661;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10662;
						else return 10663;
					else
						if (Waterlogged) return 10664;
						else return 10665;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10666;
						else return 10667;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10668;
						else return 10669;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10670;
						else return 10671;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10672;
						else return 10673;
					else
						if (Waterlogged) return 10674;
						else return 10675;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10676;
						else return 10677;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10678;
						else return 10679;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10680;
						else return 10681;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10682;
						else return 10683;
					else
						if (Waterlogged) return 10684;
						else return 10685;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10686;
						else return 10687;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10688;
						else return 10689;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10690;
						else return 10691;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10692;
						else return 10693;
					else
						if (Waterlogged) return 10694;
						else return 10695;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10696;
						else return 10697;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10698;
						else return 10699;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10700;
						else return 10701;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10702;
						else return 10703;
					else
						if (Waterlogged) return 10704;
						else return 10705;
		}
		BlockState DarkPrismarineStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DaylightDetector
	{
		constexpr BlockState DaylightDetector(const bool Inverted, const int Power)
		{
			if (Inverted)
				if (Power == 0) return 9191;
				else if (Power == 1) return 9192;
				else if (Power == 2) return 9193;
				else if (Power == 3) return 9194;
				else if (Power == 4) return 9195;
				else if (Power == 5) return 9196;
				else if (Power == 6) return 9197;
				else if (Power == 7) return 9198;
				else if (Power == 8) return 9199;
				else if (Power == 9) return 9200;
				else if (Power == 10) return 9201;
				else if (Power == 11) return 9202;
				else if (Power == 12) return 9203;
				else if (Power == 13) return 9204;
				else if (Power == 14) return 9205;
				else return 9206;
			else
				if (Power == 0) return 9207;
				else if (Power == 1) return 9208;
				else if (Power == 2) return 9209;
				else if (Power == 3) return 9210;
				else if (Power == 4) return 9211;
				else if (Power == 5) return 9212;
				else if (Power == 6) return 9213;
				else if (Power == 7) return 9214;
				else if (Power == 8) return 9215;
				else if (Power == 9) return 9216;
				else if (Power == 10) return 9217;
				else if (Power == 11) return 9218;
				else if (Power == 12) return 9219;
				else if (Power == 13) return 9220;
				else if (Power == 14) return 9221;
				else return 9222;
		}
		BlockState DaylightDetector();
		bool Inverted(BlockState Block);
		int Power(BlockState Block);
	}
	namespace DeadBrainCoral
	{
		constexpr BlockState DeadBrainCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12815;
			else return 12816;
		}
		BlockState DeadBrainCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBrainCoralBlock
	{
		constexpr BlockState DeadBrainCoralBlock()
		{
			return 12804;
		}
	}
	namespace DeadBrainCoralFan
	{
		constexpr BlockState DeadBrainCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12835;
			else return 12836;
		}
		BlockState DeadBrainCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBrainCoralWallFan
	{
		constexpr BlockState DeadBrainCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12861;
				else return 12862;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12863;
				else return 12864;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12865;
				else return 12866;
			else
				if (Waterlogged) return 12867;
				else return 12868;
		}
		BlockState DeadBrainCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoral
	{
		constexpr BlockState DeadBubbleCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12817;
			else return 12818;
		}
		BlockState DeadBubbleCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoralBlock
	{
		constexpr BlockState DeadBubbleCoralBlock()
		{
			return 12805;
		}
	}
	namespace DeadBubbleCoralFan
	{
		constexpr BlockState DeadBubbleCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12837;
			else return 12838;
		}
		BlockState DeadBubbleCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBubbleCoralWallFan
	{
		constexpr BlockState DeadBubbleCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12869;
				else return 12870;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12871;
				else return 12872;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12873;
				else return 12874;
			else
				if (Waterlogged) return 12875;
				else return 12876;
		}
		BlockState DeadBubbleCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadBush
	{
		constexpr BlockState DeadBush()
		{
			return 2007;
		}
	}
	namespace DeadFireCoral
	{
		constexpr BlockState DeadFireCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12819;
			else return 12820;
		}
		BlockState DeadFireCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadFireCoralBlock
	{
		constexpr BlockState DeadFireCoralBlock()
		{
			return 12806;
		}
	}
	namespace DeadFireCoralFan
	{
		constexpr BlockState DeadFireCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12839;
			else return 12840;
		}
		BlockState DeadFireCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadFireCoralWallFan
	{
		constexpr BlockState DeadFireCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12877;
				else return 12878;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12879;
				else return 12880;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12881;
				else return 12882;
			else
				if (Waterlogged) return 12883;
				else return 12884;
		}
		BlockState DeadFireCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoral
	{
		constexpr BlockState DeadHornCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12821;
			else return 12822;
		}
		BlockState DeadHornCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoralBlock
	{
		constexpr BlockState DeadHornCoralBlock()
		{
			return 12807;
		}
	}
	namespace DeadHornCoralFan
	{
		constexpr BlockState DeadHornCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12841;
			else return 12842;
		}
		BlockState DeadHornCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadHornCoralWallFan
	{
		constexpr BlockState DeadHornCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12885;
				else return 12886;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12887;
				else return 12888;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12889;
				else return 12890;
			else
				if (Waterlogged) return 12891;
				else return 12892;
		}
		BlockState DeadHornCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoral
	{
		constexpr BlockState DeadTubeCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12813;
			else return 12814;
		}
		BlockState DeadTubeCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoralBlock
	{
		constexpr BlockState DeadTubeCoralBlock()
		{
			return 12803;
		}
	}
	namespace DeadTubeCoralFan
	{
		constexpr BlockState DeadTubeCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12833;
			else return 12834;
		}
		BlockState DeadTubeCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace DeadTubeCoralWallFan
	{
		constexpr BlockState DeadTubeCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12853;
				else return 12854;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12855;
				else return 12856;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12857;
				else return 12858;
			else
				if (Waterlogged) return 12859;
				else return 12860;
		}
		BlockState DeadTubeCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DecoratedPot
	{
		constexpr BlockState DecoratedPot(const bool Cracked, const eBlockFace Facing, const bool Waterlogged)
		{
			if (Cracked)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Waterlogged) return 26574;
					else return 26575;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Waterlogged) return 26576;
					else return 26577;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Waterlogged) return 26578;
					else return 26579;
				else
					if (Waterlogged) return 26580;
					else return 26581;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Waterlogged) return 26582;
					else return 26583;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Waterlogged) return 26584;
					else return 26585;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Waterlogged) return 26586;
					else return 26587;
				else
					if (Waterlogged) return 26588;
					else return 26589;
		}
		BlockState DecoratedPot();
		bool Cracked(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Deepslate
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState Deepslate(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 24904;
			else if (Axis == Axis::Y) return 24905;
			else return 24906;
		}
		BlockState Deepslate();
		enum Axis Axis(BlockState Block);
	}
	namespace DeepslateBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DeepslateBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 26221;
				else return 26222;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 26223;
				else return 26224;
			else
				if (Waterlogged) return 26225;
				else return 26226;
		}
		BlockState DeepslateBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DeepslateBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26141;
						else return 26142;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26143;
						else return 26144;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26145;
						else return 26146;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26147;
						else return 26148;
					else
						if (Waterlogged) return 26149;
						else return 26150;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26151;
						else return 26152;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26153;
						else return 26154;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26155;
						else return 26156;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26157;
						else return 26158;
					else
						if (Waterlogged) return 26159;
						else return 26160;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26161;
						else return 26162;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26163;
						else return 26164;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26165;
						else return 26166;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26167;
						else return 26168;
					else
						if (Waterlogged) return 26169;
						else return 26170;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26171;
						else return 26172;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26173;
						else return 26174;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26175;
						else return 26176;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26177;
						else return 26178;
					else
						if (Waterlogged) return 26179;
						else return 26180;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26181;
						else return 26182;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26183;
						else return 26184;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26185;
						else return 26186;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26187;
						else return 26188;
					else
						if (Waterlogged) return 26189;
						else return 26190;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26191;
						else return 26192;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26193;
						else return 26194;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26195;
						else return 26196;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26197;
						else return 26198;
					else
						if (Waterlogged) return 26199;
						else return 26200;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26201;
						else return 26202;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26203;
						else return 26204;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26205;
						else return 26206;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26207;
						else return 26208;
					else
						if (Waterlogged) return 26209;
						else return 26210;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 26211;
						else return 26212;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 26213;
						else return 26214;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 26215;
						else return 26216;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 26217;
						else return 26218;
					else
						if (Waterlogged) return 26219;
						else return 26220;
		}
		BlockState DeepslateBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DeepslateBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26227;
								else if (West == West::Low) return 26228;
								else return 26229;
							else
								if (West == West::None) return 26230;
								else if (West == West::Low) return 26231;
								else return 26232;
						else
							if (Waterlogged)
								if (West == West::None) return 26233;
								else if (West == West::Low) return 26234;
								else return 26235;
							else
								if (West == West::None) return 26236;
								else if (West == West::Low) return 26237;
								else return 26238;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26239;
								else if (West == West::Low) return 26240;
								else return 26241;
							else
								if (West == West::None) return 26242;
								else if (West == West::Low) return 26243;
								else return 26244;
						else
							if (Waterlogged)
								if (West == West::None) return 26245;
								else if (West == West::Low) return 26246;
								else return 26247;
							else
								if (West == West::None) return 26248;
								else if (West == West::Low) return 26249;
								else return 26250;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26251;
								else if (West == West::Low) return 26252;
								else return 26253;
							else
								if (West == West::None) return 26254;
								else if (West == West::Low) return 26255;
								else return 26256;
						else
							if (Waterlogged)
								if (West == West::None) return 26257;
								else if (West == West::Low) return 26258;
								else return 26259;
							else
								if (West == West::None) return 26260;
								else if (West == West::Low) return 26261;
								else return 26262;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26263;
								else if (West == West::Low) return 26264;
								else return 26265;
							else
								if (West == West::None) return 26266;
								else if (West == West::Low) return 26267;
								else return 26268;
						else
							if (Waterlogged)
								if (West == West::None) return 26269;
								else if (West == West::Low) return 26270;
								else return 26271;
							else
								if (West == West::None) return 26272;
								else if (West == West::Low) return 26273;
								else return 26274;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26275;
								else if (West == West::Low) return 26276;
								else return 26277;
							else
								if (West == West::None) return 26278;
								else if (West == West::Low) return 26279;
								else return 26280;
						else
							if (Waterlogged)
								if (West == West::None) return 26281;
								else if (West == West::Low) return 26282;
								else return 26283;
							else
								if (West == West::None) return 26284;
								else if (West == West::Low) return 26285;
								else return 26286;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26287;
								else if (West == West::Low) return 26288;
								else return 26289;
							else
								if (West == West::None) return 26290;
								else if (West == West::Low) return 26291;
								else return 26292;
						else
							if (Waterlogged)
								if (West == West::None) return 26293;
								else if (West == West::Low) return 26294;
								else return 26295;
							else
								if (West == West::None) return 26296;
								else if (West == West::Low) return 26297;
								else return 26298;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26299;
								else if (West == West::Low) return 26300;
								else return 26301;
							else
								if (West == West::None) return 26302;
								else if (West == West::Low) return 26303;
								else return 26304;
						else
							if (Waterlogged)
								if (West == West::None) return 26305;
								else if (West == West::Low) return 26306;
								else return 26307;
							else
								if (West == West::None) return 26308;
								else if (West == West::Low) return 26309;
								else return 26310;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26311;
								else if (West == West::Low) return 26312;
								else return 26313;
							else
								if (West == West::None) return 26314;
								else if (West == West::Low) return 26315;
								else return 26316;
						else
							if (Waterlogged)
								if (West == West::None) return 26317;
								else if (West == West::Low) return 26318;
								else return 26319;
							else
								if (West == West::None) return 26320;
								else if (West == West::Low) return 26321;
								else return 26322;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26323;
								else if (West == West::Low) return 26324;
								else return 26325;
							else
								if (West == West::None) return 26326;
								else if (West == West::Low) return 26327;
								else return 26328;
						else
							if (Waterlogged)
								if (West == West::None) return 26329;
								else if (West == West::Low) return 26330;
								else return 26331;
							else
								if (West == West::None) return 26332;
								else if (West == West::Low) return 26333;
								else return 26334;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26335;
								else if (West == West::Low) return 26336;
								else return 26337;
							else
								if (West == West::None) return 26338;
								else if (West == West::Low) return 26339;
								else return 26340;
						else
							if (Waterlogged)
								if (West == West::None) return 26341;
								else if (West == West::Low) return 26342;
								else return 26343;
							else
								if (West == West::None) return 26344;
								else if (West == West::Low) return 26345;
								else return 26346;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26347;
								else if (West == West::Low) return 26348;
								else return 26349;
							else
								if (West == West::None) return 26350;
								else if (West == West::Low) return 26351;
								else return 26352;
						else
							if (Waterlogged)
								if (West == West::None) return 26353;
								else if (West == West::Low) return 26354;
								else return 26355;
							else
								if (West == West::None) return 26356;
								else if (West == West::Low) return 26357;
								else return 26358;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26359;
								else if (West == West::Low) return 26360;
								else return 26361;
							else
								if (West == West::None) return 26362;
								else if (West == West::Low) return 26363;
								else return 26364;
						else
							if (Waterlogged)
								if (West == West::None) return 26365;
								else if (West == West::Low) return 26366;
								else return 26367;
							else
								if (West == West::None) return 26368;
								else if (West == West::Low) return 26369;
								else return 26370;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26371;
								else if (West == West::Low) return 26372;
								else return 26373;
							else
								if (West == West::None) return 26374;
								else if (West == West::Low) return 26375;
								else return 26376;
						else
							if (Waterlogged)
								if (West == West::None) return 26377;
								else if (West == West::Low) return 26378;
								else return 26379;
							else
								if (West == West::None) return 26380;
								else if (West == West::Low) return 26381;
								else return 26382;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26383;
								else if (West == West::Low) return 26384;
								else return 26385;
							else
								if (West == West::None) return 26386;
								else if (West == West::Low) return 26387;
								else return 26388;
						else
							if (Waterlogged)
								if (West == West::None) return 26389;
								else if (West == West::Low) return 26390;
								else return 26391;
							else
								if (West == West::None) return 26392;
								else if (West == West::Low) return 26393;
								else return 26394;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26395;
								else if (West == West::Low) return 26396;
								else return 26397;
							else
								if (West == West::None) return 26398;
								else if (West == West::Low) return 26399;
								else return 26400;
						else
							if (Waterlogged)
								if (West == West::None) return 26401;
								else if (West == West::Low) return 26402;
								else return 26403;
							else
								if (West == West::None) return 26404;
								else if (West == West::Low) return 26405;
								else return 26406;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26407;
								else if (West == West::Low) return 26408;
								else return 26409;
							else
								if (West == West::None) return 26410;
								else if (West == West::Low) return 26411;
								else return 26412;
						else
							if (Waterlogged)
								if (West == West::None) return 26413;
								else if (West == West::Low) return 26414;
								else return 26415;
							else
								if (West == West::None) return 26416;
								else if (West == West::Low) return 26417;
								else return 26418;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26419;
								else if (West == West::Low) return 26420;
								else return 26421;
							else
								if (West == West::None) return 26422;
								else if (West == West::Low) return 26423;
								else return 26424;
						else
							if (Waterlogged)
								if (West == West::None) return 26425;
								else if (West == West::Low) return 26426;
								else return 26427;
							else
								if (West == West::None) return 26428;
								else if (West == West::Low) return 26429;
								else return 26430;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26431;
								else if (West == West::Low) return 26432;
								else return 26433;
							else
								if (West == West::None) return 26434;
								else if (West == West::Low) return 26435;
								else return 26436;
						else
							if (Waterlogged)
								if (West == West::None) return 26437;
								else if (West == West::Low) return 26438;
								else return 26439;
							else
								if (West == West::None) return 26440;
								else if (West == West::Low) return 26441;
								else return 26442;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26443;
								else if (West == West::Low) return 26444;
								else return 26445;
							else
								if (West == West::None) return 26446;
								else if (West == West::Low) return 26447;
								else return 26448;
						else
							if (Waterlogged)
								if (West == West::None) return 26449;
								else if (West == West::Low) return 26450;
								else return 26451;
							else
								if (West == West::None) return 26452;
								else if (West == West::Low) return 26453;
								else return 26454;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26455;
								else if (West == West::Low) return 26456;
								else return 26457;
							else
								if (West == West::None) return 26458;
								else if (West == West::Low) return 26459;
								else return 26460;
						else
							if (Waterlogged)
								if (West == West::None) return 26461;
								else if (West == West::Low) return 26462;
								else return 26463;
							else
								if (West == West::None) return 26464;
								else if (West == West::Low) return 26465;
								else return 26466;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26467;
								else if (West == West::Low) return 26468;
								else return 26469;
							else
								if (West == West::None) return 26470;
								else if (West == West::Low) return 26471;
								else return 26472;
						else
							if (Waterlogged)
								if (West == West::None) return 26473;
								else if (West == West::Low) return 26474;
								else return 26475;
							else
								if (West == West::None) return 26476;
								else if (West == West::Low) return 26477;
								else return 26478;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26479;
								else if (West == West::Low) return 26480;
								else return 26481;
							else
								if (West == West::None) return 26482;
								else if (West == West::Low) return 26483;
								else return 26484;
						else
							if (Waterlogged)
								if (West == West::None) return 26485;
								else if (West == West::Low) return 26486;
								else return 26487;
							else
								if (West == West::None) return 26488;
								else if (West == West::Low) return 26489;
								else return 26490;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26491;
								else if (West == West::Low) return 26492;
								else return 26493;
							else
								if (West == West::None) return 26494;
								else if (West == West::Low) return 26495;
								else return 26496;
						else
							if (Waterlogged)
								if (West == West::None) return 26497;
								else if (West == West::Low) return 26498;
								else return 26499;
							else
								if (West == West::None) return 26500;
								else if (West == West::Low) return 26501;
								else return 26502;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26503;
								else if (West == West::Low) return 26504;
								else return 26505;
							else
								if (West == West::None) return 26506;
								else if (West == West::Low) return 26507;
								else return 26508;
						else
							if (Waterlogged)
								if (West == West::None) return 26509;
								else if (West == West::Low) return 26510;
								else return 26511;
							else
								if (West == West::None) return 26512;
								else if (West == West::Low) return 26513;
								else return 26514;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26515;
								else if (West == West::Low) return 26516;
								else return 26517;
							else
								if (West == West::None) return 26518;
								else if (West == West::Low) return 26519;
								else return 26520;
						else
							if (Waterlogged)
								if (West == West::None) return 26521;
								else if (West == West::Low) return 26522;
								else return 26523;
							else
								if (West == West::None) return 26524;
								else if (West == West::Low) return 26525;
								else return 26526;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26527;
								else if (West == West::Low) return 26528;
								else return 26529;
							else
								if (West == West::None) return 26530;
								else if (West == West::Low) return 26531;
								else return 26532;
						else
							if (Waterlogged)
								if (West == West::None) return 26533;
								else if (West == West::Low) return 26534;
								else return 26535;
							else
								if (West == West::None) return 26536;
								else if (West == West::Low) return 26537;
								else return 26538;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26539;
								else if (West == West::Low) return 26540;
								else return 26541;
							else
								if (West == West::None) return 26542;
								else if (West == West::Low) return 26543;
								else return 26544;
						else
							if (Waterlogged)
								if (West == West::None) return 26545;
								else if (West == West::Low) return 26546;
								else return 26547;
							else
								if (West == West::None) return 26548;
								else if (West == West::Low) return 26549;
								else return 26550;
		}
		BlockState DeepslateBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace DeepslateBricks
	{
		constexpr BlockState DeepslateBricks()
		{
			return 26140;
		}
	}
	namespace DeepslateCoalOre
	{
		constexpr BlockState DeepslateCoalOre()
		{
			return 128;
		}
	}
	namespace DeepslateCopperOre
	{
		constexpr BlockState DeepslateCopperOre()
		{
			return 22943;
		}
	}
	namespace DeepslateDiamondOre
	{
		constexpr BlockState DeepslateDiamondOre()
		{
			return 4275;
		}
	}
	namespace DeepslateEmeraldOre
	{
		constexpr BlockState DeepslateEmeraldOre()
		{
			return 7512;
		}
	}
	namespace DeepslateGoldOre
	{
		constexpr BlockState DeepslateGoldOre()
		{
			return 124;
		}
	}
	namespace DeepslateIronOre
	{
		constexpr BlockState DeepslateIronOre()
		{
			return 126;
		}
	}
	namespace DeepslateLapisOre
	{
		constexpr BlockState DeepslateLapisOre()
		{
			return 521;
		}
	}
	namespace DeepslateRedstoneOre
	{
		constexpr BlockState DeepslateRedstoneOre(const bool Lit)
		{
			if (Lit) return 5736;
			else return 5737;
		}
		BlockState DeepslateRedstoneOre();
		bool Lit(BlockState Block);
	}
	namespace DeepslateTileSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DeepslateTileSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 25810;
				else return 25811;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 25812;
				else return 25813;
			else
				if (Waterlogged) return 25814;
				else return 25815;
		}
		BlockState DeepslateTileSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateTileStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DeepslateTileStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25730;
						else return 25731;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25732;
						else return 25733;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25734;
						else return 25735;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25736;
						else return 25737;
					else
						if (Waterlogged) return 25738;
						else return 25739;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25740;
						else return 25741;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25742;
						else return 25743;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25744;
						else return 25745;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25746;
						else return 25747;
					else
						if (Waterlogged) return 25748;
						else return 25749;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25750;
						else return 25751;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25752;
						else return 25753;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25754;
						else return 25755;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25756;
						else return 25757;
					else
						if (Waterlogged) return 25758;
						else return 25759;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25760;
						else return 25761;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25762;
						else return 25763;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25764;
						else return 25765;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25766;
						else return 25767;
					else
						if (Waterlogged) return 25768;
						else return 25769;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25770;
						else return 25771;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25772;
						else return 25773;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25774;
						else return 25775;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25776;
						else return 25777;
					else
						if (Waterlogged) return 25778;
						else return 25779;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25780;
						else return 25781;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25782;
						else return 25783;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25784;
						else return 25785;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25786;
						else return 25787;
					else
						if (Waterlogged) return 25788;
						else return 25789;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25790;
						else return 25791;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25792;
						else return 25793;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25794;
						else return 25795;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25796;
						else return 25797;
					else
						if (Waterlogged) return 25798;
						else return 25799;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25800;
						else return 25801;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25802;
						else return 25803;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25804;
						else return 25805;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25806;
						else return 25807;
					else
						if (Waterlogged) return 25808;
						else return 25809;
		}
		BlockState DeepslateTileStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DeepslateTileWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DeepslateTileWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25816;
								else if (West == West::Low) return 25817;
								else return 25818;
							else
								if (West == West::None) return 25819;
								else if (West == West::Low) return 25820;
								else return 25821;
						else
							if (Waterlogged)
								if (West == West::None) return 25822;
								else if (West == West::Low) return 25823;
								else return 25824;
							else
								if (West == West::None) return 25825;
								else if (West == West::Low) return 25826;
								else return 25827;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25828;
								else if (West == West::Low) return 25829;
								else return 25830;
							else
								if (West == West::None) return 25831;
								else if (West == West::Low) return 25832;
								else return 25833;
						else
							if (Waterlogged)
								if (West == West::None) return 25834;
								else if (West == West::Low) return 25835;
								else return 25836;
							else
								if (West == West::None) return 25837;
								else if (West == West::Low) return 25838;
								else return 25839;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25840;
								else if (West == West::Low) return 25841;
								else return 25842;
							else
								if (West == West::None) return 25843;
								else if (West == West::Low) return 25844;
								else return 25845;
						else
							if (Waterlogged)
								if (West == West::None) return 25846;
								else if (West == West::Low) return 25847;
								else return 25848;
							else
								if (West == West::None) return 25849;
								else if (West == West::Low) return 25850;
								else return 25851;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25852;
								else if (West == West::Low) return 25853;
								else return 25854;
							else
								if (West == West::None) return 25855;
								else if (West == West::Low) return 25856;
								else return 25857;
						else
							if (Waterlogged)
								if (West == West::None) return 25858;
								else if (West == West::Low) return 25859;
								else return 25860;
							else
								if (West == West::None) return 25861;
								else if (West == West::Low) return 25862;
								else return 25863;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25864;
								else if (West == West::Low) return 25865;
								else return 25866;
							else
								if (West == West::None) return 25867;
								else if (West == West::Low) return 25868;
								else return 25869;
						else
							if (Waterlogged)
								if (West == West::None) return 25870;
								else if (West == West::Low) return 25871;
								else return 25872;
							else
								if (West == West::None) return 25873;
								else if (West == West::Low) return 25874;
								else return 25875;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25876;
								else if (West == West::Low) return 25877;
								else return 25878;
							else
								if (West == West::None) return 25879;
								else if (West == West::Low) return 25880;
								else return 25881;
						else
							if (Waterlogged)
								if (West == West::None) return 25882;
								else if (West == West::Low) return 25883;
								else return 25884;
							else
								if (West == West::None) return 25885;
								else if (West == West::Low) return 25886;
								else return 25887;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25888;
								else if (West == West::Low) return 25889;
								else return 25890;
							else
								if (West == West::None) return 25891;
								else if (West == West::Low) return 25892;
								else return 25893;
						else
							if (Waterlogged)
								if (West == West::None) return 25894;
								else if (West == West::Low) return 25895;
								else return 25896;
							else
								if (West == West::None) return 25897;
								else if (West == West::Low) return 25898;
								else return 25899;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25900;
								else if (West == West::Low) return 25901;
								else return 25902;
							else
								if (West == West::None) return 25903;
								else if (West == West::Low) return 25904;
								else return 25905;
						else
							if (Waterlogged)
								if (West == West::None) return 25906;
								else if (West == West::Low) return 25907;
								else return 25908;
							else
								if (West == West::None) return 25909;
								else if (West == West::Low) return 25910;
								else return 25911;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25912;
								else if (West == West::Low) return 25913;
								else return 25914;
							else
								if (West == West::None) return 25915;
								else if (West == West::Low) return 25916;
								else return 25917;
						else
							if (Waterlogged)
								if (West == West::None) return 25918;
								else if (West == West::Low) return 25919;
								else return 25920;
							else
								if (West == West::None) return 25921;
								else if (West == West::Low) return 25922;
								else return 25923;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25924;
								else if (West == West::Low) return 25925;
								else return 25926;
							else
								if (West == West::None) return 25927;
								else if (West == West::Low) return 25928;
								else return 25929;
						else
							if (Waterlogged)
								if (West == West::None) return 25930;
								else if (West == West::Low) return 25931;
								else return 25932;
							else
								if (West == West::None) return 25933;
								else if (West == West::Low) return 25934;
								else return 25935;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25936;
								else if (West == West::Low) return 25937;
								else return 25938;
							else
								if (West == West::None) return 25939;
								else if (West == West::Low) return 25940;
								else return 25941;
						else
							if (Waterlogged)
								if (West == West::None) return 25942;
								else if (West == West::Low) return 25943;
								else return 25944;
							else
								if (West == West::None) return 25945;
								else if (West == West::Low) return 25946;
								else return 25947;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25948;
								else if (West == West::Low) return 25949;
								else return 25950;
							else
								if (West == West::None) return 25951;
								else if (West == West::Low) return 25952;
								else return 25953;
						else
							if (Waterlogged)
								if (West == West::None) return 25954;
								else if (West == West::Low) return 25955;
								else return 25956;
							else
								if (West == West::None) return 25957;
								else if (West == West::Low) return 25958;
								else return 25959;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25960;
								else if (West == West::Low) return 25961;
								else return 25962;
							else
								if (West == West::None) return 25963;
								else if (West == West::Low) return 25964;
								else return 25965;
						else
							if (Waterlogged)
								if (West == West::None) return 25966;
								else if (West == West::Low) return 25967;
								else return 25968;
							else
								if (West == West::None) return 25969;
								else if (West == West::Low) return 25970;
								else return 25971;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25972;
								else if (West == West::Low) return 25973;
								else return 25974;
							else
								if (West == West::None) return 25975;
								else if (West == West::Low) return 25976;
								else return 25977;
						else
							if (Waterlogged)
								if (West == West::None) return 25978;
								else if (West == West::Low) return 25979;
								else return 25980;
							else
								if (West == West::None) return 25981;
								else if (West == West::Low) return 25982;
								else return 25983;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25984;
								else if (West == West::Low) return 25985;
								else return 25986;
							else
								if (West == West::None) return 25987;
								else if (West == West::Low) return 25988;
								else return 25989;
						else
							if (Waterlogged)
								if (West == West::None) return 25990;
								else if (West == West::Low) return 25991;
								else return 25992;
							else
								if (West == West::None) return 25993;
								else if (West == West::Low) return 25994;
								else return 25995;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25996;
								else if (West == West::Low) return 25997;
								else return 25998;
							else
								if (West == West::None) return 25999;
								else if (West == West::Low) return 26000;
								else return 26001;
						else
							if (Waterlogged)
								if (West == West::None) return 26002;
								else if (West == West::Low) return 26003;
								else return 26004;
							else
								if (West == West::None) return 26005;
								else if (West == West::Low) return 26006;
								else return 26007;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26008;
								else if (West == West::Low) return 26009;
								else return 26010;
							else
								if (West == West::None) return 26011;
								else if (West == West::Low) return 26012;
								else return 26013;
						else
							if (Waterlogged)
								if (West == West::None) return 26014;
								else if (West == West::Low) return 26015;
								else return 26016;
							else
								if (West == West::None) return 26017;
								else if (West == West::Low) return 26018;
								else return 26019;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26020;
								else if (West == West::Low) return 26021;
								else return 26022;
							else
								if (West == West::None) return 26023;
								else if (West == West::Low) return 26024;
								else return 26025;
						else
							if (Waterlogged)
								if (West == West::None) return 26026;
								else if (West == West::Low) return 26027;
								else return 26028;
							else
								if (West == West::None) return 26029;
								else if (West == West::Low) return 26030;
								else return 26031;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26032;
								else if (West == West::Low) return 26033;
								else return 26034;
							else
								if (West == West::None) return 26035;
								else if (West == West::Low) return 26036;
								else return 26037;
						else
							if (Waterlogged)
								if (West == West::None) return 26038;
								else if (West == West::Low) return 26039;
								else return 26040;
							else
								if (West == West::None) return 26041;
								else if (West == West::Low) return 26042;
								else return 26043;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26044;
								else if (West == West::Low) return 26045;
								else return 26046;
							else
								if (West == West::None) return 26047;
								else if (West == West::Low) return 26048;
								else return 26049;
						else
							if (Waterlogged)
								if (West == West::None) return 26050;
								else if (West == West::Low) return 26051;
								else return 26052;
							else
								if (West == West::None) return 26053;
								else if (West == West::Low) return 26054;
								else return 26055;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26056;
								else if (West == West::Low) return 26057;
								else return 26058;
							else
								if (West == West::None) return 26059;
								else if (West == West::Low) return 26060;
								else return 26061;
						else
							if (Waterlogged)
								if (West == West::None) return 26062;
								else if (West == West::Low) return 26063;
								else return 26064;
							else
								if (West == West::None) return 26065;
								else if (West == West::Low) return 26066;
								else return 26067;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26068;
								else if (West == West::Low) return 26069;
								else return 26070;
							else
								if (West == West::None) return 26071;
								else if (West == West::Low) return 26072;
								else return 26073;
						else
							if (Waterlogged)
								if (West == West::None) return 26074;
								else if (West == West::Low) return 26075;
								else return 26076;
							else
								if (West == West::None) return 26077;
								else if (West == West::Low) return 26078;
								else return 26079;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26080;
								else if (West == West::Low) return 26081;
								else return 26082;
							else
								if (West == West::None) return 26083;
								else if (West == West::Low) return 26084;
								else return 26085;
						else
							if (Waterlogged)
								if (West == West::None) return 26086;
								else if (West == West::Low) return 26087;
								else return 26088;
							else
								if (West == West::None) return 26089;
								else if (West == West::Low) return 26090;
								else return 26091;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26092;
								else if (West == West::Low) return 26093;
								else return 26094;
							else
								if (West == West::None) return 26095;
								else if (West == West::Low) return 26096;
								else return 26097;
						else
							if (Waterlogged)
								if (West == West::None) return 26098;
								else if (West == West::Low) return 26099;
								else return 26100;
							else
								if (West == West::None) return 26101;
								else if (West == West::Low) return 26102;
								else return 26103;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26104;
								else if (West == West::Low) return 26105;
								else return 26106;
							else
								if (West == West::None) return 26107;
								else if (West == West::Low) return 26108;
								else return 26109;
						else
							if (Waterlogged)
								if (West == West::None) return 26110;
								else if (West == West::Low) return 26111;
								else return 26112;
							else
								if (West == West::None) return 26113;
								else if (West == West::Low) return 26114;
								else return 26115;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26116;
								else if (West == West::Low) return 26117;
								else return 26118;
							else
								if (West == West::None) return 26119;
								else if (West == West::Low) return 26120;
								else return 26121;
						else
							if (Waterlogged)
								if (West == West::None) return 26122;
								else if (West == West::Low) return 26123;
								else return 26124;
							else
								if (West == West::None) return 26125;
								else if (West == West::Low) return 26126;
								else return 26127;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 26128;
								else if (West == West::Low) return 26129;
								else return 26130;
							else
								if (West == West::None) return 26131;
								else if (West == West::Low) return 26132;
								else return 26133;
						else
							if (Waterlogged)
								if (West == West::None) return 26134;
								else if (West == West::Low) return 26135;
								else return 26136;
							else
								if (West == West::None) return 26137;
								else if (West == West::Low) return 26138;
								else return 26139;
		}
		BlockState DeepslateTileWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace DeepslateTiles
	{
		constexpr BlockState DeepslateTiles()
		{
			return 25729;
		}
	}
	namespace DetectorRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState DetectorRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1968;
					else return 1969;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 1970;
					else return 1971;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 1972;
					else return 1973;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 1974;
					else return 1975;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 1976;
					else return 1977;
				else
					if (Waterlogged) return 1978;
					else return 1979;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1980;
					else return 1981;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 1982;
					else return 1983;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 1984;
					else return 1985;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 1986;
					else return 1987;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 1988;
					else return 1989;
				else
					if (Waterlogged) return 1990;
					else return 1991;
		}
		BlockState DetectorRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DiamondBlock
	{
		constexpr BlockState DiamondBlock()
		{
			return 4276;
		}
	}
	namespace DiamondOre
	{
		constexpr BlockState DiamondOre()
		{
			return 4274;
		}
	}
	namespace Diorite
	{
		constexpr BlockState Diorite()
		{
			return 4;
		}
	}
	namespace DioriteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState DioriteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14154;
				else return 14155;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14156;
				else return 14157;
			else
				if (Waterlogged) return 14158;
				else return 14159;
		}
		BlockState DioriteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DioriteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState DioriteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14002;
						else return 14003;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14004;
						else return 14005;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14006;
						else return 14007;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14008;
						else return 14009;
					else
						if (Waterlogged) return 14010;
						else return 14011;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14012;
						else return 14013;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14014;
						else return 14015;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14016;
						else return 14017;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14018;
						else return 14019;
					else
						if (Waterlogged) return 14020;
						else return 14021;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14022;
						else return 14023;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14024;
						else return 14025;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14026;
						else return 14027;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14028;
						else return 14029;
					else
						if (Waterlogged) return 14030;
						else return 14031;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14032;
						else return 14033;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14034;
						else return 14035;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14036;
						else return 14037;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14038;
						else return 14039;
					else
						if (Waterlogged) return 14040;
						else return 14041;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14042;
						else return 14043;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14044;
						else return 14045;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14046;
						else return 14047;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14048;
						else return 14049;
					else
						if (Waterlogged) return 14050;
						else return 14051;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14052;
						else return 14053;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14054;
						else return 14055;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14056;
						else return 14057;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14058;
						else return 14059;
					else
						if (Waterlogged) return 14060;
						else return 14061;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14062;
						else return 14063;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14064;
						else return 14065;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14066;
						else return 14067;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14068;
						else return 14069;
					else
						if (Waterlogged) return 14070;
						else return 14071;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 14072;
						else return 14073;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 14074;
						else return 14075;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 14076;
						else return 14077;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 14078;
						else return 14079;
					else
						if (Waterlogged) return 14080;
						else return 14081;
		}
		BlockState DioriteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace DioriteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState DioriteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18048;
								else if (West == West::Low) return 18049;
								else return 18050;
							else
								if (West == West::None) return 18051;
								else if (West == West::Low) return 18052;
								else return 18053;
						else
							if (Waterlogged)
								if (West == West::None) return 18054;
								else if (West == West::Low) return 18055;
								else return 18056;
							else
								if (West == West::None) return 18057;
								else if (West == West::Low) return 18058;
								else return 18059;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18060;
								else if (West == West::Low) return 18061;
								else return 18062;
							else
								if (West == West::None) return 18063;
								else if (West == West::Low) return 18064;
								else return 18065;
						else
							if (Waterlogged)
								if (West == West::None) return 18066;
								else if (West == West::Low) return 18067;
								else return 18068;
							else
								if (West == West::None) return 18069;
								else if (West == West::Low) return 18070;
								else return 18071;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18072;
								else if (West == West::Low) return 18073;
								else return 18074;
							else
								if (West == West::None) return 18075;
								else if (West == West::Low) return 18076;
								else return 18077;
						else
							if (Waterlogged)
								if (West == West::None) return 18078;
								else if (West == West::Low) return 18079;
								else return 18080;
							else
								if (West == West::None) return 18081;
								else if (West == West::Low) return 18082;
								else return 18083;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18084;
								else if (West == West::Low) return 18085;
								else return 18086;
							else
								if (West == West::None) return 18087;
								else if (West == West::Low) return 18088;
								else return 18089;
						else
							if (Waterlogged)
								if (West == West::None) return 18090;
								else if (West == West::Low) return 18091;
								else return 18092;
							else
								if (West == West::None) return 18093;
								else if (West == West::Low) return 18094;
								else return 18095;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18096;
								else if (West == West::Low) return 18097;
								else return 18098;
							else
								if (West == West::None) return 18099;
								else if (West == West::Low) return 18100;
								else return 18101;
						else
							if (Waterlogged)
								if (West == West::None) return 18102;
								else if (West == West::Low) return 18103;
								else return 18104;
							else
								if (West == West::None) return 18105;
								else if (West == West::Low) return 18106;
								else return 18107;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18108;
								else if (West == West::Low) return 18109;
								else return 18110;
							else
								if (West == West::None) return 18111;
								else if (West == West::Low) return 18112;
								else return 18113;
						else
							if (Waterlogged)
								if (West == West::None) return 18114;
								else if (West == West::Low) return 18115;
								else return 18116;
							else
								if (West == West::None) return 18117;
								else if (West == West::Low) return 18118;
								else return 18119;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18120;
								else if (West == West::Low) return 18121;
								else return 18122;
							else
								if (West == West::None) return 18123;
								else if (West == West::Low) return 18124;
								else return 18125;
						else
							if (Waterlogged)
								if (West == West::None) return 18126;
								else if (West == West::Low) return 18127;
								else return 18128;
							else
								if (West == West::None) return 18129;
								else if (West == West::Low) return 18130;
								else return 18131;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18132;
								else if (West == West::Low) return 18133;
								else return 18134;
							else
								if (West == West::None) return 18135;
								else if (West == West::Low) return 18136;
								else return 18137;
						else
							if (Waterlogged)
								if (West == West::None) return 18138;
								else if (West == West::Low) return 18139;
								else return 18140;
							else
								if (West == West::None) return 18141;
								else if (West == West::Low) return 18142;
								else return 18143;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18144;
								else if (West == West::Low) return 18145;
								else return 18146;
							else
								if (West == West::None) return 18147;
								else if (West == West::Low) return 18148;
								else return 18149;
						else
							if (Waterlogged)
								if (West == West::None) return 18150;
								else if (West == West::Low) return 18151;
								else return 18152;
							else
								if (West == West::None) return 18153;
								else if (West == West::Low) return 18154;
								else return 18155;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18156;
								else if (West == West::Low) return 18157;
								else return 18158;
							else
								if (West == West::None) return 18159;
								else if (West == West::Low) return 18160;
								else return 18161;
						else
							if (Waterlogged)
								if (West == West::None) return 18162;
								else if (West == West::Low) return 18163;
								else return 18164;
							else
								if (West == West::None) return 18165;
								else if (West == West::Low) return 18166;
								else return 18167;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18168;
								else if (West == West::Low) return 18169;
								else return 18170;
							else
								if (West == West::None) return 18171;
								else if (West == West::Low) return 18172;
								else return 18173;
						else
							if (Waterlogged)
								if (West == West::None) return 18174;
								else if (West == West::Low) return 18175;
								else return 18176;
							else
								if (West == West::None) return 18177;
								else if (West == West::Low) return 18178;
								else return 18179;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18180;
								else if (West == West::Low) return 18181;
								else return 18182;
							else
								if (West == West::None) return 18183;
								else if (West == West::Low) return 18184;
								else return 18185;
						else
							if (Waterlogged)
								if (West == West::None) return 18186;
								else if (West == West::Low) return 18187;
								else return 18188;
							else
								if (West == West::None) return 18189;
								else if (West == West::Low) return 18190;
								else return 18191;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18192;
								else if (West == West::Low) return 18193;
								else return 18194;
							else
								if (West == West::None) return 18195;
								else if (West == West::Low) return 18196;
								else return 18197;
						else
							if (Waterlogged)
								if (West == West::None) return 18198;
								else if (West == West::Low) return 18199;
								else return 18200;
							else
								if (West == West::None) return 18201;
								else if (West == West::Low) return 18202;
								else return 18203;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18204;
								else if (West == West::Low) return 18205;
								else return 18206;
							else
								if (West == West::None) return 18207;
								else if (West == West::Low) return 18208;
								else return 18209;
						else
							if (Waterlogged)
								if (West == West::None) return 18210;
								else if (West == West::Low) return 18211;
								else return 18212;
							else
								if (West == West::None) return 18213;
								else if (West == West::Low) return 18214;
								else return 18215;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18216;
								else if (West == West::Low) return 18217;
								else return 18218;
							else
								if (West == West::None) return 18219;
								else if (West == West::Low) return 18220;
								else return 18221;
						else
							if (Waterlogged)
								if (West == West::None) return 18222;
								else if (West == West::Low) return 18223;
								else return 18224;
							else
								if (West == West::None) return 18225;
								else if (West == West::Low) return 18226;
								else return 18227;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18228;
								else if (West == West::Low) return 18229;
								else return 18230;
							else
								if (West == West::None) return 18231;
								else if (West == West::Low) return 18232;
								else return 18233;
						else
							if (Waterlogged)
								if (West == West::None) return 18234;
								else if (West == West::Low) return 18235;
								else return 18236;
							else
								if (West == West::None) return 18237;
								else if (West == West::Low) return 18238;
								else return 18239;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18240;
								else if (West == West::Low) return 18241;
								else return 18242;
							else
								if (West == West::None) return 18243;
								else if (West == West::Low) return 18244;
								else return 18245;
						else
							if (Waterlogged)
								if (West == West::None) return 18246;
								else if (West == West::Low) return 18247;
								else return 18248;
							else
								if (West == West::None) return 18249;
								else if (West == West::Low) return 18250;
								else return 18251;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18252;
								else if (West == West::Low) return 18253;
								else return 18254;
							else
								if (West == West::None) return 18255;
								else if (West == West::Low) return 18256;
								else return 18257;
						else
							if (Waterlogged)
								if (West == West::None) return 18258;
								else if (West == West::Low) return 18259;
								else return 18260;
							else
								if (West == West::None) return 18261;
								else if (West == West::Low) return 18262;
								else return 18263;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18264;
								else if (West == West::Low) return 18265;
								else return 18266;
							else
								if (West == West::None) return 18267;
								else if (West == West::Low) return 18268;
								else return 18269;
						else
							if (Waterlogged)
								if (West == West::None) return 18270;
								else if (West == West::Low) return 18271;
								else return 18272;
							else
								if (West == West::None) return 18273;
								else if (West == West::Low) return 18274;
								else return 18275;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18276;
								else if (West == West::Low) return 18277;
								else return 18278;
							else
								if (West == West::None) return 18279;
								else if (West == West::Low) return 18280;
								else return 18281;
						else
							if (Waterlogged)
								if (West == West::None) return 18282;
								else if (West == West::Low) return 18283;
								else return 18284;
							else
								if (West == West::None) return 18285;
								else if (West == West::Low) return 18286;
								else return 18287;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18288;
								else if (West == West::Low) return 18289;
								else return 18290;
							else
								if (West == West::None) return 18291;
								else if (West == West::Low) return 18292;
								else return 18293;
						else
							if (Waterlogged)
								if (West == West::None) return 18294;
								else if (West == West::Low) return 18295;
								else return 18296;
							else
								if (West == West::None) return 18297;
								else if (West == West::Low) return 18298;
								else return 18299;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18300;
								else if (West == West::Low) return 18301;
								else return 18302;
							else
								if (West == West::None) return 18303;
								else if (West == West::Low) return 18304;
								else return 18305;
						else
							if (Waterlogged)
								if (West == West::None) return 18306;
								else if (West == West::Low) return 18307;
								else return 18308;
							else
								if (West == West::None) return 18309;
								else if (West == West::Low) return 18310;
								else return 18311;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18312;
								else if (West == West::Low) return 18313;
								else return 18314;
							else
								if (West == West::None) return 18315;
								else if (West == West::Low) return 18316;
								else return 18317;
						else
							if (Waterlogged)
								if (West == West::None) return 18318;
								else if (West == West::Low) return 18319;
								else return 18320;
							else
								if (West == West::None) return 18321;
								else if (West == West::Low) return 18322;
								else return 18323;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18324;
								else if (West == West::Low) return 18325;
								else return 18326;
							else
								if (West == West::None) return 18327;
								else if (West == West::Low) return 18328;
								else return 18329;
						else
							if (Waterlogged)
								if (West == West::None) return 18330;
								else if (West == West::Low) return 18331;
								else return 18332;
							else
								if (West == West::None) return 18333;
								else if (West == West::Low) return 18334;
								else return 18335;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18336;
								else if (West == West::Low) return 18337;
								else return 18338;
							else
								if (West == West::None) return 18339;
								else if (West == West::Low) return 18340;
								else return 18341;
						else
							if (Waterlogged)
								if (West == West::None) return 18342;
								else if (West == West::Low) return 18343;
								else return 18344;
							else
								if (West == West::None) return 18345;
								else if (West == West::Low) return 18346;
								else return 18347;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18348;
								else if (West == West::Low) return 18349;
								else return 18350;
							else
								if (West == West::None) return 18351;
								else if (West == West::Low) return 18352;
								else return 18353;
						else
							if (Waterlogged)
								if (West == West::None) return 18354;
								else if (West == West::Low) return 18355;
								else return 18356;
							else
								if (West == West::None) return 18357;
								else if (West == West::Low) return 18358;
								else return 18359;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18360;
								else if (West == West::Low) return 18361;
								else return 18362;
							else
								if (West == West::None) return 18363;
								else if (West == West::Low) return 18364;
								else return 18365;
						else
							if (Waterlogged)
								if (West == West::None) return 18366;
								else if (West == West::Low) return 18367;
								else return 18368;
							else
								if (West == West::None) return 18369;
								else if (West == West::Low) return 18370;
								else return 18371;
		}
		BlockState DioriteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Dirt
	{
		constexpr BlockState Dirt()
		{
			return 10;
		}
	}
	namespace DirtPath
	{
		constexpr BlockState DirtPath()
		{
			return 12513;
		}
	}
	namespace Dispenser
	{
		constexpr BlockState Dispenser(const eBlockFace Facing, const bool Triggered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Triggered) return 523;
				else return 524;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Triggered) return 525;
				else return 526;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Triggered) return 527;
				else return 528;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Triggered) return 529;
				else return 530;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Triggered) return 531;
				else return 532;
			else
				if (Triggered) return 533;
				else return 534;
		}
		BlockState Dispenser();
		eBlockFace Facing(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace DragonEgg
	{
		constexpr BlockState DragonEgg()
		{
			return 7416;
		}
	}
	namespace DragonHead
	{
		constexpr BlockState DragonHead(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9027;
				else if (Rotation == 1) return 9028;
				else if (Rotation == 2) return 9029;
				else if (Rotation == 3) return 9030;
				else if (Rotation == 4) return 9031;
				else if (Rotation == 5) return 9032;
				else if (Rotation == 6) return 9033;
				else if (Rotation == 7) return 9034;
				else if (Rotation == 8) return 9035;
				else if (Rotation == 9) return 9036;
				else if (Rotation == 10) return 9037;
				else if (Rotation == 11) return 9038;
				else if (Rotation == 12) return 9039;
				else if (Rotation == 13) return 9040;
				else if (Rotation == 14) return 9041;
				else return 9042;
			else
				if (Rotation == 0) return 9043;
				else if (Rotation == 1) return 9044;
				else if (Rotation == 2) return 9045;
				else if (Rotation == 3) return 9046;
				else if (Rotation == 4) return 9047;
				else if (Rotation == 5) return 9048;
				else if (Rotation == 6) return 9049;
				else if (Rotation == 7) return 9050;
				else if (Rotation == 8) return 9051;
				else if (Rotation == 9) return 9052;
				else if (Rotation == 10) return 9053;
				else if (Rotation == 11) return 9054;
				else if (Rotation == 12) return 9055;
				else if (Rotation == 13) return 9056;
				else if (Rotation == 14) return 9057;
				else return 9058;
		}
		BlockState DragonHead();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace DragonWallHead
	{
		constexpr BlockState DragonWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9059;
				else return 9060;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9061;
				else return 9062;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9063;
				else return 9064;
			else
				if (Powered) return 9065;
				else return 9066;
		}
		BlockState DragonWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace DriedKelpBlock
	{
		constexpr BlockState DriedKelpBlock()
		{
			return 12787;
		}
	}
	namespace DripstoneBlock
	{
		constexpr BlockState DripstoneBlock()
		{
			return 24768;
		}
	}
	namespace Dropper
	{
		constexpr BlockState Dropper(const eBlockFace Facing, const bool Triggered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Triggered) return 9344;
				else return 9345;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Triggered) return 9346;
				else return 9347;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Triggered) return 9348;
				else return 9349;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Triggered) return 9350;
				else return 9351;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Triggered) return 9352;
				else return 9353;
			else
				if (Triggered) return 9354;
				else return 9355;
		}
		BlockState Dropper();
		eBlockFace Facing(BlockState Block);
		bool Triggered(BlockState Block);
	}
	namespace EmeraldBlock
	{
		constexpr BlockState EmeraldBlock()
		{
			return 7665;
		}
	}
	namespace EmeraldOre
	{
		constexpr BlockState EmeraldOre()
		{
			return 7511;
		}
	}
	namespace EnchantingTable
	{
		constexpr BlockState EnchantingTable()
		{
			return 7389;
		}
	}
	namespace EndGateway
	{
		constexpr BlockState EndGateway()
		{
			return 12514;
		}
	}
	namespace EndPortal
	{
		constexpr BlockState EndPortal()
		{
			return 7406;
		}
	}
	namespace EndPortalFrame
	{
		constexpr BlockState EndPortalFrame(const bool Eye, const eBlockFace Facing)
		{
			if (Eye)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7407;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7408;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7409;
				else return 7410;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 7411;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 7412;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 7413;
				else return 7414;
		}
		BlockState EndPortalFrame();
		bool Eye(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace EndRod
	{
		constexpr BlockState EndRod(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12334;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12335;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12336;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12337;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12338;
			else return 12339;
		}
		BlockState EndRod();
		eBlockFace Facing(BlockState Block);
	}
	namespace EndStone
	{
		constexpr BlockState EndStone()
		{
			return 7415;
		}
	}
	namespace EndStoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState EndStoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14112;
				else return 14113;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14114;
				else return 14115;
			else
				if (Waterlogged) return 14116;
				else return 14117;
		}
		BlockState EndStoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace EndStoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState EndStoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13362;
						else return 13363;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13364;
						else return 13365;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13366;
						else return 13367;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13368;
						else return 13369;
					else
						if (Waterlogged) return 13370;
						else return 13371;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13372;
						else return 13373;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13374;
						else return 13375;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13376;
						else return 13377;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13378;
						else return 13379;
					else
						if (Waterlogged) return 13380;
						else return 13381;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13382;
						else return 13383;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13384;
						else return 13385;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13386;
						else return 13387;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13388;
						else return 13389;
					else
						if (Waterlogged) return 13390;
						else return 13391;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13392;
						else return 13393;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13394;
						else return 13395;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13396;
						else return 13397;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13398;
						else return 13399;
					else
						if (Waterlogged) return 13400;
						else return 13401;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13402;
						else return 13403;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13404;
						else return 13405;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13406;
						else return 13407;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13408;
						else return 13409;
					else
						if (Waterlogged) return 13410;
						else return 13411;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13412;
						else return 13413;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13414;
						else return 13415;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13416;
						else return 13417;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13418;
						else return 13419;
					else
						if (Waterlogged) return 13420;
						else return 13421;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13422;
						else return 13423;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13424;
						else return 13425;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13426;
						else return 13427;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13428;
						else return 13429;
					else
						if (Waterlogged) return 13430;
						else return 13431;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13432;
						else return 13433;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13434;
						else return 13435;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13436;
						else return 13437;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13438;
						else return 13439;
					else
						if (Waterlogged) return 13440;
						else return 13441;
		}
		BlockState EndStoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace EndStoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState EndStoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17724;
								else if (West == West::Low) return 17725;
								else return 17726;
							else
								if (West == West::None) return 17727;
								else if (West == West::Low) return 17728;
								else return 17729;
						else
							if (Waterlogged)
								if (West == West::None) return 17730;
								else if (West == West::Low) return 17731;
								else return 17732;
							else
								if (West == West::None) return 17733;
								else if (West == West::Low) return 17734;
								else return 17735;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17736;
								else if (West == West::Low) return 17737;
								else return 17738;
							else
								if (West == West::None) return 17739;
								else if (West == West::Low) return 17740;
								else return 17741;
						else
							if (Waterlogged)
								if (West == West::None) return 17742;
								else if (West == West::Low) return 17743;
								else return 17744;
							else
								if (West == West::None) return 17745;
								else if (West == West::Low) return 17746;
								else return 17747;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17748;
								else if (West == West::Low) return 17749;
								else return 17750;
							else
								if (West == West::None) return 17751;
								else if (West == West::Low) return 17752;
								else return 17753;
						else
							if (Waterlogged)
								if (West == West::None) return 17754;
								else if (West == West::Low) return 17755;
								else return 17756;
							else
								if (West == West::None) return 17757;
								else if (West == West::Low) return 17758;
								else return 17759;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17760;
								else if (West == West::Low) return 17761;
								else return 17762;
							else
								if (West == West::None) return 17763;
								else if (West == West::Low) return 17764;
								else return 17765;
						else
							if (Waterlogged)
								if (West == West::None) return 17766;
								else if (West == West::Low) return 17767;
								else return 17768;
							else
								if (West == West::None) return 17769;
								else if (West == West::Low) return 17770;
								else return 17771;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17772;
								else if (West == West::Low) return 17773;
								else return 17774;
							else
								if (West == West::None) return 17775;
								else if (West == West::Low) return 17776;
								else return 17777;
						else
							if (Waterlogged)
								if (West == West::None) return 17778;
								else if (West == West::Low) return 17779;
								else return 17780;
							else
								if (West == West::None) return 17781;
								else if (West == West::Low) return 17782;
								else return 17783;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17784;
								else if (West == West::Low) return 17785;
								else return 17786;
							else
								if (West == West::None) return 17787;
								else if (West == West::Low) return 17788;
								else return 17789;
						else
							if (Waterlogged)
								if (West == West::None) return 17790;
								else if (West == West::Low) return 17791;
								else return 17792;
							else
								if (West == West::None) return 17793;
								else if (West == West::Low) return 17794;
								else return 17795;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17796;
								else if (West == West::Low) return 17797;
								else return 17798;
							else
								if (West == West::None) return 17799;
								else if (West == West::Low) return 17800;
								else return 17801;
						else
							if (Waterlogged)
								if (West == West::None) return 17802;
								else if (West == West::Low) return 17803;
								else return 17804;
							else
								if (West == West::None) return 17805;
								else if (West == West::Low) return 17806;
								else return 17807;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17808;
								else if (West == West::Low) return 17809;
								else return 17810;
							else
								if (West == West::None) return 17811;
								else if (West == West::Low) return 17812;
								else return 17813;
						else
							if (Waterlogged)
								if (West == West::None) return 17814;
								else if (West == West::Low) return 17815;
								else return 17816;
							else
								if (West == West::None) return 17817;
								else if (West == West::Low) return 17818;
								else return 17819;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17820;
								else if (West == West::Low) return 17821;
								else return 17822;
							else
								if (West == West::None) return 17823;
								else if (West == West::Low) return 17824;
								else return 17825;
						else
							if (Waterlogged)
								if (West == West::None) return 17826;
								else if (West == West::Low) return 17827;
								else return 17828;
							else
								if (West == West::None) return 17829;
								else if (West == West::Low) return 17830;
								else return 17831;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17832;
								else if (West == West::Low) return 17833;
								else return 17834;
							else
								if (West == West::None) return 17835;
								else if (West == West::Low) return 17836;
								else return 17837;
						else
							if (Waterlogged)
								if (West == West::None) return 17838;
								else if (West == West::Low) return 17839;
								else return 17840;
							else
								if (West == West::None) return 17841;
								else if (West == West::Low) return 17842;
								else return 17843;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17844;
								else if (West == West::Low) return 17845;
								else return 17846;
							else
								if (West == West::None) return 17847;
								else if (West == West::Low) return 17848;
								else return 17849;
						else
							if (Waterlogged)
								if (West == West::None) return 17850;
								else if (West == West::Low) return 17851;
								else return 17852;
							else
								if (West == West::None) return 17853;
								else if (West == West::Low) return 17854;
								else return 17855;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17856;
								else if (West == West::Low) return 17857;
								else return 17858;
							else
								if (West == West::None) return 17859;
								else if (West == West::Low) return 17860;
								else return 17861;
						else
							if (Waterlogged)
								if (West == West::None) return 17862;
								else if (West == West::Low) return 17863;
								else return 17864;
							else
								if (West == West::None) return 17865;
								else if (West == West::Low) return 17866;
								else return 17867;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17868;
								else if (West == West::Low) return 17869;
								else return 17870;
							else
								if (West == West::None) return 17871;
								else if (West == West::Low) return 17872;
								else return 17873;
						else
							if (Waterlogged)
								if (West == West::None) return 17874;
								else if (West == West::Low) return 17875;
								else return 17876;
							else
								if (West == West::None) return 17877;
								else if (West == West::Low) return 17878;
								else return 17879;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17880;
								else if (West == West::Low) return 17881;
								else return 17882;
							else
								if (West == West::None) return 17883;
								else if (West == West::Low) return 17884;
								else return 17885;
						else
							if (Waterlogged)
								if (West == West::None) return 17886;
								else if (West == West::Low) return 17887;
								else return 17888;
							else
								if (West == West::None) return 17889;
								else if (West == West::Low) return 17890;
								else return 17891;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17892;
								else if (West == West::Low) return 17893;
								else return 17894;
							else
								if (West == West::None) return 17895;
								else if (West == West::Low) return 17896;
								else return 17897;
						else
							if (Waterlogged)
								if (West == West::None) return 17898;
								else if (West == West::Low) return 17899;
								else return 17900;
							else
								if (West == West::None) return 17901;
								else if (West == West::Low) return 17902;
								else return 17903;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17904;
								else if (West == West::Low) return 17905;
								else return 17906;
							else
								if (West == West::None) return 17907;
								else if (West == West::Low) return 17908;
								else return 17909;
						else
							if (Waterlogged)
								if (West == West::None) return 17910;
								else if (West == West::Low) return 17911;
								else return 17912;
							else
								if (West == West::None) return 17913;
								else if (West == West::Low) return 17914;
								else return 17915;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17916;
								else if (West == West::Low) return 17917;
								else return 17918;
							else
								if (West == West::None) return 17919;
								else if (West == West::Low) return 17920;
								else return 17921;
						else
							if (Waterlogged)
								if (West == West::None) return 17922;
								else if (West == West::Low) return 17923;
								else return 17924;
							else
								if (West == West::None) return 17925;
								else if (West == West::Low) return 17926;
								else return 17927;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17928;
								else if (West == West::Low) return 17929;
								else return 17930;
							else
								if (West == West::None) return 17931;
								else if (West == West::Low) return 17932;
								else return 17933;
						else
							if (Waterlogged)
								if (West == West::None) return 17934;
								else if (West == West::Low) return 17935;
								else return 17936;
							else
								if (West == West::None) return 17937;
								else if (West == West::Low) return 17938;
								else return 17939;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17940;
								else if (West == West::Low) return 17941;
								else return 17942;
							else
								if (West == West::None) return 17943;
								else if (West == West::Low) return 17944;
								else return 17945;
						else
							if (Waterlogged)
								if (West == West::None) return 17946;
								else if (West == West::Low) return 17947;
								else return 17948;
							else
								if (West == West::None) return 17949;
								else if (West == West::Low) return 17950;
								else return 17951;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17952;
								else if (West == West::Low) return 17953;
								else return 17954;
							else
								if (West == West::None) return 17955;
								else if (West == West::Low) return 17956;
								else return 17957;
						else
							if (Waterlogged)
								if (West == West::None) return 17958;
								else if (West == West::Low) return 17959;
								else return 17960;
							else
								if (West == West::None) return 17961;
								else if (West == West::Low) return 17962;
								else return 17963;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17964;
								else if (West == West::Low) return 17965;
								else return 17966;
							else
								if (West == West::None) return 17967;
								else if (West == West::Low) return 17968;
								else return 17969;
						else
							if (Waterlogged)
								if (West == West::None) return 17970;
								else if (West == West::Low) return 17971;
								else return 17972;
							else
								if (West == West::None) return 17973;
								else if (West == West::Low) return 17974;
								else return 17975;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17976;
								else if (West == West::Low) return 17977;
								else return 17978;
							else
								if (West == West::None) return 17979;
								else if (West == West::Low) return 17980;
								else return 17981;
						else
							if (Waterlogged)
								if (West == West::None) return 17982;
								else if (West == West::Low) return 17983;
								else return 17984;
							else
								if (West == West::None) return 17985;
								else if (West == West::Low) return 17986;
								else return 17987;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17988;
								else if (West == West::Low) return 17989;
								else return 17990;
							else
								if (West == West::None) return 17991;
								else if (West == West::Low) return 17992;
								else return 17993;
						else
							if (Waterlogged)
								if (West == West::None) return 17994;
								else if (West == West::Low) return 17995;
								else return 17996;
							else
								if (West == West::None) return 17997;
								else if (West == West::Low) return 17998;
								else return 17999;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18000;
								else if (West == West::Low) return 18001;
								else return 18002;
							else
								if (West == West::None) return 18003;
								else if (West == West::Low) return 18004;
								else return 18005;
						else
							if (Waterlogged)
								if (West == West::None) return 18006;
								else if (West == West::Low) return 18007;
								else return 18008;
							else
								if (West == West::None) return 18009;
								else if (West == West::Low) return 18010;
								else return 18011;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18012;
								else if (West == West::Low) return 18013;
								else return 18014;
							else
								if (West == West::None) return 18015;
								else if (West == West::Low) return 18016;
								else return 18017;
						else
							if (Waterlogged)
								if (West == West::None) return 18018;
								else if (West == West::Low) return 18019;
								else return 18020;
							else
								if (West == West::None) return 18021;
								else if (West == West::Low) return 18022;
								else return 18023;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18024;
								else if (West == West::Low) return 18025;
								else return 18026;
							else
								if (West == West::None) return 18027;
								else if (West == West::Low) return 18028;
								else return 18029;
						else
							if (Waterlogged)
								if (West == West::None) return 18030;
								else if (West == West::Low) return 18031;
								else return 18032;
							else
								if (West == West::None) return 18033;
								else if (West == West::Low) return 18034;
								else return 18035;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 18036;
								else if (West == West::Low) return 18037;
								else return 18038;
							else
								if (West == West::None) return 18039;
								else if (West == West::Low) return 18040;
								else return 18041;
						else
							if (Waterlogged)
								if (West == West::None) return 18042;
								else if (West == West::Low) return 18043;
								else return 18044;
							else
								if (West == West::None) return 18045;
								else if (West == West::Low) return 18046;
								else return 18047;
		}
		BlockState EndStoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace EndStoneBricks
	{
		constexpr BlockState EndStoneBricks()
		{
			return 12494;
		}
	}
	namespace EnderChest
	{
		constexpr BlockState EnderChest(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 7513;
				else return 7514;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 7515;
				else return 7516;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 7517;
				else return 7518;
			else
				if (Waterlogged) return 7519;
				else return 7520;
		}
		BlockState EnderChest();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedChiseledCopper
	{
		constexpr BlockState ExposedChiseledCopper()
		{
			return 22950;
		}
	}
	namespace ExposedCopper
	{
		constexpr BlockState ExposedCopper()
		{
			return 22939;
		}
	}
	namespace ExposedCopperBulb
	{
		constexpr BlockState ExposedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24696;
				else return 24697;
			else
				if (Powered) return 24698;
				else return 24699;
		}
		BlockState ExposedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace ExposedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState ExposedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23716;
							else return 23717;
						else
							if (Powered) return 23718;
							else return 23719;
					else
						if (Open)
							if (Powered) return 23720;
							else return 23721;
						else
							if (Powered) return 23722;
							else return 23723;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23724;
							else return 23725;
						else
							if (Powered) return 23726;
							else return 23727;
					else
						if (Open)
							if (Powered) return 23728;
							else return 23729;
						else
							if (Powered) return 23730;
							else return 23731;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23732;
							else return 23733;
						else
							if (Powered) return 23734;
							else return 23735;
					else
						if (Open)
							if (Powered) return 23736;
							else return 23737;
						else
							if (Powered) return 23738;
							else return 23739;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23740;
							else return 23741;
						else
							if (Powered) return 23742;
							else return 23743;
					else
						if (Open)
							if (Powered) return 23744;
							else return 23745;
						else
							if (Powered) return 23746;
							else return 23747;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23748;
							else return 23749;
						else
							if (Powered) return 23750;
							else return 23751;
					else
						if (Open)
							if (Powered) return 23752;
							else return 23753;
						else
							if (Powered) return 23754;
							else return 23755;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23756;
							else return 23757;
						else
							if (Powered) return 23758;
							else return 23759;
					else
						if (Open)
							if (Powered) return 23760;
							else return 23761;
						else
							if (Powered) return 23762;
							else return 23763;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23764;
							else return 23765;
						else
							if (Powered) return 23766;
							else return 23767;
					else
						if (Open)
							if (Powered) return 23768;
							else return 23769;
						else
							if (Powered) return 23770;
							else return 23771;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23772;
							else return 23773;
						else
							if (Powered) return 23774;
							else return 23775;
					else
						if (Open)
							if (Powered) return 23776;
							else return 23777;
						else
							if (Powered) return 23778;
							else return 23779;
		}
		BlockState ExposedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace ExposedCopperGrate
	{
		constexpr BlockState ExposedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24678;
			else return 24679;
		}
		BlockState ExposedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState ExposedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24228;
							else return 24229;
						else
							if (Waterlogged) return 24230;
							else return 24231;
					else
						if (Powered)
							if (Waterlogged) return 24232;
							else return 24233;
						else
							if (Waterlogged) return 24234;
							else return 24235;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24236;
							else return 24237;
						else
							if (Waterlogged) return 24238;
							else return 24239;
					else
						if (Powered)
							if (Waterlogged) return 24240;
							else return 24241;
						else
							if (Waterlogged) return 24242;
							else return 24243;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24244;
							else return 24245;
						else
							if (Waterlogged) return 24246;
							else return 24247;
					else
						if (Powered)
							if (Waterlogged) return 24248;
							else return 24249;
						else
							if (Waterlogged) return 24250;
							else return 24251;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24252;
							else return 24253;
						else
							if (Waterlogged) return 24254;
							else return 24255;
					else
						if (Powered)
							if (Waterlogged) return 24256;
							else return 24257;
						else
							if (Waterlogged) return 24258;
							else return 24259;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24260;
							else return 24261;
						else
							if (Waterlogged) return 24262;
							else return 24263;
					else
						if (Powered)
							if (Waterlogged) return 24264;
							else return 24265;
						else
							if (Waterlogged) return 24266;
							else return 24267;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24268;
							else return 24269;
						else
							if (Waterlogged) return 24270;
							else return 24271;
					else
						if (Powered)
							if (Waterlogged) return 24272;
							else return 24273;
						else
							if (Waterlogged) return 24274;
							else return 24275;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24276;
							else return 24277;
						else
							if (Waterlogged) return 24278;
							else return 24279;
					else
						if (Powered)
							if (Waterlogged) return 24280;
							else return 24281;
						else
							if (Waterlogged) return 24282;
							else return 24283;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24284;
							else return 24285;
						else
							if (Waterlogged) return 24286;
							else return 24287;
					else
						if (Powered)
							if (Waterlogged) return 24288;
							else return 24289;
						else
							if (Waterlogged) return 24290;
							else return 24291;
		}
		BlockState ExposedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCutCopper
	{
		constexpr BlockState ExposedCutCopper()
		{
			return 22946;
		}
	}
	namespace ExposedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState ExposedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23288;
				else return 23289;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23290;
				else return 23291;
			else
				if (Waterlogged) return 23292;
				else return 23293;
		}
		BlockState ExposedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace ExposedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState ExposedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23116;
						else return 23117;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23118;
						else return 23119;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23120;
						else return 23121;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23122;
						else return 23123;
					else
						if (Waterlogged) return 23124;
						else return 23125;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23126;
						else return 23127;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23128;
						else return 23129;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23130;
						else return 23131;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23132;
						else return 23133;
					else
						if (Waterlogged) return 23134;
						else return 23135;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23136;
						else return 23137;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23138;
						else return 23139;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23140;
						else return 23141;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23142;
						else return 23143;
					else
						if (Waterlogged) return 23144;
						else return 23145;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23146;
						else return 23147;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23148;
						else return 23149;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23150;
						else return 23151;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23152;
						else return 23153;
					else
						if (Waterlogged) return 23154;
						else return 23155;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23156;
						else return 23157;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23158;
						else return 23159;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23160;
						else return 23161;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23162;
						else return 23163;
					else
						if (Waterlogged) return 23164;
						else return 23165;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23166;
						else return 23167;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23168;
						else return 23169;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23170;
						else return 23171;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23172;
						else return 23173;
					else
						if (Waterlogged) return 23174;
						else return 23175;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23176;
						else return 23177;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23178;
						else return 23179;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23180;
						else return 23181;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23182;
						else return 23183;
					else
						if (Waterlogged) return 23184;
						else return 23185;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23186;
						else return 23187;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23188;
						else return 23189;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23190;
						else return 23191;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23192;
						else return 23193;
					else
						if (Waterlogged) return 23194;
						else return 23195;
		}
		BlockState ExposedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Farmland
	{
		constexpr BlockState Farmland(const int Moisture)
		{
			if (Moisture == 0) return 4286;
			else if (Moisture == 1) return 4287;
			else if (Moisture == 2) return 4288;
			else if (Moisture == 3) return 4289;
			else if (Moisture == 4) return 4290;
			else if (Moisture == 5) return 4291;
			else if (Moisture == 6) return 4292;
			else return 4293;
		}
		BlockState Farmland();
		int Moisture(BlockState Block);
	}
	namespace Fern
	{
		constexpr BlockState Fern()
		{
			return 2006;
		}
	}
	namespace Fire
	{
		constexpr BlockState Fire(const int Age, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Age == 0)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2360;
								else return 2361;
							else
								if (West) return 2362;
								else return 2363;
						else
							if (Up)
								if (West) return 2364;
								else return 2365;
							else
								if (West) return 2366;
								else return 2367;
					else
						if (South)
							if (Up)
								if (West) return 2368;
								else return 2369;
							else
								if (West) return 2370;
								else return 2371;
						else
							if (Up)
								if (West) return 2372;
								else return 2373;
							else
								if (West) return 2374;
								else return 2375;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2376;
								else return 2377;
							else
								if (West) return 2378;
								else return 2379;
						else
							if (Up)
								if (West) return 2380;
								else return 2381;
							else
								if (West) return 2382;
								else return 2383;
					else
						if (South)
							if (Up)
								if (West) return 2384;
								else return 2385;
							else
								if (West) return 2386;
								else return 2387;
						else
							if (Up)
								if (West) return 2388;
								else return 2389;
							else
								if (West) return 2390;
								else return 2391;
			else if (Age == 1)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2392;
								else return 2393;
							else
								if (West) return 2394;
								else return 2395;
						else
							if (Up)
								if (West) return 2396;
								else return 2397;
							else
								if (West) return 2398;
								else return 2399;
					else
						if (South)
							if (Up)
								if (West) return 2400;
								else return 2401;
							else
								if (West) return 2402;
								else return 2403;
						else
							if (Up)
								if (West) return 2404;
								else return 2405;
							else
								if (West) return 2406;
								else return 2407;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2408;
								else return 2409;
							else
								if (West) return 2410;
								else return 2411;
						else
							if (Up)
								if (West) return 2412;
								else return 2413;
							else
								if (West) return 2414;
								else return 2415;
					else
						if (South)
							if (Up)
								if (West) return 2416;
								else return 2417;
							else
								if (West) return 2418;
								else return 2419;
						else
							if (Up)
								if (West) return 2420;
								else return 2421;
							else
								if (West) return 2422;
								else return 2423;
			else if (Age == 2)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2424;
								else return 2425;
							else
								if (West) return 2426;
								else return 2427;
						else
							if (Up)
								if (West) return 2428;
								else return 2429;
							else
								if (West) return 2430;
								else return 2431;
					else
						if (South)
							if (Up)
								if (West) return 2432;
								else return 2433;
							else
								if (West) return 2434;
								else return 2435;
						else
							if (Up)
								if (West) return 2436;
								else return 2437;
							else
								if (West) return 2438;
								else return 2439;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2440;
								else return 2441;
							else
								if (West) return 2442;
								else return 2443;
						else
							if (Up)
								if (West) return 2444;
								else return 2445;
							else
								if (West) return 2446;
								else return 2447;
					else
						if (South)
							if (Up)
								if (West) return 2448;
								else return 2449;
							else
								if (West) return 2450;
								else return 2451;
						else
							if (Up)
								if (West) return 2452;
								else return 2453;
							else
								if (West) return 2454;
								else return 2455;
			else if (Age == 3)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2456;
								else return 2457;
							else
								if (West) return 2458;
								else return 2459;
						else
							if (Up)
								if (West) return 2460;
								else return 2461;
							else
								if (West) return 2462;
								else return 2463;
					else
						if (South)
							if (Up)
								if (West) return 2464;
								else return 2465;
							else
								if (West) return 2466;
								else return 2467;
						else
							if (Up)
								if (West) return 2468;
								else return 2469;
							else
								if (West) return 2470;
								else return 2471;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2472;
								else return 2473;
							else
								if (West) return 2474;
								else return 2475;
						else
							if (Up)
								if (West) return 2476;
								else return 2477;
							else
								if (West) return 2478;
								else return 2479;
					else
						if (South)
							if (Up)
								if (West) return 2480;
								else return 2481;
							else
								if (West) return 2482;
								else return 2483;
						else
							if (Up)
								if (West) return 2484;
								else return 2485;
							else
								if (West) return 2486;
								else return 2487;
			else if (Age == 4)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2488;
								else return 2489;
							else
								if (West) return 2490;
								else return 2491;
						else
							if (Up)
								if (West) return 2492;
								else return 2493;
							else
								if (West) return 2494;
								else return 2495;
					else
						if (South)
							if (Up)
								if (West) return 2496;
								else return 2497;
							else
								if (West) return 2498;
								else return 2499;
						else
							if (Up)
								if (West) return 2500;
								else return 2501;
							else
								if (West) return 2502;
								else return 2503;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2504;
								else return 2505;
							else
								if (West) return 2506;
								else return 2507;
						else
							if (Up)
								if (West) return 2508;
								else return 2509;
							else
								if (West) return 2510;
								else return 2511;
					else
						if (South)
							if (Up)
								if (West) return 2512;
								else return 2513;
							else
								if (West) return 2514;
								else return 2515;
						else
							if (Up)
								if (West) return 2516;
								else return 2517;
							else
								if (West) return 2518;
								else return 2519;
			else if (Age == 5)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2520;
								else return 2521;
							else
								if (West) return 2522;
								else return 2523;
						else
							if (Up)
								if (West) return 2524;
								else return 2525;
							else
								if (West) return 2526;
								else return 2527;
					else
						if (South)
							if (Up)
								if (West) return 2528;
								else return 2529;
							else
								if (West) return 2530;
								else return 2531;
						else
							if (Up)
								if (West) return 2532;
								else return 2533;
							else
								if (West) return 2534;
								else return 2535;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2536;
								else return 2537;
							else
								if (West) return 2538;
								else return 2539;
						else
							if (Up)
								if (West) return 2540;
								else return 2541;
							else
								if (West) return 2542;
								else return 2543;
					else
						if (South)
							if (Up)
								if (West) return 2544;
								else return 2545;
							else
								if (West) return 2546;
								else return 2547;
						else
							if (Up)
								if (West) return 2548;
								else return 2549;
							else
								if (West) return 2550;
								else return 2551;
			else if (Age == 6)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2552;
								else return 2553;
							else
								if (West) return 2554;
								else return 2555;
						else
							if (Up)
								if (West) return 2556;
								else return 2557;
							else
								if (West) return 2558;
								else return 2559;
					else
						if (South)
							if (Up)
								if (West) return 2560;
								else return 2561;
							else
								if (West) return 2562;
								else return 2563;
						else
							if (Up)
								if (West) return 2564;
								else return 2565;
							else
								if (West) return 2566;
								else return 2567;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2568;
								else return 2569;
							else
								if (West) return 2570;
								else return 2571;
						else
							if (Up)
								if (West) return 2572;
								else return 2573;
							else
								if (West) return 2574;
								else return 2575;
					else
						if (South)
							if (Up)
								if (West) return 2576;
								else return 2577;
							else
								if (West) return 2578;
								else return 2579;
						else
							if (Up)
								if (West) return 2580;
								else return 2581;
							else
								if (West) return 2582;
								else return 2583;
			else if (Age == 7)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2584;
								else return 2585;
							else
								if (West) return 2586;
								else return 2587;
						else
							if (Up)
								if (West) return 2588;
								else return 2589;
							else
								if (West) return 2590;
								else return 2591;
					else
						if (South)
							if (Up)
								if (West) return 2592;
								else return 2593;
							else
								if (West) return 2594;
								else return 2595;
						else
							if (Up)
								if (West) return 2596;
								else return 2597;
							else
								if (West) return 2598;
								else return 2599;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2600;
								else return 2601;
							else
								if (West) return 2602;
								else return 2603;
						else
							if (Up)
								if (West) return 2604;
								else return 2605;
							else
								if (West) return 2606;
								else return 2607;
					else
						if (South)
							if (Up)
								if (West) return 2608;
								else return 2609;
							else
								if (West) return 2610;
								else return 2611;
						else
							if (Up)
								if (West) return 2612;
								else return 2613;
							else
								if (West) return 2614;
								else return 2615;
			else if (Age == 8)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2616;
								else return 2617;
							else
								if (West) return 2618;
								else return 2619;
						else
							if (Up)
								if (West) return 2620;
								else return 2621;
							else
								if (West) return 2622;
								else return 2623;
					else
						if (South)
							if (Up)
								if (West) return 2624;
								else return 2625;
							else
								if (West) return 2626;
								else return 2627;
						else
							if (Up)
								if (West) return 2628;
								else return 2629;
							else
								if (West) return 2630;
								else return 2631;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2632;
								else return 2633;
							else
								if (West) return 2634;
								else return 2635;
						else
							if (Up)
								if (West) return 2636;
								else return 2637;
							else
								if (West) return 2638;
								else return 2639;
					else
						if (South)
							if (Up)
								if (West) return 2640;
								else return 2641;
							else
								if (West) return 2642;
								else return 2643;
						else
							if (Up)
								if (West) return 2644;
								else return 2645;
							else
								if (West) return 2646;
								else return 2647;
			else if (Age == 9)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2648;
								else return 2649;
							else
								if (West) return 2650;
								else return 2651;
						else
							if (Up)
								if (West) return 2652;
								else return 2653;
							else
								if (West) return 2654;
								else return 2655;
					else
						if (South)
							if (Up)
								if (West) return 2656;
								else return 2657;
							else
								if (West) return 2658;
								else return 2659;
						else
							if (Up)
								if (West) return 2660;
								else return 2661;
							else
								if (West) return 2662;
								else return 2663;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2664;
								else return 2665;
							else
								if (West) return 2666;
								else return 2667;
						else
							if (Up)
								if (West) return 2668;
								else return 2669;
							else
								if (West) return 2670;
								else return 2671;
					else
						if (South)
							if (Up)
								if (West) return 2672;
								else return 2673;
							else
								if (West) return 2674;
								else return 2675;
						else
							if (Up)
								if (West) return 2676;
								else return 2677;
							else
								if (West) return 2678;
								else return 2679;
			else if (Age == 10)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2680;
								else return 2681;
							else
								if (West) return 2682;
								else return 2683;
						else
							if (Up)
								if (West) return 2684;
								else return 2685;
							else
								if (West) return 2686;
								else return 2687;
					else
						if (South)
							if (Up)
								if (West) return 2688;
								else return 2689;
							else
								if (West) return 2690;
								else return 2691;
						else
							if (Up)
								if (West) return 2692;
								else return 2693;
							else
								if (West) return 2694;
								else return 2695;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2696;
								else return 2697;
							else
								if (West) return 2698;
								else return 2699;
						else
							if (Up)
								if (West) return 2700;
								else return 2701;
							else
								if (West) return 2702;
								else return 2703;
					else
						if (South)
							if (Up)
								if (West) return 2704;
								else return 2705;
							else
								if (West) return 2706;
								else return 2707;
						else
							if (Up)
								if (West) return 2708;
								else return 2709;
							else
								if (West) return 2710;
								else return 2711;
			else if (Age == 11)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2712;
								else return 2713;
							else
								if (West) return 2714;
								else return 2715;
						else
							if (Up)
								if (West) return 2716;
								else return 2717;
							else
								if (West) return 2718;
								else return 2719;
					else
						if (South)
							if (Up)
								if (West) return 2720;
								else return 2721;
							else
								if (West) return 2722;
								else return 2723;
						else
							if (Up)
								if (West) return 2724;
								else return 2725;
							else
								if (West) return 2726;
								else return 2727;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2728;
								else return 2729;
							else
								if (West) return 2730;
								else return 2731;
						else
							if (Up)
								if (West) return 2732;
								else return 2733;
							else
								if (West) return 2734;
								else return 2735;
					else
						if (South)
							if (Up)
								if (West) return 2736;
								else return 2737;
							else
								if (West) return 2738;
								else return 2739;
						else
							if (Up)
								if (West) return 2740;
								else return 2741;
							else
								if (West) return 2742;
								else return 2743;
			else if (Age == 12)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2744;
								else return 2745;
							else
								if (West) return 2746;
								else return 2747;
						else
							if (Up)
								if (West) return 2748;
								else return 2749;
							else
								if (West) return 2750;
								else return 2751;
					else
						if (South)
							if (Up)
								if (West) return 2752;
								else return 2753;
							else
								if (West) return 2754;
								else return 2755;
						else
							if (Up)
								if (West) return 2756;
								else return 2757;
							else
								if (West) return 2758;
								else return 2759;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2760;
								else return 2761;
							else
								if (West) return 2762;
								else return 2763;
						else
							if (Up)
								if (West) return 2764;
								else return 2765;
							else
								if (West) return 2766;
								else return 2767;
					else
						if (South)
							if (Up)
								if (West) return 2768;
								else return 2769;
							else
								if (West) return 2770;
								else return 2771;
						else
							if (Up)
								if (West) return 2772;
								else return 2773;
							else
								if (West) return 2774;
								else return 2775;
			else if (Age == 13)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2776;
								else return 2777;
							else
								if (West) return 2778;
								else return 2779;
						else
							if (Up)
								if (West) return 2780;
								else return 2781;
							else
								if (West) return 2782;
								else return 2783;
					else
						if (South)
							if (Up)
								if (West) return 2784;
								else return 2785;
							else
								if (West) return 2786;
								else return 2787;
						else
							if (Up)
								if (West) return 2788;
								else return 2789;
							else
								if (West) return 2790;
								else return 2791;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2792;
								else return 2793;
							else
								if (West) return 2794;
								else return 2795;
						else
							if (Up)
								if (West) return 2796;
								else return 2797;
							else
								if (West) return 2798;
								else return 2799;
					else
						if (South)
							if (Up)
								if (West) return 2800;
								else return 2801;
							else
								if (West) return 2802;
								else return 2803;
						else
							if (Up)
								if (West) return 2804;
								else return 2805;
							else
								if (West) return 2806;
								else return 2807;
			else if (Age == 14)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2808;
								else return 2809;
							else
								if (West) return 2810;
								else return 2811;
						else
							if (Up)
								if (West) return 2812;
								else return 2813;
							else
								if (West) return 2814;
								else return 2815;
					else
						if (South)
							if (Up)
								if (West) return 2816;
								else return 2817;
							else
								if (West) return 2818;
								else return 2819;
						else
							if (Up)
								if (West) return 2820;
								else return 2821;
							else
								if (West) return 2822;
								else return 2823;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2824;
								else return 2825;
							else
								if (West) return 2826;
								else return 2827;
						else
							if (Up)
								if (West) return 2828;
								else return 2829;
							else
								if (West) return 2830;
								else return 2831;
					else
						if (South)
							if (Up)
								if (West) return 2832;
								else return 2833;
							else
								if (West) return 2834;
								else return 2835;
						else
							if (Up)
								if (West) return 2836;
								else return 2837;
							else
								if (West) return 2838;
								else return 2839;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 2840;
								else return 2841;
							else
								if (West) return 2842;
								else return 2843;
						else
							if (Up)
								if (West) return 2844;
								else return 2845;
							else
								if (West) return 2846;
								else return 2847;
					else
						if (South)
							if (Up)
								if (West) return 2848;
								else return 2849;
							else
								if (West) return 2850;
								else return 2851;
						else
							if (Up)
								if (West) return 2852;
								else return 2853;
							else
								if (West) return 2854;
								else return 2855;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 2856;
								else return 2857;
							else
								if (West) return 2858;
								else return 2859;
						else
							if (Up)
								if (West) return 2860;
								else return 2861;
							else
								if (West) return 2862;
								else return 2863;
					else
						if (South)
							if (Up)
								if (West) return 2864;
								else return 2865;
							else
								if (West) return 2866;
								else return 2867;
						else
							if (Up)
								if (West) return 2868;
								else return 2869;
							else
								if (West) return 2870;
								else return 2871;
		}
		BlockState Fire();
		int Age(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace FireCoral
	{
		constexpr BlockState FireCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12829;
			else return 12830;
		}
		BlockState FireCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace FireCoralBlock
	{
		constexpr BlockState FireCoralBlock()
		{
			return 12811;
		}
	}
	namespace FireCoralFan
	{
		constexpr BlockState FireCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12849;
			else return 12850;
		}
		BlockState FireCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace FireCoralWallFan
	{
		constexpr BlockState FireCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12917;
				else return 12918;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12919;
				else return 12920;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12921;
				else return 12922;
			else
				if (Waterlogged) return 12923;
				else return 12924;
		}
		BlockState FireCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace FletchingTable
	{
		constexpr BlockState FletchingTable()
		{
			return 18437;
		}
	}
	namespace FlowerPot
	{
		constexpr BlockState FlowerPot()
		{
			return 8567;
		}
	}
	namespace FloweringAzalea
	{
		constexpr BlockState FloweringAzalea()
		{
			return 24825;
		}
	}
	namespace FloweringAzaleaLeaves
	{
		constexpr BlockState FloweringAzaleaLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 489;
					else return 490;
				else
					if (Waterlogged) return 491;
					else return 492;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 493;
					else return 494;
				else
					if (Waterlogged) return 495;
					else return 496;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 497;
					else return 498;
				else
					if (Waterlogged) return 499;
					else return 500;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 501;
					else return 502;
				else
					if (Waterlogged) return 503;
					else return 504;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 505;
					else return 506;
				else
					if (Waterlogged) return 507;
					else return 508;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 509;
					else return 510;
				else
					if (Waterlogged) return 511;
					else return 512;
			else
				if (Persistent)
					if (Waterlogged) return 513;
					else return 514;
				else
					if (Waterlogged) return 515;
					else return 516;
		}
		BlockState FloweringAzaleaLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Frogspawn
	{
		constexpr BlockState Frogspawn()
		{
			return 26572;
		}
	}
	namespace FrostedIce
	{
		constexpr BlockState FrostedIce(const int Age)
		{
			if (Age == 0) return 12539;
			else if (Age == 1) return 12540;
			else if (Age == 2) return 12541;
			else return 12542;
		}
		BlockState FrostedIce();
		int Age(BlockState Block);
	}
	namespace Furnace
	{
		constexpr BlockState Furnace(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 4294;
				else return 4295;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 4296;
				else return 4297;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 4298;
				else return 4299;
			else
				if (Lit) return 4300;
				else return 4301;
		}
		BlockState Furnace();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace GildedBlackstone
	{
		constexpr BlockState GildedBlackstone()
		{
			return 20285;
		}
	}
	namespace Glass
	{
		constexpr BlockState Glass()
		{
			return 519;
		}
	}
	namespace GlassPane
	{
		constexpr BlockState GlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6779;
							else return 6780;
						else
							if (West) return 6781;
							else return 6782;
					else
						if (Waterlogged)
							if (West) return 6783;
							else return 6784;
						else
							if (West) return 6785;
							else return 6786;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6787;
							else return 6788;
						else
							if (West) return 6789;
							else return 6790;
					else
						if (Waterlogged)
							if (West) return 6791;
							else return 6792;
						else
							if (West) return 6793;
							else return 6794;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6795;
							else return 6796;
						else
							if (West) return 6797;
							else return 6798;
					else
						if (Waterlogged)
							if (West) return 6799;
							else return 6800;
						else
							if (West) return 6801;
							else return 6802;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6803;
							else return 6804;
						else
							if (West) return 6805;
							else return 6806;
					else
						if (Waterlogged)
							if (West) return 6807;
							else return 6808;
						else
							if (West) return 6809;
							else return 6810;
		}
		BlockState GlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GlowLichen
	{
		constexpr BlockState GlowLichen(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool Waterlogged, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6869;
									else return 6870;
								else
									if (West) return 6871;
									else return 6872;
							else
								if (Waterlogged)
									if (West) return 6873;
									else return 6874;
								else
									if (West) return 6875;
									else return 6876;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6877;
									else return 6878;
								else
									if (West) return 6879;
									else return 6880;
							else
								if (Waterlogged)
									if (West) return 6881;
									else return 6882;
								else
									if (West) return 6883;
									else return 6884;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6885;
									else return 6886;
								else
									if (West) return 6887;
									else return 6888;
							else
								if (Waterlogged)
									if (West) return 6889;
									else return 6890;
								else
									if (West) return 6891;
									else return 6892;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6893;
									else return 6894;
								else
									if (West) return 6895;
									else return 6896;
							else
								if (Waterlogged)
									if (West) return 6897;
									else return 6898;
								else
									if (West) return 6899;
									else return 6900;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6901;
									else return 6902;
								else
									if (West) return 6903;
									else return 6904;
							else
								if (Waterlogged)
									if (West) return 6905;
									else return 6906;
								else
									if (West) return 6907;
									else return 6908;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6909;
									else return 6910;
								else
									if (West) return 6911;
									else return 6912;
							else
								if (Waterlogged)
									if (West) return 6913;
									else return 6914;
								else
									if (West) return 6915;
									else return 6916;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6917;
									else return 6918;
								else
									if (West) return 6919;
									else return 6920;
							else
								if (Waterlogged)
									if (West) return 6921;
									else return 6922;
								else
									if (West) return 6923;
									else return 6924;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6925;
									else return 6926;
								else
									if (West) return 6927;
									else return 6928;
							else
								if (Waterlogged)
									if (West) return 6929;
									else return 6930;
								else
									if (West) return 6931;
									else return 6932;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6933;
									else return 6934;
								else
									if (West) return 6935;
									else return 6936;
							else
								if (Waterlogged)
									if (West) return 6937;
									else return 6938;
								else
									if (West) return 6939;
									else return 6940;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6941;
									else return 6942;
								else
									if (West) return 6943;
									else return 6944;
							else
								if (Waterlogged)
									if (West) return 6945;
									else return 6946;
								else
									if (West) return 6947;
									else return 6948;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6949;
									else return 6950;
								else
									if (West) return 6951;
									else return 6952;
							else
								if (Waterlogged)
									if (West) return 6953;
									else return 6954;
								else
									if (West) return 6955;
									else return 6956;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6957;
									else return 6958;
								else
									if (West) return 6959;
									else return 6960;
							else
								if (Waterlogged)
									if (West) return 6961;
									else return 6962;
								else
									if (West) return 6963;
									else return 6964;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6965;
									else return 6966;
								else
									if (West) return 6967;
									else return 6968;
							else
								if (Waterlogged)
									if (West) return 6969;
									else return 6970;
								else
									if (West) return 6971;
									else return 6972;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6973;
									else return 6974;
								else
									if (West) return 6975;
									else return 6976;
							else
								if (Waterlogged)
									if (West) return 6977;
									else return 6978;
								else
									if (West) return 6979;
									else return 6980;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 6981;
									else return 6982;
								else
									if (West) return 6983;
									else return 6984;
							else
								if (Waterlogged)
									if (West) return 6985;
									else return 6986;
								else
									if (West) return 6987;
									else return 6988;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 6989;
									else return 6990;
								else
									if (West) return 6991;
									else return 6992;
							else
								if (Waterlogged)
									if (West) return 6993;
									else return 6994;
								else
									if (West) return 6995;
									else return 6996;
		}
		BlockState GlowLichen();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Glowstone
	{
		constexpr BlockState Glowstone()
		{
			return 5863;
		}
	}
	namespace GoldBlock
	{
		constexpr BlockState GoldBlock()
		{
			return 2091;
		}
	}
	namespace GoldOre
	{
		constexpr BlockState GoldOre()
		{
			return 123;
		}
	}
	namespace Granite
	{
		constexpr BlockState Granite()
		{
			return 2;
		}
	}
	namespace GraniteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState GraniteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14130;
				else return 14131;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14132;
				else return 14133;
			else
				if (Waterlogged) return 14134;
				else return 14135;
		}
		BlockState GraniteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GraniteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState GraniteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13682;
						else return 13683;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13684;
						else return 13685;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13686;
						else return 13687;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13688;
						else return 13689;
					else
						if (Waterlogged) return 13690;
						else return 13691;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13692;
						else return 13693;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13694;
						else return 13695;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13696;
						else return 13697;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13698;
						else return 13699;
					else
						if (Waterlogged) return 13700;
						else return 13701;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13702;
						else return 13703;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13704;
						else return 13705;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13706;
						else return 13707;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13708;
						else return 13709;
					else
						if (Waterlogged) return 13710;
						else return 13711;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13712;
						else return 13713;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13714;
						else return 13715;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13716;
						else return 13717;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13718;
						else return 13719;
					else
						if (Waterlogged) return 13720;
						else return 13721;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13722;
						else return 13723;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13724;
						else return 13725;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13726;
						else return 13727;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13728;
						else return 13729;
					else
						if (Waterlogged) return 13730;
						else return 13731;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13732;
						else return 13733;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13734;
						else return 13735;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13736;
						else return 13737;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13738;
						else return 13739;
					else
						if (Waterlogged) return 13740;
						else return 13741;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13742;
						else return 13743;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13744;
						else return 13745;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13746;
						else return 13747;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13748;
						else return 13749;
					else
						if (Waterlogged) return 13750;
						else return 13751;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13752;
						else return 13753;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13754;
						else return 13755;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13756;
						else return 13757;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13758;
						else return 13759;
					else
						if (Waterlogged) return 13760;
						else return 13761;
		}
		BlockState GraniteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GraniteWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState GraniteWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15456;
								else if (West == West::Low) return 15457;
								else return 15458;
							else
								if (West == West::None) return 15459;
								else if (West == West::Low) return 15460;
								else return 15461;
						else
							if (Waterlogged)
								if (West == West::None) return 15462;
								else if (West == West::Low) return 15463;
								else return 15464;
							else
								if (West == West::None) return 15465;
								else if (West == West::Low) return 15466;
								else return 15467;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15468;
								else if (West == West::Low) return 15469;
								else return 15470;
							else
								if (West == West::None) return 15471;
								else if (West == West::Low) return 15472;
								else return 15473;
						else
							if (Waterlogged)
								if (West == West::None) return 15474;
								else if (West == West::Low) return 15475;
								else return 15476;
							else
								if (West == West::None) return 15477;
								else if (West == West::Low) return 15478;
								else return 15479;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15480;
								else if (West == West::Low) return 15481;
								else return 15482;
							else
								if (West == West::None) return 15483;
								else if (West == West::Low) return 15484;
								else return 15485;
						else
							if (Waterlogged)
								if (West == West::None) return 15486;
								else if (West == West::Low) return 15487;
								else return 15488;
							else
								if (West == West::None) return 15489;
								else if (West == West::Low) return 15490;
								else return 15491;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15492;
								else if (West == West::Low) return 15493;
								else return 15494;
							else
								if (West == West::None) return 15495;
								else if (West == West::Low) return 15496;
								else return 15497;
						else
							if (Waterlogged)
								if (West == West::None) return 15498;
								else if (West == West::Low) return 15499;
								else return 15500;
							else
								if (West == West::None) return 15501;
								else if (West == West::Low) return 15502;
								else return 15503;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15504;
								else if (West == West::Low) return 15505;
								else return 15506;
							else
								if (West == West::None) return 15507;
								else if (West == West::Low) return 15508;
								else return 15509;
						else
							if (Waterlogged)
								if (West == West::None) return 15510;
								else if (West == West::Low) return 15511;
								else return 15512;
							else
								if (West == West::None) return 15513;
								else if (West == West::Low) return 15514;
								else return 15515;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15516;
								else if (West == West::Low) return 15517;
								else return 15518;
							else
								if (West == West::None) return 15519;
								else if (West == West::Low) return 15520;
								else return 15521;
						else
							if (Waterlogged)
								if (West == West::None) return 15522;
								else if (West == West::Low) return 15523;
								else return 15524;
							else
								if (West == West::None) return 15525;
								else if (West == West::Low) return 15526;
								else return 15527;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15528;
								else if (West == West::Low) return 15529;
								else return 15530;
							else
								if (West == West::None) return 15531;
								else if (West == West::Low) return 15532;
								else return 15533;
						else
							if (Waterlogged)
								if (West == West::None) return 15534;
								else if (West == West::Low) return 15535;
								else return 15536;
							else
								if (West == West::None) return 15537;
								else if (West == West::Low) return 15538;
								else return 15539;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15540;
								else if (West == West::Low) return 15541;
								else return 15542;
							else
								if (West == West::None) return 15543;
								else if (West == West::Low) return 15544;
								else return 15545;
						else
							if (Waterlogged)
								if (West == West::None) return 15546;
								else if (West == West::Low) return 15547;
								else return 15548;
							else
								if (West == West::None) return 15549;
								else if (West == West::Low) return 15550;
								else return 15551;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15552;
								else if (West == West::Low) return 15553;
								else return 15554;
							else
								if (West == West::None) return 15555;
								else if (West == West::Low) return 15556;
								else return 15557;
						else
							if (Waterlogged)
								if (West == West::None) return 15558;
								else if (West == West::Low) return 15559;
								else return 15560;
							else
								if (West == West::None) return 15561;
								else if (West == West::Low) return 15562;
								else return 15563;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15564;
								else if (West == West::Low) return 15565;
								else return 15566;
							else
								if (West == West::None) return 15567;
								else if (West == West::Low) return 15568;
								else return 15569;
						else
							if (Waterlogged)
								if (West == West::None) return 15570;
								else if (West == West::Low) return 15571;
								else return 15572;
							else
								if (West == West::None) return 15573;
								else if (West == West::Low) return 15574;
								else return 15575;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15576;
								else if (West == West::Low) return 15577;
								else return 15578;
							else
								if (West == West::None) return 15579;
								else if (West == West::Low) return 15580;
								else return 15581;
						else
							if (Waterlogged)
								if (West == West::None) return 15582;
								else if (West == West::Low) return 15583;
								else return 15584;
							else
								if (West == West::None) return 15585;
								else if (West == West::Low) return 15586;
								else return 15587;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15588;
								else if (West == West::Low) return 15589;
								else return 15590;
							else
								if (West == West::None) return 15591;
								else if (West == West::Low) return 15592;
								else return 15593;
						else
							if (Waterlogged)
								if (West == West::None) return 15594;
								else if (West == West::Low) return 15595;
								else return 15596;
							else
								if (West == West::None) return 15597;
								else if (West == West::Low) return 15598;
								else return 15599;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15600;
								else if (West == West::Low) return 15601;
								else return 15602;
							else
								if (West == West::None) return 15603;
								else if (West == West::Low) return 15604;
								else return 15605;
						else
							if (Waterlogged)
								if (West == West::None) return 15606;
								else if (West == West::Low) return 15607;
								else return 15608;
							else
								if (West == West::None) return 15609;
								else if (West == West::Low) return 15610;
								else return 15611;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15612;
								else if (West == West::Low) return 15613;
								else return 15614;
							else
								if (West == West::None) return 15615;
								else if (West == West::Low) return 15616;
								else return 15617;
						else
							if (Waterlogged)
								if (West == West::None) return 15618;
								else if (West == West::Low) return 15619;
								else return 15620;
							else
								if (West == West::None) return 15621;
								else if (West == West::Low) return 15622;
								else return 15623;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15624;
								else if (West == West::Low) return 15625;
								else return 15626;
							else
								if (West == West::None) return 15627;
								else if (West == West::Low) return 15628;
								else return 15629;
						else
							if (Waterlogged)
								if (West == West::None) return 15630;
								else if (West == West::Low) return 15631;
								else return 15632;
							else
								if (West == West::None) return 15633;
								else if (West == West::Low) return 15634;
								else return 15635;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15636;
								else if (West == West::Low) return 15637;
								else return 15638;
							else
								if (West == West::None) return 15639;
								else if (West == West::Low) return 15640;
								else return 15641;
						else
							if (Waterlogged)
								if (West == West::None) return 15642;
								else if (West == West::Low) return 15643;
								else return 15644;
							else
								if (West == West::None) return 15645;
								else if (West == West::Low) return 15646;
								else return 15647;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15648;
								else if (West == West::Low) return 15649;
								else return 15650;
							else
								if (West == West::None) return 15651;
								else if (West == West::Low) return 15652;
								else return 15653;
						else
							if (Waterlogged)
								if (West == West::None) return 15654;
								else if (West == West::Low) return 15655;
								else return 15656;
							else
								if (West == West::None) return 15657;
								else if (West == West::Low) return 15658;
								else return 15659;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15660;
								else if (West == West::Low) return 15661;
								else return 15662;
							else
								if (West == West::None) return 15663;
								else if (West == West::Low) return 15664;
								else return 15665;
						else
							if (Waterlogged)
								if (West == West::None) return 15666;
								else if (West == West::Low) return 15667;
								else return 15668;
							else
								if (West == West::None) return 15669;
								else if (West == West::Low) return 15670;
								else return 15671;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15672;
								else if (West == West::Low) return 15673;
								else return 15674;
							else
								if (West == West::None) return 15675;
								else if (West == West::Low) return 15676;
								else return 15677;
						else
							if (Waterlogged)
								if (West == West::None) return 15678;
								else if (West == West::Low) return 15679;
								else return 15680;
							else
								if (West == West::None) return 15681;
								else if (West == West::Low) return 15682;
								else return 15683;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15684;
								else if (West == West::Low) return 15685;
								else return 15686;
							else
								if (West == West::None) return 15687;
								else if (West == West::Low) return 15688;
								else return 15689;
						else
							if (Waterlogged)
								if (West == West::None) return 15690;
								else if (West == West::Low) return 15691;
								else return 15692;
							else
								if (West == West::None) return 15693;
								else if (West == West::Low) return 15694;
								else return 15695;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15696;
								else if (West == West::Low) return 15697;
								else return 15698;
							else
								if (West == West::None) return 15699;
								else if (West == West::Low) return 15700;
								else return 15701;
						else
							if (Waterlogged)
								if (West == West::None) return 15702;
								else if (West == West::Low) return 15703;
								else return 15704;
							else
								if (West == West::None) return 15705;
								else if (West == West::Low) return 15706;
								else return 15707;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15708;
								else if (West == West::Low) return 15709;
								else return 15710;
							else
								if (West == West::None) return 15711;
								else if (West == West::Low) return 15712;
								else return 15713;
						else
							if (Waterlogged)
								if (West == West::None) return 15714;
								else if (West == West::Low) return 15715;
								else return 15716;
							else
								if (West == West::None) return 15717;
								else if (West == West::Low) return 15718;
								else return 15719;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15720;
								else if (West == West::Low) return 15721;
								else return 15722;
							else
								if (West == West::None) return 15723;
								else if (West == West::Low) return 15724;
								else return 15725;
						else
							if (Waterlogged)
								if (West == West::None) return 15726;
								else if (West == West::Low) return 15727;
								else return 15728;
							else
								if (West == West::None) return 15729;
								else if (West == West::Low) return 15730;
								else return 15731;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15732;
								else if (West == West::Low) return 15733;
								else return 15734;
							else
								if (West == West::None) return 15735;
								else if (West == West::Low) return 15736;
								else return 15737;
						else
							if (Waterlogged)
								if (West == West::None) return 15738;
								else if (West == West::Low) return 15739;
								else return 15740;
							else
								if (West == West::None) return 15741;
								else if (West == West::Low) return 15742;
								else return 15743;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15744;
								else if (West == West::Low) return 15745;
								else return 15746;
							else
								if (West == West::None) return 15747;
								else if (West == West::Low) return 15748;
								else return 15749;
						else
							if (Waterlogged)
								if (West == West::None) return 15750;
								else if (West == West::Low) return 15751;
								else return 15752;
							else
								if (West == West::None) return 15753;
								else if (West == West::Low) return 15754;
								else return 15755;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15756;
								else if (West == West::Low) return 15757;
								else return 15758;
							else
								if (West == West::None) return 15759;
								else if (West == West::Low) return 15760;
								else return 15761;
						else
							if (Waterlogged)
								if (West == West::None) return 15762;
								else if (West == West::Low) return 15763;
								else return 15764;
							else
								if (West == West::None) return 15765;
								else if (West == West::Low) return 15766;
								else return 15767;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15768;
								else if (West == West::Low) return 15769;
								else return 15770;
							else
								if (West == West::None) return 15771;
								else if (West == West::Low) return 15772;
								else return 15773;
						else
							if (Waterlogged)
								if (West == West::None) return 15774;
								else if (West == West::Low) return 15775;
								else return 15776;
							else
								if (West == West::None) return 15777;
								else if (West == West::Low) return 15778;
								else return 15779;
		}
		BlockState GraniteWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace GrassBlock
	{
		constexpr BlockState GrassBlock(const bool Snowy)
		{
			if (Snowy) return 8;
			else return 9;
		}
		BlockState GrassBlock();
		bool Snowy(BlockState Block);
	}
	namespace Gravel
	{
		constexpr BlockState Gravel()
		{
			return 118;
		}
	}
	namespace GrayBanner
	{
		constexpr BlockState GrayBanner(const int Rotation)
		{
			if (Rotation == 0) return 10871;
			else if (Rotation == 1) return 10872;
			else if (Rotation == 2) return 10873;
			else if (Rotation == 3) return 10874;
			else if (Rotation == 4) return 10875;
			else if (Rotation == 5) return 10876;
			else if (Rotation == 6) return 10877;
			else if (Rotation == 7) return 10878;
			else if (Rotation == 8) return 10879;
			else if (Rotation == 9) return 10880;
			else if (Rotation == 10) return 10881;
			else if (Rotation == 11) return 10882;
			else if (Rotation == 12) return 10883;
			else if (Rotation == 13) return 10884;
			else if (Rotation == 14) return 10885;
			else return 10886;
		}
		BlockState GrayBanner();
		int Rotation(BlockState Block);
	}
	namespace GrayBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState GrayBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1800;
					else return 1801;
				else
					if (Part == Part::Head) return 1802;
					else return 1803;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1804;
					else return 1805;
				else
					if (Part == Part::Head) return 1806;
					else return 1807;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1808;
					else return 1809;
				else
					if (Part == Part::Head) return 1810;
					else return 1811;
			else
				if (Occupied)
					if (Part == Part::Head) return 1812;
					else return 1813;
				else
					if (Part == Part::Head) return 1814;
					else return 1815;
		}
		BlockState GrayBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace GrayCandle
	{
		constexpr BlockState GrayCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20853;
					else return 20854;
				else
					if (Waterlogged) return 20855;
					else return 20856;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20857;
					else return 20858;
				else
					if (Waterlogged) return 20859;
					else return 20860;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20861;
					else return 20862;
				else
					if (Waterlogged) return 20863;
					else return 20864;
			else
				if (Lit)
					if (Waterlogged) return 20865;
					else return 20866;
				else
					if (Waterlogged) return 20867;
					else return 20868;
		}
		BlockState GrayCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GrayCandleCake
	{
		constexpr BlockState GrayCandleCake(const bool Lit)
		{
			if (Lit) return 21013;
			else return 21014;
		}
		BlockState GrayCandleCake();
		bool Lit(BlockState Block);
	}
	namespace GrayCarpet
	{
		constexpr BlockState GrayCarpet()
		{
			return 10735;
		}
	}
	namespace GrayConcrete
	{
		constexpr BlockState GrayConcrete()
		{
			return 12735;
		}
	}
	namespace GrayConcretePowder
	{
		constexpr BlockState GrayConcretePowder()
		{
			return 12751;
		}
	}
	namespace GrayGlazedTerracotta
	{
		constexpr BlockState GrayGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12692;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12693;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12694;
			else return 12695;
		}
		BlockState GrayGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayShulkerBox
	{
		constexpr BlockState GrayShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12610;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12611;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12612;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12613;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12614;
			else return 12615;
		}
		BlockState GrayShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayStainedGlass
	{
		constexpr BlockState GrayStainedGlass()
		{
			return 5952;
		}
	}
	namespace GrayStainedGlassPane
	{
		constexpr BlockState GrayStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9596;
							else return 9597;
						else
							if (West) return 9598;
							else return 9599;
					else
						if (Waterlogged)
							if (West) return 9600;
							else return 9601;
						else
							if (West) return 9602;
							else return 9603;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9604;
							else return 9605;
						else
							if (West) return 9606;
							else return 9607;
					else
						if (Waterlogged)
							if (West) return 9608;
							else return 9609;
						else
							if (West) return 9610;
							else return 9611;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9612;
							else return 9613;
						else
							if (West) return 9614;
							else return 9615;
					else
						if (Waterlogged)
							if (West) return 9616;
							else return 9617;
						else
							if (West) return 9618;
							else return 9619;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9620;
							else return 9621;
						else
							if (West) return 9622;
							else return 9623;
					else
						if (Waterlogged)
							if (West) return 9624;
							else return 9625;
						else
							if (West) return 9626;
							else return 9627;
		}
		BlockState GrayStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GrayTerracotta
	{
		constexpr BlockState GrayTerracotta()
		{
			return 9363;
		}
	}
	namespace GrayWallBanner
	{
		constexpr BlockState GrayWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11043;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11044;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11045;
			else return 11046;
		}
		BlockState GrayWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace GrayWool
	{
		constexpr BlockState GrayWool()
		{
			return 2054;
		}
	}
	namespace GreenBanner
	{
		constexpr BlockState GreenBanner(const int Rotation)
		{
			if (Rotation == 0) return 10967;
			else if (Rotation == 1) return 10968;
			else if (Rotation == 2) return 10969;
			else if (Rotation == 3) return 10970;
			else if (Rotation == 4) return 10971;
			else if (Rotation == 5) return 10972;
			else if (Rotation == 6) return 10973;
			else if (Rotation == 7) return 10974;
			else if (Rotation == 8) return 10975;
			else if (Rotation == 9) return 10976;
			else if (Rotation == 10) return 10977;
			else if (Rotation == 11) return 10978;
			else if (Rotation == 12) return 10979;
			else if (Rotation == 13) return 10980;
			else if (Rotation == 14) return 10981;
			else return 10982;
		}
		BlockState GreenBanner();
		int Rotation(BlockState Block);
	}
	namespace GreenBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState GreenBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1896;
					else return 1897;
				else
					if (Part == Part::Head) return 1898;
					else return 1899;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1900;
					else return 1901;
				else
					if (Part == Part::Head) return 1902;
					else return 1903;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1904;
					else return 1905;
				else
					if (Part == Part::Head) return 1906;
					else return 1907;
			else
				if (Occupied)
					if (Part == Part::Head) return 1908;
					else return 1909;
				else
					if (Part == Part::Head) return 1910;
					else return 1911;
		}
		BlockState GreenBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace GreenCandle
	{
		constexpr BlockState GreenCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20949;
					else return 20950;
				else
					if (Waterlogged) return 20951;
					else return 20952;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20953;
					else return 20954;
				else
					if (Waterlogged) return 20955;
					else return 20956;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20957;
					else return 20958;
				else
					if (Waterlogged) return 20959;
					else return 20960;
			else
				if (Lit)
					if (Waterlogged) return 20961;
					else return 20962;
				else
					if (Waterlogged) return 20963;
					else return 20964;
		}
		BlockState GreenCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace GreenCandleCake
	{
		constexpr BlockState GreenCandleCake(const bool Lit)
		{
			if (Lit) return 21025;
			else return 21026;
		}
		BlockState GreenCandleCake();
		bool Lit(BlockState Block);
	}
	namespace GreenCarpet
	{
		constexpr BlockState GreenCarpet()
		{
			return 10741;
		}
	}
	namespace GreenConcrete
	{
		constexpr BlockState GreenConcrete()
		{
			return 12741;
		}
	}
	namespace GreenConcretePowder
	{
		constexpr BlockState GreenConcretePowder()
		{
			return 12757;
		}
	}
	namespace GreenGlazedTerracotta
	{
		constexpr BlockState GreenGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12716;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12717;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12718;
			else return 12719;
		}
		BlockState GreenGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenShulkerBox
	{
		constexpr BlockState GreenShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12646;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12647;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12648;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12649;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12650;
			else return 12651;
		}
		BlockState GreenShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenStainedGlass
	{
		constexpr BlockState GreenStainedGlass()
		{
			return 5958;
		}
	}
	namespace GreenStainedGlassPane
	{
		constexpr BlockState GreenStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9788;
							else return 9789;
						else
							if (West) return 9790;
							else return 9791;
					else
						if (Waterlogged)
							if (West) return 9792;
							else return 9793;
						else
							if (West) return 9794;
							else return 9795;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9796;
							else return 9797;
						else
							if (West) return 9798;
							else return 9799;
					else
						if (Waterlogged)
							if (West) return 9800;
							else return 9801;
						else
							if (West) return 9802;
							else return 9803;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9804;
							else return 9805;
						else
							if (West) return 9806;
							else return 9807;
					else
						if (Waterlogged)
							if (West) return 9808;
							else return 9809;
						else
							if (West) return 9810;
							else return 9811;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9812;
							else return 9813;
						else
							if (West) return 9814;
							else return 9815;
					else
						if (Waterlogged)
							if (West) return 9816;
							else return 9817;
						else
							if (West) return 9818;
							else return 9819;
		}
		BlockState GreenStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace GreenTerracotta
	{
		constexpr BlockState GreenTerracotta()
		{
			return 9369;
		}
	}
	namespace GreenWallBanner
	{
		constexpr BlockState GreenWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11067;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11068;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11069;
			else return 11070;
		}
		BlockState GreenWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace GreenWool
	{
		constexpr BlockState GreenWool()
		{
			return 2060;
		}
	}
	namespace Grindstone
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState Grindstone(const enum Face Face, const eBlockFace Facing)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 18438;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 18439;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 18440;
				else return 18441;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 18442;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 18443;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 18444;
				else return 18445;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 18446;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 18447;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 18448;
				else return 18449;
		}
		BlockState Grindstone();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace HangingRoots
	{
		constexpr BlockState HangingRoots(const bool Waterlogged)
		{
			if (Waterlogged) return 24900;
			else return 24901;
		}
		BlockState HangingRoots();
		bool Waterlogged(BlockState Block);
	}
	namespace HayBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState HayBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 10725;
			else if (Axis == Axis::Y) return 10726;
			else return 10727;
		}
		BlockState HayBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace HeavyCore
	{
		constexpr BlockState HeavyCore(const bool Waterlogged)
		{
			if (Waterlogged) return 26682;
			else return 26683;
		}
		BlockState HeavyCore();
		bool Waterlogged(BlockState Block);
	}
	namespace HeavyWeightedPressurePlate
	{
		constexpr BlockState HeavyWeightedPressurePlate(const int Power)
		{
			if (Power == 0) return 9159;
			else if (Power == 1) return 9160;
			else if (Power == 2) return 9161;
			else if (Power == 3) return 9162;
			else if (Power == 4) return 9163;
			else if (Power == 5) return 9164;
			else if (Power == 6) return 9165;
			else if (Power == 7) return 9166;
			else if (Power == 8) return 9167;
			else if (Power == 9) return 9168;
			else if (Power == 10) return 9169;
			else if (Power == 11) return 9170;
			else if (Power == 12) return 9171;
			else if (Power == 13) return 9172;
			else if (Power == 14) return 9173;
			else return 9174;
		}
		BlockState HeavyWeightedPressurePlate();
		int Power(BlockState Block);
	}
	namespace HoneyBlock
	{
		constexpr BlockState HoneyBlock()
		{
			return 19445;
		}
	}
	namespace HoneycombBlock
	{
		constexpr BlockState HoneycombBlock()
		{
			return 19446;
		}
	}
	namespace Hopper
	{
		constexpr BlockState Hopper(const bool Enabled, const eBlockFace Facing)
		{
			if (Enabled)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9225;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9226;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9227;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 9228;
				else return 9229;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 9230;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 9231;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 9232;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 9233;
				else return 9234;
		}
		BlockState Hopper();
		bool Enabled(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace HornCoral
	{
		constexpr BlockState HornCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12831;
			else return 12832;
		}
		BlockState HornCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace HornCoralBlock
	{
		constexpr BlockState HornCoralBlock()
		{
			return 12812;
		}
	}
	namespace HornCoralFan
	{
		constexpr BlockState HornCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12851;
			else return 12852;
		}
		BlockState HornCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace HornCoralWallFan
	{
		constexpr BlockState HornCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12925;
				else return 12926;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12927;
				else return 12928;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12929;
				else return 12930;
			else
				if (Waterlogged) return 12931;
				else return 12932;
		}
		BlockState HornCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Ice
	{
		constexpr BlockState Ice()
		{
			return 5780;
		}
	}
	namespace InfestedChiseledStoneBricks
	{
		constexpr BlockState InfestedChiseledStoneBricks()
		{
			return 6548;
		}
	}
	namespace InfestedCobblestone
	{
		constexpr BlockState InfestedCobblestone()
		{
			return 6544;
		}
	}
	namespace InfestedCrackedStoneBricks
	{
		constexpr BlockState InfestedCrackedStoneBricks()
		{
			return 6547;
		}
	}
	namespace InfestedDeepslate
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState InfestedDeepslate(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 26554;
			else if (Axis == Axis::Y) return 26555;
			else return 26556;
		}
		BlockState InfestedDeepslate();
		enum Axis Axis(BlockState Block);
	}
	namespace InfestedMossyStoneBricks
	{
		constexpr BlockState InfestedMossyStoneBricks()
		{
			return 6546;
		}
	}
	namespace InfestedStone
	{
		constexpr BlockState InfestedStone()
		{
			return 6543;
		}
	}
	namespace InfestedStoneBricks
	{
		constexpr BlockState InfestedStoneBricks()
		{
			return 6545;
		}
	}
	namespace IronBars
	{
		constexpr BlockState IronBars(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6741;
							else return 6742;
						else
							if (West) return 6743;
							else return 6744;
					else
						if (Waterlogged)
							if (West) return 6745;
							else return 6746;
						else
							if (West) return 6747;
							else return 6748;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6749;
							else return 6750;
						else
							if (West) return 6751;
							else return 6752;
					else
						if (Waterlogged)
							if (West) return 6753;
							else return 6754;
						else
							if (West) return 6755;
							else return 6756;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 6757;
							else return 6758;
						else
							if (West) return 6759;
							else return 6760;
					else
						if (Waterlogged)
							if (West) return 6761;
							else return 6762;
						else
							if (West) return 6763;
							else return 6764;
				else
					if (South)
						if (Waterlogged)
							if (West) return 6765;
							else return 6766;
						else
							if (West) return 6767;
							else return 6768;
					else
						if (Waterlogged)
							if (West) return 6769;
							else return 6770;
						else
							if (West) return 6771;
							else return 6772;
		}
		BlockState IronBars();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace IronBlock
	{
		constexpr BlockState IronBlock()
		{
			return 2092;
		}
	}
	namespace IronDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState IronDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5652;
							else return 5653;
						else
							if (Powered) return 5654;
							else return 5655;
					else
						if (Open)
							if (Powered) return 5656;
							else return 5657;
						else
							if (Powered) return 5658;
							else return 5659;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5660;
							else return 5661;
						else
							if (Powered) return 5662;
							else return 5663;
					else
						if (Open)
							if (Powered) return 5664;
							else return 5665;
						else
							if (Powered) return 5666;
							else return 5667;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5668;
							else return 5669;
						else
							if (Powered) return 5670;
							else return 5671;
					else
						if (Open)
							if (Powered) return 5672;
							else return 5673;
						else
							if (Powered) return 5674;
							else return 5675;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5676;
							else return 5677;
						else
							if (Powered) return 5678;
							else return 5679;
					else
						if (Open)
							if (Powered) return 5680;
							else return 5681;
						else
							if (Powered) return 5682;
							else return 5683;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5684;
							else return 5685;
						else
							if (Powered) return 5686;
							else return 5687;
					else
						if (Open)
							if (Powered) return 5688;
							else return 5689;
						else
							if (Powered) return 5690;
							else return 5691;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5692;
							else return 5693;
						else
							if (Powered) return 5694;
							else return 5695;
					else
						if (Open)
							if (Powered) return 5696;
							else return 5697;
						else
							if (Powered) return 5698;
							else return 5699;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5700;
							else return 5701;
						else
							if (Powered) return 5702;
							else return 5703;
					else
						if (Open)
							if (Powered) return 5704;
							else return 5705;
						else
							if (Powered) return 5706;
							else return 5707;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 5708;
							else return 5709;
						else
							if (Powered) return 5710;
							else return 5711;
					else
						if (Open)
							if (Powered) return 5712;
							else return 5713;
						else
							if (Powered) return 5714;
							else return 5715;
		}
		BlockState IronDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace IronOre
	{
		constexpr BlockState IronOre()
		{
			return 125;
		}
	}
	namespace IronTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState IronTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 10399;
							else return 10400;
						else
							if (Waterlogged) return 10401;
							else return 10402;
					else
						if (Powered)
							if (Waterlogged) return 10403;
							else return 10404;
						else
							if (Waterlogged) return 10405;
							else return 10406;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 10407;
							else return 10408;
						else
							if (Waterlogged) return 10409;
							else return 10410;
					else
						if (Powered)
							if (Waterlogged) return 10411;
							else return 10412;
						else
							if (Waterlogged) return 10413;
							else return 10414;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 10415;
							else return 10416;
						else
							if (Waterlogged) return 10417;
							else return 10418;
					else
						if (Powered)
							if (Waterlogged) return 10419;
							else return 10420;
						else
							if (Waterlogged) return 10421;
							else return 10422;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 10423;
							else return 10424;
						else
							if (Waterlogged) return 10425;
							else return 10426;
					else
						if (Powered)
							if (Waterlogged) return 10427;
							else return 10428;
						else
							if (Waterlogged) return 10429;
							else return 10430;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 10431;
							else return 10432;
						else
							if (Waterlogged) return 10433;
							else return 10434;
					else
						if (Powered)
							if (Waterlogged) return 10435;
							else return 10436;
						else
							if (Waterlogged) return 10437;
							else return 10438;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 10439;
							else return 10440;
						else
							if (Waterlogged) return 10441;
							else return 10442;
					else
						if (Powered)
							if (Waterlogged) return 10443;
							else return 10444;
						else
							if (Waterlogged) return 10445;
							else return 10446;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 10447;
							else return 10448;
						else
							if (Waterlogged) return 10449;
							else return 10450;
					else
						if (Powered)
							if (Waterlogged) return 10451;
							else return 10452;
						else
							if (Waterlogged) return 10453;
							else return 10454;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 10455;
							else return 10456;
						else
							if (Waterlogged) return 10457;
							else return 10458;
					else
						if (Powered)
							if (Waterlogged) return 10459;
							else return 10460;
						else
							if (Waterlogged) return 10461;
							else return 10462;
		}
		BlockState IronTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JackOLantern
	{
		constexpr BlockState JackOLantern(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 5870;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 5871;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 5872;
			else return 5873;
		}
		BlockState JackOLantern();
		eBlockFace Facing(BlockState Block);
	}
	namespace Jigsaw
	{
		enum class Orientation
		{
			DownEast,
			DownNorth,
			DownSouth,
			DownWest,
			UpEast,
			UpNorth,
			UpSouth,
			UpWest,
			WestUp,
			EastUp,
			NorthUp,
			SouthUp,
		};
		constexpr BlockState Jigsaw(const enum Orientation Orientation)
		{
			if (Orientation == Orientation::DownEast) return 19360;
			else if (Orientation == Orientation::DownNorth) return 19361;
			else if (Orientation == Orientation::DownSouth) return 19362;
			else if (Orientation == Orientation::DownWest) return 19363;
			else if (Orientation == Orientation::UpEast) return 19364;
			else if (Orientation == Orientation::UpNorth) return 19365;
			else if (Orientation == Orientation::UpSouth) return 19366;
			else if (Orientation == Orientation::UpWest) return 19367;
			else if (Orientation == Orientation::WestUp) return 19368;
			else if (Orientation == Orientation::EastUp) return 19369;
			else if (Orientation == Orientation::NorthUp) return 19370;
			else return 19371;
		}
		BlockState Jigsaw();
		enum Orientation Orientation(BlockState Block);
	}
	namespace Jukebox
	{
		constexpr BlockState Jukebox(const bool HasRecord)
		{
			if (HasRecord) return 5815;
			else return 5816;
		}
		BlockState Jukebox();
		bool HasRecord(BlockState Block);
	}
	namespace JungleButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState JungleButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8683;
					else return 8684;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8685;
					else return 8686;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8687;
					else return 8688;
				else
					if (Powered) return 8689;
					else return 8690;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8691;
					else return 8692;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8693;
					else return 8694;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8695;
					else return 8696;
				else
					if (Powered) return 8697;
					else return 8698;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8699;
					else return 8700;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8701;
					else return 8702;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8703;
					else return 8704;
				else
					if (Powered) return 8705;
					else return 8706;
		}
		BlockState JungleButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState JungleDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11950;
							else return 11951;
						else
							if (Powered) return 11952;
							else return 11953;
					else
						if (Open)
							if (Powered) return 11954;
							else return 11955;
						else
							if (Powered) return 11956;
							else return 11957;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11958;
							else return 11959;
						else
							if (Powered) return 11960;
							else return 11961;
					else
						if (Open)
							if (Powered) return 11962;
							else return 11963;
						else
							if (Powered) return 11964;
							else return 11965;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11966;
							else return 11967;
						else
							if (Powered) return 11968;
							else return 11969;
					else
						if (Open)
							if (Powered) return 11970;
							else return 11971;
						else
							if (Powered) return 11972;
							else return 11973;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11974;
							else return 11975;
						else
							if (Powered) return 11976;
							else return 11977;
					else
						if (Open)
							if (Powered) return 11978;
							else return 11979;
						else
							if (Powered) return 11980;
							else return 11981;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11982;
							else return 11983;
						else
							if (Powered) return 11984;
							else return 11985;
					else
						if (Open)
							if (Powered) return 11986;
							else return 11987;
						else
							if (Powered) return 11988;
							else return 11989;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11990;
							else return 11991;
						else
							if (Powered) return 11992;
							else return 11993;
					else
						if (Open)
							if (Powered) return 11994;
							else return 11995;
						else
							if (Powered) return 11996;
							else return 11997;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11998;
							else return 11999;
						else
							if (Powered) return 12000;
							else return 12001;
					else
						if (Open)
							if (Powered) return 12002;
							else return 12003;
						else
							if (Powered) return 12004;
							else return 12005;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12006;
							else return 12007;
						else
							if (Powered) return 12008;
							else return 12009;
					else
						if (Open)
							if (Powered) return 12010;
							else return 12011;
						else
							if (Powered) return 12012;
							else return 12013;
		}
		BlockState JungleDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleFence
	{
		constexpr BlockState JungleFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11630;
							else return 11631;
						else
							if (West) return 11632;
							else return 11633;
					else
						if (Waterlogged)
							if (West) return 11634;
							else return 11635;
						else
							if (West) return 11636;
							else return 11637;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11638;
							else return 11639;
						else
							if (West) return 11640;
							else return 11641;
					else
						if (Waterlogged)
							if (West) return 11642;
							else return 11643;
						else
							if (West) return 11644;
							else return 11645;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11646;
							else return 11647;
						else
							if (West) return 11648;
							else return 11649;
					else
						if (Waterlogged)
							if (West) return 11650;
							else return 11651;
						else
							if (West) return 11652;
							else return 11653;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11654;
							else return 11655;
						else
							if (West) return 11656;
							else return 11657;
					else
						if (Waterlogged)
							if (West) return 11658;
							else return 11659;
						else
							if (West) return 11660;
							else return 11661;
		}
		BlockState JungleFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace JungleFenceGate
	{
		constexpr BlockState JungleFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11374;
						else return 11375;
					else
						if (Powered) return 11376;
						else return 11377;
				else
					if (Open)
						if (Powered) return 11378;
						else return 11379;
					else
						if (Powered) return 11380;
						else return 11381;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11382;
						else return 11383;
					else
						if (Powered) return 11384;
						else return 11385;
				else
					if (Open)
						if (Powered) return 11386;
						else return 11387;
					else
						if (Powered) return 11388;
						else return 11389;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11390;
						else return 11391;
					else
						if (Powered) return 11392;
						else return 11393;
				else
					if (Open)
						if (Powered) return 11394;
						else return 11395;
					else
						if (Powered) return 11396;
						else return 11397;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11398;
						else return 11399;
					else
						if (Powered) return 11400;
						else return 11401;
				else
					if (Open)
						if (Powered) return 11402;
						else return 11403;
					else
						if (Powered) return 11404;
						else return 11405;
		}
		BlockState JungleFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace JungleHangingSign
	{
		constexpr BlockState JungleHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5154;
					else return 5155;
				else if (Rotation == 1)
					if (Waterlogged) return 5156;
					else return 5157;
				else if (Rotation == 2)
					if (Waterlogged) return 5158;
					else return 5159;
				else if (Rotation == 3)
					if (Waterlogged) return 5160;
					else return 5161;
				else if (Rotation == 4)
					if (Waterlogged) return 5162;
					else return 5163;
				else if (Rotation == 5)
					if (Waterlogged) return 5164;
					else return 5165;
				else if (Rotation == 6)
					if (Waterlogged) return 5166;
					else return 5167;
				else if (Rotation == 7)
					if (Waterlogged) return 5168;
					else return 5169;
				else if (Rotation == 8)
					if (Waterlogged) return 5170;
					else return 5171;
				else if (Rotation == 9)
					if (Waterlogged) return 5172;
					else return 5173;
				else if (Rotation == 10)
					if (Waterlogged) return 5174;
					else return 5175;
				else if (Rotation == 11)
					if (Waterlogged) return 5176;
					else return 5177;
				else if (Rotation == 12)
					if (Waterlogged) return 5178;
					else return 5179;
				else if (Rotation == 13)
					if (Waterlogged) return 5180;
					else return 5181;
				else if (Rotation == 14)
					if (Waterlogged) return 5182;
					else return 5183;
				else
					if (Waterlogged) return 5184;
					else return 5185;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5186;
					else return 5187;
				else if (Rotation == 1)
					if (Waterlogged) return 5188;
					else return 5189;
				else if (Rotation == 2)
					if (Waterlogged) return 5190;
					else return 5191;
				else if (Rotation == 3)
					if (Waterlogged) return 5192;
					else return 5193;
				else if (Rotation == 4)
					if (Waterlogged) return 5194;
					else return 5195;
				else if (Rotation == 5)
					if (Waterlogged) return 5196;
					else return 5197;
				else if (Rotation == 6)
					if (Waterlogged) return 5198;
					else return 5199;
				else if (Rotation == 7)
					if (Waterlogged) return 5200;
					else return 5201;
				else if (Rotation == 8)
					if (Waterlogged) return 5202;
					else return 5203;
				else if (Rotation == 9)
					if (Waterlogged) return 5204;
					else return 5205;
				else if (Rotation == 10)
					if (Waterlogged) return 5206;
					else return 5207;
				else if (Rotation == 11)
					if (Waterlogged) return 5208;
					else return 5209;
				else if (Rotation == 12)
					if (Waterlogged) return 5210;
					else return 5211;
				else if (Rotation == 13)
					if (Waterlogged) return 5212;
					else return 5213;
				else if (Rotation == 14)
					if (Waterlogged) return 5214;
					else return 5215;
				else
					if (Waterlogged) return 5216;
					else return 5217;
		}
		BlockState JungleHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleLeaves
	{
		constexpr BlockState JungleLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 321;
					else return 322;
				else
					if (Waterlogged) return 323;
					else return 324;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 325;
					else return 326;
				else
					if (Waterlogged) return 327;
					else return 328;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 329;
					else return 330;
				else
					if (Waterlogged) return 331;
					else return 332;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 333;
					else return 334;
				else
					if (Waterlogged) return 335;
					else return 336;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 337;
					else return 338;
				else
					if (Waterlogged) return 339;
					else return 340;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 341;
					else return 342;
				else
					if (Waterlogged) return 343;
					else return 344;
			else
				if (Persistent)
					if (Waterlogged) return 345;
					else return 346;
				else
					if (Waterlogged) return 347;
					else return 348;
		}
		BlockState JungleLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState JungleLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 139;
			else if (Axis == Axis::Y) return 140;
			else return 141;
		}
		BlockState JungleLog();
		enum Axis Axis(BlockState Block);
	}
	namespace JunglePlanks
	{
		constexpr BlockState JunglePlanks()
		{
			return 18;
		}
	}
	namespace JunglePressurePlate
	{
		constexpr BlockState JunglePressurePlate(const bool Powered)
		{
			if (Powered) return 5722;
			else return 5723;
		}
		BlockState JunglePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace JungleSapling
	{
		constexpr BlockState JungleSapling(const int Stage)
		{
			if (Stage == 0) return 31;
			else return 32;
		}
		BlockState JungleSapling();
		int Stage(BlockState Block);
	}
	namespace JungleSign
	{
		constexpr BlockState JungleSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4462;
				else return 4463;
			else if (Rotation == 1)
				if (Waterlogged) return 4464;
				else return 4465;
			else if (Rotation == 2)
				if (Waterlogged) return 4466;
				else return 4467;
			else if (Rotation == 3)
				if (Waterlogged) return 4468;
				else return 4469;
			else if (Rotation == 4)
				if (Waterlogged) return 4470;
				else return 4471;
			else if (Rotation == 5)
				if (Waterlogged) return 4472;
				else return 4473;
			else if (Rotation == 6)
				if (Waterlogged) return 4474;
				else return 4475;
			else if (Rotation == 7)
				if (Waterlogged) return 4476;
				else return 4477;
			else if (Rotation == 8)
				if (Waterlogged) return 4478;
				else return 4479;
			else if (Rotation == 9)
				if (Waterlogged) return 4480;
				else return 4481;
			else if (Rotation == 10)
				if (Waterlogged) return 4482;
				else return 4483;
			else if (Rotation == 11)
				if (Waterlogged) return 4484;
				else return 4485;
			else if (Rotation == 12)
				if (Waterlogged) return 4486;
				else return 4487;
			else if (Rotation == 13)
				if (Waterlogged) return 4488;
				else return 4489;
			else if (Rotation == 14)
				if (Waterlogged) return 4490;
				else return 4491;
			else
				if (Waterlogged) return 4492;
				else return 4493;
		}
		BlockState JungleSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState JungleSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11180;
				else return 11181;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11182;
				else return 11183;
			else
				if (Waterlogged) return 11184;
				else return 11185;
		}
		BlockState JungleSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState JungleStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7826;
						else return 7827;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7828;
						else return 7829;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7830;
						else return 7831;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7832;
						else return 7833;
					else
						if (Waterlogged) return 7834;
						else return 7835;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7836;
						else return 7837;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7838;
						else return 7839;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7840;
						else return 7841;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7842;
						else return 7843;
					else
						if (Waterlogged) return 7844;
						else return 7845;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7846;
						else return 7847;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7848;
						else return 7849;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7850;
						else return 7851;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7852;
						else return 7853;
					else
						if (Waterlogged) return 7854;
						else return 7855;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7856;
						else return 7857;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7858;
						else return 7859;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7860;
						else return 7861;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7862;
						else return 7863;
					else
						if (Waterlogged) return 7864;
						else return 7865;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7866;
						else return 7867;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7868;
						else return 7869;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7870;
						else return 7871;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7872;
						else return 7873;
					else
						if (Waterlogged) return 7874;
						else return 7875;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7876;
						else return 7877;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7878;
						else return 7879;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7880;
						else return 7881;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7882;
						else return 7883;
					else
						if (Waterlogged) return 7884;
						else return 7885;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7886;
						else return 7887;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7888;
						else return 7889;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7890;
						else return 7891;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7892;
						else return 7893;
					else
						if (Waterlogged) return 7894;
						else return 7895;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7896;
						else return 7897;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7898;
						else return 7899;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7900;
						else return 7901;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7902;
						else return 7903;
					else
						if (Waterlogged) return 7904;
						else return 7905;
		}
		BlockState JungleStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState JungleTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6153;
							else return 6154;
						else
							if (Waterlogged) return 6155;
							else return 6156;
					else
						if (Powered)
							if (Waterlogged) return 6157;
							else return 6158;
						else
							if (Waterlogged) return 6159;
							else return 6160;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6161;
							else return 6162;
						else
							if (Waterlogged) return 6163;
							else return 6164;
					else
						if (Powered)
							if (Waterlogged) return 6165;
							else return 6166;
						else
							if (Waterlogged) return 6167;
							else return 6168;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6169;
							else return 6170;
						else
							if (Waterlogged) return 6171;
							else return 6172;
					else
						if (Powered)
							if (Waterlogged) return 6173;
							else return 6174;
						else
							if (Waterlogged) return 6175;
							else return 6176;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6177;
							else return 6178;
						else
							if (Waterlogged) return 6179;
							else return 6180;
					else
						if (Powered)
							if (Waterlogged) return 6181;
							else return 6182;
						else
							if (Waterlogged) return 6183;
							else return 6184;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6185;
							else return 6186;
						else
							if (Waterlogged) return 6187;
							else return 6188;
					else
						if (Powered)
							if (Waterlogged) return 6189;
							else return 6190;
						else
							if (Waterlogged) return 6191;
							else return 6192;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6193;
							else return 6194;
						else
							if (Waterlogged) return 6195;
							else return 6196;
					else
						if (Powered)
							if (Waterlogged) return 6197;
							else return 6198;
						else
							if (Waterlogged) return 6199;
							else return 6200;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6201;
							else return 6202;
						else
							if (Waterlogged) return 6203;
							else return 6204;
					else
						if (Powered)
							if (Waterlogged) return 6205;
							else return 6206;
						else
							if (Waterlogged) return 6207;
							else return 6208;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6209;
							else return 6210;
						else
							if (Waterlogged) return 6211;
							else return 6212;
					else
						if (Powered)
							if (Waterlogged) return 6213;
							else return 6214;
						else
							if (Waterlogged) return 6215;
							else return 6216;
		}
		BlockState JungleTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWallHangingSign
	{
		constexpr BlockState JungleWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5578;
				else return 5579;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5580;
				else return 5581;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5582;
				else return 5583;
			else
				if (Waterlogged) return 5584;
				else return 5585;
		}
		BlockState JungleWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWallSign
	{
		constexpr BlockState JungleWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4802;
				else return 4803;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4804;
				else return 4805;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4806;
				else return 4807;
			else
				if (Waterlogged) return 4808;
				else return 4809;
		}
		BlockState JungleWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace JungleWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState JungleWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 198;
			else if (Axis == Axis::Y) return 199;
			else return 200;
		}
		BlockState JungleWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Kelp
	{
		constexpr BlockState Kelp(const int Age)
		{
			if (Age == 0) return 12760;
			else if (Age == 1) return 12761;
			else if (Age == 2) return 12762;
			else if (Age == 3) return 12763;
			else if (Age == 4) return 12764;
			else if (Age == 5) return 12765;
			else if (Age == 6) return 12766;
			else if (Age == 7) return 12767;
			else if (Age == 8) return 12768;
			else if (Age == 9) return 12769;
			else if (Age == 10) return 12770;
			else if (Age == 11) return 12771;
			else if (Age == 12) return 12772;
			else if (Age == 13) return 12773;
			else if (Age == 14) return 12774;
			else if (Age == 15) return 12775;
			else if (Age == 16) return 12776;
			else if (Age == 17) return 12777;
			else if (Age == 18) return 12778;
			else if (Age == 19) return 12779;
			else if (Age == 20) return 12780;
			else if (Age == 21) return 12781;
			else if (Age == 22) return 12782;
			else if (Age == 23) return 12783;
			else if (Age == 24) return 12784;
			else return 12785;
		}
		BlockState Kelp();
		int Age(BlockState Block);
	}
	namespace KelpPlant
	{
		constexpr BlockState KelpPlant()
		{
			return 12786;
		}
	}
	namespace Ladder
	{
		constexpr BlockState Ladder(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4654;
				else return 4655;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4656;
				else return 4657;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4658;
				else return 4659;
			else
				if (Waterlogged) return 4660;
				else return 4661;
		}
		BlockState Ladder();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Lantern
	{
		constexpr BlockState Lantern(const bool Hanging, const bool Waterlogged)
		{
			if (Hanging)
				if (Waterlogged) return 18503;
				else return 18504;
			else
				if (Waterlogged) return 18505;
				else return 18506;
		}
		BlockState Lantern();
		bool Hanging(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LapisBlock
	{
		constexpr BlockState LapisBlock()
		{
			return 522;
		}
	}
	namespace LapisOre
	{
		constexpr BlockState LapisOre()
		{
			return 520;
		}
	}
	namespace LargeAmethystBud
	{
		constexpr BlockState LargeAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 21045;
				else return 21046;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 21047;
				else return 21048;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 21049;
				else return 21050;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 21051;
				else return 21052;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 21053;
				else return 21054;
			else
				if (Waterlogged) return 21055;
				else return 21056;
		}
		BlockState LargeAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LargeFern
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState LargeFern(const enum Half Half)
		{
			if (Half == Half::Upper) return 10757;
			else return 10758;
		}
		BlockState LargeFern();
		enum Half Half(BlockState Block);
	}
	namespace Lava
	{
		constexpr BlockState Lava(const int Level)
		{
			if (Level == 0) return 96;
			else if (Level == 1) return 97;
			else if (Level == 2) return 98;
			else if (Level == 3) return 99;
			else if (Level == 4) return 100;
			else if (Level == 5) return 101;
			else if (Level == 6) return 102;
			else if (Level == 7) return 103;
			else if (Level == 8) return 104;
			else if (Level == 9) return 105;
			else if (Level == 10) return 106;
			else if (Level == 11) return 107;
			else if (Level == 12) return 108;
			else if (Level == 13) return 109;
			else if (Level == 14) return 110;
			else return 111;
		}
		BlockState Lava();
		int Level(BlockState Block);
	}
	namespace LavaCauldron
	{
		constexpr BlockState LavaCauldron()
		{
			return 7402;
		}
	}
	namespace Lectern
	{
		constexpr BlockState Lectern(const eBlockFace Facing, const bool HasBook, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (HasBook)
					if (Powered) return 18450;
					else return 18451;
				else
					if (Powered) return 18452;
					else return 18453;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (HasBook)
					if (Powered) return 18454;
					else return 18455;
				else
					if (Powered) return 18456;
					else return 18457;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (HasBook)
					if (Powered) return 18458;
					else return 18459;
				else
					if (Powered) return 18460;
					else return 18461;
			else
				if (HasBook)
					if (Powered) return 18462;
					else return 18463;
				else
					if (Powered) return 18464;
					else return 18465;
		}
		BlockState Lectern();
		eBlockFace Facing(BlockState Block);
		bool HasBook(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Lever
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState Lever(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5626;
					else return 5627;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5628;
					else return 5629;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5630;
					else return 5631;
				else
					if (Powered) return 5632;
					else return 5633;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5634;
					else return 5635;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5636;
					else return 5637;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5638;
					else return 5639;
				else
					if (Powered) return 5640;
					else return 5641;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5642;
					else return 5643;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5644;
					else return 5645;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5646;
					else return 5647;
				else
					if (Powered) return 5648;
					else return 5649;
		}
		BlockState Lever();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Light
	{
		constexpr BlockState Light(const int Level, const bool Waterlogged)
		{
			if (Level == 0)
				if (Waterlogged) return 10367;
				else return 10368;
			else if (Level == 1)
				if (Waterlogged) return 10369;
				else return 10370;
			else if (Level == 2)
				if (Waterlogged) return 10371;
				else return 10372;
			else if (Level == 3)
				if (Waterlogged) return 10373;
				else return 10374;
			else if (Level == 4)
				if (Waterlogged) return 10375;
				else return 10376;
			else if (Level == 5)
				if (Waterlogged) return 10377;
				else return 10378;
			else if (Level == 6)
				if (Waterlogged) return 10379;
				else return 10380;
			else if (Level == 7)
				if (Waterlogged) return 10381;
				else return 10382;
			else if (Level == 8)
				if (Waterlogged) return 10383;
				else return 10384;
			else if (Level == 9)
				if (Waterlogged) return 10385;
				else return 10386;
			else if (Level == 10)
				if (Waterlogged) return 10387;
				else return 10388;
			else if (Level == 11)
				if (Waterlogged) return 10389;
				else return 10390;
			else if (Level == 12)
				if (Waterlogged) return 10391;
				else return 10392;
			else if (Level == 13)
				if (Waterlogged) return 10393;
				else return 10394;
			else if (Level == 14)
				if (Waterlogged) return 10395;
				else return 10396;
			else
				if (Waterlogged) return 10397;
				else return 10398;
		}
		BlockState Light();
		int Level(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightBlueBanner
	{
		constexpr BlockState LightBlueBanner(const int Rotation)
		{
			if (Rotation == 0) return 10807;
			else if (Rotation == 1) return 10808;
			else if (Rotation == 2) return 10809;
			else if (Rotation == 3) return 10810;
			else if (Rotation == 4) return 10811;
			else if (Rotation == 5) return 10812;
			else if (Rotation == 6) return 10813;
			else if (Rotation == 7) return 10814;
			else if (Rotation == 8) return 10815;
			else if (Rotation == 9) return 10816;
			else if (Rotation == 10) return 10817;
			else if (Rotation == 11) return 10818;
			else if (Rotation == 12) return 10819;
			else if (Rotation == 13) return 10820;
			else if (Rotation == 14) return 10821;
			else return 10822;
		}
		BlockState LightBlueBanner();
		int Rotation(BlockState Block);
	}
	namespace LightBlueBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LightBlueBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1736;
					else return 1737;
				else
					if (Part == Part::Head) return 1738;
					else return 1739;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1740;
					else return 1741;
				else
					if (Part == Part::Head) return 1742;
					else return 1743;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1744;
					else return 1745;
				else
					if (Part == Part::Head) return 1746;
					else return 1747;
			else
				if (Occupied)
					if (Part == Part::Head) return 1748;
					else return 1749;
				else
					if (Part == Part::Head) return 1750;
					else return 1751;
		}
		BlockState LightBlueBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LightBlueCandle
	{
		constexpr BlockState LightBlueCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20789;
					else return 20790;
				else
					if (Waterlogged) return 20791;
					else return 20792;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20793;
					else return 20794;
				else
					if (Waterlogged) return 20795;
					else return 20796;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20797;
					else return 20798;
				else
					if (Waterlogged) return 20799;
					else return 20800;
			else
				if (Lit)
					if (Waterlogged) return 20801;
					else return 20802;
				else
					if (Waterlogged) return 20803;
					else return 20804;
		}
		BlockState LightBlueCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightBlueCandleCake
	{
		constexpr BlockState LightBlueCandleCake(const bool Lit)
		{
			if (Lit) return 21005;
			else return 21006;
		}
		BlockState LightBlueCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LightBlueCarpet
	{
		constexpr BlockState LightBlueCarpet()
		{
			return 10731;
		}
	}
	namespace LightBlueConcrete
	{
		constexpr BlockState LightBlueConcrete()
		{
			return 12731;
		}
	}
	namespace LightBlueConcretePowder
	{
		constexpr BlockState LightBlueConcretePowder()
		{
			return 12747;
		}
	}
	namespace LightBlueGlazedTerracotta
	{
		constexpr BlockState LightBlueGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12676;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12677;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12678;
			else return 12679;
		}
		BlockState LightBlueGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueShulkerBox
	{
		constexpr BlockState LightBlueShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12586;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12587;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12588;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12589;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12590;
			else return 12591;
		}
		BlockState LightBlueShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueStainedGlass
	{
		constexpr BlockState LightBlueStainedGlass()
		{
			return 5948;
		}
	}
	namespace LightBlueStainedGlassPane
	{
		constexpr BlockState LightBlueStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9468;
							else return 9469;
						else
							if (West) return 9470;
							else return 9471;
					else
						if (Waterlogged)
							if (West) return 9472;
							else return 9473;
						else
							if (West) return 9474;
							else return 9475;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9476;
							else return 9477;
						else
							if (West) return 9478;
							else return 9479;
					else
						if (Waterlogged)
							if (West) return 9480;
							else return 9481;
						else
							if (West) return 9482;
							else return 9483;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9484;
							else return 9485;
						else
							if (West) return 9486;
							else return 9487;
					else
						if (Waterlogged)
							if (West) return 9488;
							else return 9489;
						else
							if (West) return 9490;
							else return 9491;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9492;
							else return 9493;
						else
							if (West) return 9494;
							else return 9495;
					else
						if (Waterlogged)
							if (West) return 9496;
							else return 9497;
						else
							if (West) return 9498;
							else return 9499;
		}
		BlockState LightBlueStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LightBlueTerracotta
	{
		constexpr BlockState LightBlueTerracotta()
		{
			return 9359;
		}
	}
	namespace LightBlueWallBanner
	{
		constexpr BlockState LightBlueWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11027;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11028;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11029;
			else return 11030;
		}
		BlockState LightBlueWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightBlueWool
	{
		constexpr BlockState LightBlueWool()
		{
			return 2050;
		}
	}
	namespace LightGrayBanner
	{
		constexpr BlockState LightGrayBanner(const int Rotation)
		{
			if (Rotation == 0) return 10887;
			else if (Rotation == 1) return 10888;
			else if (Rotation == 2) return 10889;
			else if (Rotation == 3) return 10890;
			else if (Rotation == 4) return 10891;
			else if (Rotation == 5) return 10892;
			else if (Rotation == 6) return 10893;
			else if (Rotation == 7) return 10894;
			else if (Rotation == 8) return 10895;
			else if (Rotation == 9) return 10896;
			else if (Rotation == 10) return 10897;
			else if (Rotation == 11) return 10898;
			else if (Rotation == 12) return 10899;
			else if (Rotation == 13) return 10900;
			else if (Rotation == 14) return 10901;
			else return 10902;
		}
		BlockState LightGrayBanner();
		int Rotation(BlockState Block);
	}
	namespace LightGrayBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LightGrayBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1816;
					else return 1817;
				else
					if (Part == Part::Head) return 1818;
					else return 1819;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1820;
					else return 1821;
				else
					if (Part == Part::Head) return 1822;
					else return 1823;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1824;
					else return 1825;
				else
					if (Part == Part::Head) return 1826;
					else return 1827;
			else
				if (Occupied)
					if (Part == Part::Head) return 1828;
					else return 1829;
				else
					if (Part == Part::Head) return 1830;
					else return 1831;
		}
		BlockState LightGrayBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LightGrayCandle
	{
		constexpr BlockState LightGrayCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20869;
					else return 20870;
				else
					if (Waterlogged) return 20871;
					else return 20872;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20873;
					else return 20874;
				else
					if (Waterlogged) return 20875;
					else return 20876;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20877;
					else return 20878;
				else
					if (Waterlogged) return 20879;
					else return 20880;
			else
				if (Lit)
					if (Waterlogged) return 20881;
					else return 20882;
				else
					if (Waterlogged) return 20883;
					else return 20884;
		}
		BlockState LightGrayCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LightGrayCandleCake
	{
		constexpr BlockState LightGrayCandleCake(const bool Lit)
		{
			if (Lit) return 21015;
			else return 21016;
		}
		BlockState LightGrayCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LightGrayCarpet
	{
		constexpr BlockState LightGrayCarpet()
		{
			return 10736;
		}
	}
	namespace LightGrayConcrete
	{
		constexpr BlockState LightGrayConcrete()
		{
			return 12736;
		}
	}
	namespace LightGrayConcretePowder
	{
		constexpr BlockState LightGrayConcretePowder()
		{
			return 12752;
		}
	}
	namespace LightGrayGlazedTerracotta
	{
		constexpr BlockState LightGrayGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12696;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12697;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12698;
			else return 12699;
		}
		BlockState LightGrayGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayShulkerBox
	{
		constexpr BlockState LightGrayShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12616;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12617;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12618;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12619;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12620;
			else return 12621;
		}
		BlockState LightGrayShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayStainedGlass
	{
		constexpr BlockState LightGrayStainedGlass()
		{
			return 5953;
		}
	}
	namespace LightGrayStainedGlassPane
	{
		constexpr BlockState LightGrayStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9628;
							else return 9629;
						else
							if (West) return 9630;
							else return 9631;
					else
						if (Waterlogged)
							if (West) return 9632;
							else return 9633;
						else
							if (West) return 9634;
							else return 9635;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9636;
							else return 9637;
						else
							if (West) return 9638;
							else return 9639;
					else
						if (Waterlogged)
							if (West) return 9640;
							else return 9641;
						else
							if (West) return 9642;
							else return 9643;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9644;
							else return 9645;
						else
							if (West) return 9646;
							else return 9647;
					else
						if (Waterlogged)
							if (West) return 9648;
							else return 9649;
						else
							if (West) return 9650;
							else return 9651;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9652;
							else return 9653;
						else
							if (West) return 9654;
							else return 9655;
					else
						if (Waterlogged)
							if (West) return 9656;
							else return 9657;
						else
							if (West) return 9658;
							else return 9659;
		}
		BlockState LightGrayStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LightGrayTerracotta
	{
		constexpr BlockState LightGrayTerracotta()
		{
			return 9364;
		}
	}
	namespace LightGrayWallBanner
	{
		constexpr BlockState LightGrayWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11047;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11048;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11049;
			else return 11050;
		}
		BlockState LightGrayWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LightGrayWool
	{
		constexpr BlockState LightGrayWool()
		{
			return 2055;
		}
	}
	namespace LightWeightedPressurePlate
	{
		constexpr BlockState LightWeightedPressurePlate(const int Power)
		{
			if (Power == 0) return 9143;
			else if (Power == 1) return 9144;
			else if (Power == 2) return 9145;
			else if (Power == 3) return 9146;
			else if (Power == 4) return 9147;
			else if (Power == 5) return 9148;
			else if (Power == 6) return 9149;
			else if (Power == 7) return 9150;
			else if (Power == 8) return 9151;
			else if (Power == 9) return 9152;
			else if (Power == 10) return 9153;
			else if (Power == 11) return 9154;
			else if (Power == 12) return 9155;
			else if (Power == 13) return 9156;
			else if (Power == 14) return 9157;
			else return 9158;
		}
		BlockState LightWeightedPressurePlate();
		int Power(BlockState Block);
	}
	namespace LightningRod
	{
		constexpr BlockState LightningRod(const eBlockFace Facing, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered)
					if (Waterlogged) return 24724;
					else return 24725;
				else
					if (Waterlogged) return 24726;
					else return 24727;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered)
					if (Waterlogged) return 24728;
					else return 24729;
				else
					if (Waterlogged) return 24730;
					else return 24731;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered)
					if (Waterlogged) return 24732;
					else return 24733;
				else
					if (Waterlogged) return 24734;
					else return 24735;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Powered)
					if (Waterlogged) return 24736;
					else return 24737;
				else
					if (Waterlogged) return 24738;
					else return 24739;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Powered)
					if (Waterlogged) return 24740;
					else return 24741;
				else
					if (Waterlogged) return 24742;
					else return 24743;
			else
				if (Powered)
					if (Waterlogged) return 24744;
					else return 24745;
				else
					if (Waterlogged) return 24746;
					else return 24747;
		}
		BlockState LightningRod();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Lilac
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Lilac(const enum Half Half)
		{
			if (Half == Half::Upper) return 10749;
			else return 10750;
		}
		BlockState Lilac();
		enum Half Half(BlockState Block);
	}
	namespace LilyOfTheValley
	{
		constexpr BlockState LilyOfTheValley()
		{
			return 2088;
		}
	}
	namespace LilyPad
	{
		constexpr BlockState LilyPad()
		{
			return 7271;
		}
	}
	namespace LimeBanner
	{
		constexpr BlockState LimeBanner(const int Rotation)
		{
			if (Rotation == 0) return 10839;
			else if (Rotation == 1) return 10840;
			else if (Rotation == 2) return 10841;
			else if (Rotation == 3) return 10842;
			else if (Rotation == 4) return 10843;
			else if (Rotation == 5) return 10844;
			else if (Rotation == 6) return 10845;
			else if (Rotation == 7) return 10846;
			else if (Rotation == 8) return 10847;
			else if (Rotation == 9) return 10848;
			else if (Rotation == 10) return 10849;
			else if (Rotation == 11) return 10850;
			else if (Rotation == 12) return 10851;
			else if (Rotation == 13) return 10852;
			else if (Rotation == 14) return 10853;
			else return 10854;
		}
		BlockState LimeBanner();
		int Rotation(BlockState Block);
	}
	namespace LimeBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState LimeBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1768;
					else return 1769;
				else
					if (Part == Part::Head) return 1770;
					else return 1771;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1772;
					else return 1773;
				else
					if (Part == Part::Head) return 1774;
					else return 1775;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1776;
					else return 1777;
				else
					if (Part == Part::Head) return 1778;
					else return 1779;
			else
				if (Occupied)
					if (Part == Part::Head) return 1780;
					else return 1781;
				else
					if (Part == Part::Head) return 1782;
					else return 1783;
		}
		BlockState LimeBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace LimeCandle
	{
		constexpr BlockState LimeCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20821;
					else return 20822;
				else
					if (Waterlogged) return 20823;
					else return 20824;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20825;
					else return 20826;
				else
					if (Waterlogged) return 20827;
					else return 20828;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20829;
					else return 20830;
				else
					if (Waterlogged) return 20831;
					else return 20832;
			else
				if (Lit)
					if (Waterlogged) return 20833;
					else return 20834;
				else
					if (Waterlogged) return 20835;
					else return 20836;
		}
		BlockState LimeCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace LimeCandleCake
	{
		constexpr BlockState LimeCandleCake(const bool Lit)
		{
			if (Lit) return 21009;
			else return 21010;
		}
		BlockState LimeCandleCake();
		bool Lit(BlockState Block);
	}
	namespace LimeCarpet
	{
		constexpr BlockState LimeCarpet()
		{
			return 10733;
		}
	}
	namespace LimeConcrete
	{
		constexpr BlockState LimeConcrete()
		{
			return 12733;
		}
	}
	namespace LimeConcretePowder
	{
		constexpr BlockState LimeConcretePowder()
		{
			return 12749;
		}
	}
	namespace LimeGlazedTerracotta
	{
		constexpr BlockState LimeGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12684;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12685;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12686;
			else return 12687;
		}
		BlockState LimeGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeShulkerBox
	{
		constexpr BlockState LimeShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12598;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12599;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12600;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12601;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12602;
			else return 12603;
		}
		BlockState LimeShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeStainedGlass
	{
		constexpr BlockState LimeStainedGlass()
		{
			return 5950;
		}
	}
	namespace LimeStainedGlassPane
	{
		constexpr BlockState LimeStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9532;
							else return 9533;
						else
							if (West) return 9534;
							else return 9535;
					else
						if (Waterlogged)
							if (West) return 9536;
							else return 9537;
						else
							if (West) return 9538;
							else return 9539;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9540;
							else return 9541;
						else
							if (West) return 9542;
							else return 9543;
					else
						if (Waterlogged)
							if (West) return 9544;
							else return 9545;
						else
							if (West) return 9546;
							else return 9547;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9548;
							else return 9549;
						else
							if (West) return 9550;
							else return 9551;
					else
						if (Waterlogged)
							if (West) return 9552;
							else return 9553;
						else
							if (West) return 9554;
							else return 9555;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9556;
							else return 9557;
						else
							if (West) return 9558;
							else return 9559;
					else
						if (Waterlogged)
							if (West) return 9560;
							else return 9561;
						else
							if (West) return 9562;
							else return 9563;
		}
		BlockState LimeStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace LimeTerracotta
	{
		constexpr BlockState LimeTerracotta()
		{
			return 9361;
		}
	}
	namespace LimeWallBanner
	{
		constexpr BlockState LimeWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11035;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11036;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11037;
			else return 11038;
		}
		BlockState LimeWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace LimeWool
	{
		constexpr BlockState LimeWool()
		{
			return 2052;
		}
	}
	namespace Lodestone
	{
		constexpr BlockState Lodestone()
		{
			return 19459;
		}
	}
	namespace Loom
	{
		constexpr BlockState Loom(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 18404;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 18405;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 18406;
			else return 18407;
		}
		BlockState Loom();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaBanner
	{
		constexpr BlockState MagentaBanner(const int Rotation)
		{
			if (Rotation == 0) return 10791;
			else if (Rotation == 1) return 10792;
			else if (Rotation == 2) return 10793;
			else if (Rotation == 3) return 10794;
			else if (Rotation == 4) return 10795;
			else if (Rotation == 5) return 10796;
			else if (Rotation == 6) return 10797;
			else if (Rotation == 7) return 10798;
			else if (Rotation == 8) return 10799;
			else if (Rotation == 9) return 10800;
			else if (Rotation == 10) return 10801;
			else if (Rotation == 11) return 10802;
			else if (Rotation == 12) return 10803;
			else if (Rotation == 13) return 10804;
			else if (Rotation == 14) return 10805;
			else return 10806;
		}
		BlockState MagentaBanner();
		int Rotation(BlockState Block);
	}
	namespace MagentaBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState MagentaBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1720;
					else return 1721;
				else
					if (Part == Part::Head) return 1722;
					else return 1723;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1724;
					else return 1725;
				else
					if (Part == Part::Head) return 1726;
					else return 1727;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1728;
					else return 1729;
				else
					if (Part == Part::Head) return 1730;
					else return 1731;
			else
				if (Occupied)
					if (Part == Part::Head) return 1732;
					else return 1733;
				else
					if (Part == Part::Head) return 1734;
					else return 1735;
		}
		BlockState MagentaBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace MagentaCandle
	{
		constexpr BlockState MagentaCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20773;
					else return 20774;
				else
					if (Waterlogged) return 20775;
					else return 20776;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20777;
					else return 20778;
				else
					if (Waterlogged) return 20779;
					else return 20780;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20781;
					else return 20782;
				else
					if (Waterlogged) return 20783;
					else return 20784;
			else
				if (Lit)
					if (Waterlogged) return 20785;
					else return 20786;
				else
					if (Waterlogged) return 20787;
					else return 20788;
		}
		BlockState MagentaCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MagentaCandleCake
	{
		constexpr BlockState MagentaCandleCake(const bool Lit)
		{
			if (Lit) return 21003;
			else return 21004;
		}
		BlockState MagentaCandleCake();
		bool Lit(BlockState Block);
	}
	namespace MagentaCarpet
	{
		constexpr BlockState MagentaCarpet()
		{
			return 10730;
		}
	}
	namespace MagentaConcrete
	{
		constexpr BlockState MagentaConcrete()
		{
			return 12730;
		}
	}
	namespace MagentaConcretePowder
	{
		constexpr BlockState MagentaConcretePowder()
		{
			return 12746;
		}
	}
	namespace MagentaGlazedTerracotta
	{
		constexpr BlockState MagentaGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12672;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12673;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12674;
			else return 12675;
		}
		BlockState MagentaGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaShulkerBox
	{
		constexpr BlockState MagentaShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12580;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12581;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12582;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12583;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12584;
			else return 12585;
		}
		BlockState MagentaShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaStainedGlass
	{
		constexpr BlockState MagentaStainedGlass()
		{
			return 5947;
		}
	}
	namespace MagentaStainedGlassPane
	{
		constexpr BlockState MagentaStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9436;
							else return 9437;
						else
							if (West) return 9438;
							else return 9439;
					else
						if (Waterlogged)
							if (West) return 9440;
							else return 9441;
						else
							if (West) return 9442;
							else return 9443;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9444;
							else return 9445;
						else
							if (West) return 9446;
							else return 9447;
					else
						if (Waterlogged)
							if (West) return 9448;
							else return 9449;
						else
							if (West) return 9450;
							else return 9451;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9452;
							else return 9453;
						else
							if (West) return 9454;
							else return 9455;
					else
						if (Waterlogged)
							if (West) return 9456;
							else return 9457;
						else
							if (West) return 9458;
							else return 9459;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9460;
							else return 9461;
						else
							if (West) return 9462;
							else return 9463;
					else
						if (Waterlogged)
							if (West) return 9464;
							else return 9465;
						else
							if (West) return 9466;
							else return 9467;
		}
		BlockState MagentaStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace MagentaTerracotta
	{
		constexpr BlockState MagentaTerracotta()
		{
			return 9358;
		}
	}
	namespace MagentaWallBanner
	{
		constexpr BlockState MagentaWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11023;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11024;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11025;
			else return 11026;
		}
		BlockState MagentaWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace MagentaWool
	{
		constexpr BlockState MagentaWool()
		{
			return 2049;
		}
	}
	namespace MagmaBlock
	{
		constexpr BlockState MagmaBlock()
		{
			return 12543;
		}
	}
	namespace MangroveButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState MangroveButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8779;
					else return 8780;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8781;
					else return 8782;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8783;
					else return 8784;
				else
					if (Powered) return 8785;
					else return 8786;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8787;
					else return 8788;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8789;
					else return 8790;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8791;
					else return 8792;
				else
					if (Powered) return 8793;
					else return 8794;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8795;
					else return 8796;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8797;
					else return 8798;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8799;
					else return 8800;
				else
					if (Powered) return 8801;
					else return 8802;
		}
		BlockState MangroveButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState MangroveDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12206;
							else return 12207;
						else
							if (Powered) return 12208;
							else return 12209;
					else
						if (Open)
							if (Powered) return 12210;
							else return 12211;
						else
							if (Powered) return 12212;
							else return 12213;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12214;
							else return 12215;
						else
							if (Powered) return 12216;
							else return 12217;
					else
						if (Open)
							if (Powered) return 12218;
							else return 12219;
						else
							if (Powered) return 12220;
							else return 12221;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12222;
							else return 12223;
						else
							if (Powered) return 12224;
							else return 12225;
					else
						if (Open)
							if (Powered) return 12226;
							else return 12227;
						else
							if (Powered) return 12228;
							else return 12229;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12230;
							else return 12231;
						else
							if (Powered) return 12232;
							else return 12233;
					else
						if (Open)
							if (Powered) return 12234;
							else return 12235;
						else
							if (Powered) return 12236;
							else return 12237;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12238;
							else return 12239;
						else
							if (Powered) return 12240;
							else return 12241;
					else
						if (Open)
							if (Powered) return 12242;
							else return 12243;
						else
							if (Powered) return 12244;
							else return 12245;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12246;
							else return 12247;
						else
							if (Powered) return 12248;
							else return 12249;
					else
						if (Open)
							if (Powered) return 12250;
							else return 12251;
						else
							if (Powered) return 12252;
							else return 12253;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12254;
							else return 12255;
						else
							if (Powered) return 12256;
							else return 12257;
					else
						if (Open)
							if (Powered) return 12258;
							else return 12259;
						else
							if (Powered) return 12260;
							else return 12261;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 12262;
							else return 12263;
						else
							if (Powered) return 12264;
							else return 12265;
					else
						if (Open)
							if (Powered) return 12266;
							else return 12267;
						else
							if (Powered) return 12268;
							else return 12269;
		}
		BlockState MangroveDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveFence
	{
		constexpr BlockState MangroveFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11758;
							else return 11759;
						else
							if (West) return 11760;
							else return 11761;
					else
						if (Waterlogged)
							if (West) return 11762;
							else return 11763;
						else
							if (West) return 11764;
							else return 11765;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11766;
							else return 11767;
						else
							if (West) return 11768;
							else return 11769;
					else
						if (Waterlogged)
							if (West) return 11770;
							else return 11771;
						else
							if (West) return 11772;
							else return 11773;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11774;
							else return 11775;
						else
							if (West) return 11776;
							else return 11777;
					else
						if (Waterlogged)
							if (West) return 11778;
							else return 11779;
						else
							if (West) return 11780;
							else return 11781;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11782;
							else return 11783;
						else
							if (West) return 11784;
							else return 11785;
					else
						if (Waterlogged)
							if (West) return 11786;
							else return 11787;
						else
							if (West) return 11788;
							else return 11789;
		}
		BlockState MangroveFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace MangroveFenceGate
	{
		constexpr BlockState MangroveFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11502;
						else return 11503;
					else
						if (Powered) return 11504;
						else return 11505;
				else
					if (Open)
						if (Powered) return 11506;
						else return 11507;
					else
						if (Powered) return 11508;
						else return 11509;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11510;
						else return 11511;
					else
						if (Powered) return 11512;
						else return 11513;
				else
					if (Open)
						if (Powered) return 11514;
						else return 11515;
					else
						if (Powered) return 11516;
						else return 11517;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11518;
						else return 11519;
					else
						if (Powered) return 11520;
						else return 11521;
				else
					if (Open)
						if (Powered) return 11522;
						else return 11523;
					else
						if (Powered) return 11524;
						else return 11525;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11526;
						else return 11527;
					else
						if (Powered) return 11528;
						else return 11529;
				else
					if (Open)
						if (Powered) return 11530;
						else return 11531;
					else
						if (Powered) return 11532;
						else return 11533;
		}
		BlockState MangroveFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace MangroveHangingSign
	{
		constexpr BlockState MangroveHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5410;
					else return 5411;
				else if (Rotation == 1)
					if (Waterlogged) return 5412;
					else return 5413;
				else if (Rotation == 2)
					if (Waterlogged) return 5414;
					else return 5415;
				else if (Rotation == 3)
					if (Waterlogged) return 5416;
					else return 5417;
				else if (Rotation == 4)
					if (Waterlogged) return 5418;
					else return 5419;
				else if (Rotation == 5)
					if (Waterlogged) return 5420;
					else return 5421;
				else if (Rotation == 6)
					if (Waterlogged) return 5422;
					else return 5423;
				else if (Rotation == 7)
					if (Waterlogged) return 5424;
					else return 5425;
				else if (Rotation == 8)
					if (Waterlogged) return 5426;
					else return 5427;
				else if (Rotation == 9)
					if (Waterlogged) return 5428;
					else return 5429;
				else if (Rotation == 10)
					if (Waterlogged) return 5430;
					else return 5431;
				else if (Rotation == 11)
					if (Waterlogged) return 5432;
					else return 5433;
				else if (Rotation == 12)
					if (Waterlogged) return 5434;
					else return 5435;
				else if (Rotation == 13)
					if (Waterlogged) return 5436;
					else return 5437;
				else if (Rotation == 14)
					if (Waterlogged) return 5438;
					else return 5439;
				else
					if (Waterlogged) return 5440;
					else return 5441;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5442;
					else return 5443;
				else if (Rotation == 1)
					if (Waterlogged) return 5444;
					else return 5445;
				else if (Rotation == 2)
					if (Waterlogged) return 5446;
					else return 5447;
				else if (Rotation == 3)
					if (Waterlogged) return 5448;
					else return 5449;
				else if (Rotation == 4)
					if (Waterlogged) return 5450;
					else return 5451;
				else if (Rotation == 5)
					if (Waterlogged) return 5452;
					else return 5453;
				else if (Rotation == 6)
					if (Waterlogged) return 5454;
					else return 5455;
				else if (Rotation == 7)
					if (Waterlogged) return 5456;
					else return 5457;
				else if (Rotation == 8)
					if (Waterlogged) return 5458;
					else return 5459;
				else if (Rotation == 9)
					if (Waterlogged) return 5460;
					else return 5461;
				else if (Rotation == 10)
					if (Waterlogged) return 5462;
					else return 5463;
				else if (Rotation == 11)
					if (Waterlogged) return 5464;
					else return 5465;
				else if (Rotation == 12)
					if (Waterlogged) return 5466;
					else return 5467;
				else if (Rotation == 13)
					if (Waterlogged) return 5468;
					else return 5469;
				else if (Rotation == 14)
					if (Waterlogged) return 5470;
					else return 5471;
				else
					if (Waterlogged) return 5472;
					else return 5473;
		}
		BlockState MangroveHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveLeaves
	{
		constexpr BlockState MangroveLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 433;
					else return 434;
				else
					if (Waterlogged) return 435;
					else return 436;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 437;
					else return 438;
				else
					if (Waterlogged) return 439;
					else return 440;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 441;
					else return 442;
				else
					if (Waterlogged) return 443;
					else return 444;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 445;
					else return 446;
				else
					if (Waterlogged) return 447;
					else return 448;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 449;
					else return 450;
				else
					if (Waterlogged) return 451;
					else return 452;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 453;
					else return 454;
				else
					if (Waterlogged) return 455;
					else return 456;
			else
				if (Persistent)
					if (Waterlogged) return 457;
					else return 458;
				else
					if (Waterlogged) return 459;
					else return 460;
		}
		BlockState MangroveLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MangroveLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 151;
			else if (Axis == Axis::Y) return 152;
			else return 153;
		}
		BlockState MangroveLog();
		enum Axis Axis(BlockState Block);
	}
	namespace MangrovePlanks
	{
		constexpr BlockState MangrovePlanks()
		{
			return 22;
		}
	}
	namespace MangrovePressurePlate
	{
		constexpr BlockState MangrovePressurePlate(const bool Powered)
		{
			if (Powered) return 5730;
			else return 5731;
		}
		BlockState MangrovePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace MangrovePropagule
	{
		constexpr BlockState MangrovePropagule(const int Age, const bool Hanging, const int Stage, const bool Waterlogged)
		{
			if (Age == 0)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 39;
						else return 40;
					else
						if (Waterlogged) return 41;
						else return 42;
				else
					if (Stage == 0)
						if (Waterlogged) return 43;
						else return 44;
					else
						if (Waterlogged) return 45;
						else return 46;
			else if (Age == 1)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 47;
						else return 48;
					else
						if (Waterlogged) return 49;
						else return 50;
				else
					if (Stage == 0)
						if (Waterlogged) return 51;
						else return 52;
					else
						if (Waterlogged) return 53;
						else return 54;
			else if (Age == 2)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 55;
						else return 56;
					else
						if (Waterlogged) return 57;
						else return 58;
				else
					if (Stage == 0)
						if (Waterlogged) return 59;
						else return 60;
					else
						if (Waterlogged) return 61;
						else return 62;
			else if (Age == 3)
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 63;
						else return 64;
					else
						if (Waterlogged) return 65;
						else return 66;
				else
					if (Stage == 0)
						if (Waterlogged) return 67;
						else return 68;
					else
						if (Waterlogged) return 69;
						else return 70;
			else
				if (Hanging)
					if (Stage == 0)
						if (Waterlogged) return 71;
						else return 72;
					else
						if (Waterlogged) return 73;
						else return 74;
				else
					if (Stage == 0)
						if (Waterlogged) return 75;
						else return 76;
					else
						if (Waterlogged) return 77;
						else return 78;
		}
		BlockState MangrovePropagule();
		int Age(BlockState Block);
		bool Hanging(BlockState Block);
		int Stage(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveRoots
	{
		constexpr BlockState MangroveRoots(const bool Waterlogged)
		{
			if (Waterlogged) return 154;
			else return 155;
		}
		BlockState MangroveRoots();
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveSign
	{
		constexpr BlockState MangroveSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4526;
				else return 4527;
			else if (Rotation == 1)
				if (Waterlogged) return 4528;
				else return 4529;
			else if (Rotation == 2)
				if (Waterlogged) return 4530;
				else return 4531;
			else if (Rotation == 3)
				if (Waterlogged) return 4532;
				else return 4533;
			else if (Rotation == 4)
				if (Waterlogged) return 4534;
				else return 4535;
			else if (Rotation == 5)
				if (Waterlogged) return 4536;
				else return 4537;
			else if (Rotation == 6)
				if (Waterlogged) return 4538;
				else return 4539;
			else if (Rotation == 7)
				if (Waterlogged) return 4540;
				else return 4541;
			else if (Rotation == 8)
				if (Waterlogged) return 4542;
				else return 4543;
			else if (Rotation == 9)
				if (Waterlogged) return 4544;
				else return 4545;
			else if (Rotation == 10)
				if (Waterlogged) return 4546;
				else return 4547;
			else if (Rotation == 11)
				if (Waterlogged) return 4548;
				else return 4549;
			else if (Rotation == 12)
				if (Waterlogged) return 4550;
				else return 4551;
			else if (Rotation == 13)
				if (Waterlogged) return 4552;
				else return 4553;
			else if (Rotation == 14)
				if (Waterlogged) return 4554;
				else return 4555;
			else
				if (Waterlogged) return 4556;
				else return 4557;
		}
		BlockState MangroveSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MangroveSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11204;
				else return 11205;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11206;
				else return 11207;
			else
				if (Waterlogged) return 11208;
				else return 11209;
		}
		BlockState MangroveSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MangroveStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10124;
						else return 10125;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10126;
						else return 10127;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10128;
						else return 10129;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10130;
						else return 10131;
					else
						if (Waterlogged) return 10132;
						else return 10133;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10134;
						else return 10135;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10136;
						else return 10137;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10138;
						else return 10139;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10140;
						else return 10141;
					else
						if (Waterlogged) return 10142;
						else return 10143;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10144;
						else return 10145;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10146;
						else return 10147;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10148;
						else return 10149;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10150;
						else return 10151;
					else
						if (Waterlogged) return 10152;
						else return 10153;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10154;
						else return 10155;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10156;
						else return 10157;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10158;
						else return 10159;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10160;
						else return 10161;
					else
						if (Waterlogged) return 10162;
						else return 10163;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10164;
						else return 10165;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10166;
						else return 10167;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10168;
						else return 10169;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10170;
						else return 10171;
					else
						if (Waterlogged) return 10172;
						else return 10173;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10174;
						else return 10175;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10176;
						else return 10177;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10178;
						else return 10179;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10180;
						else return 10181;
					else
						if (Waterlogged) return 10182;
						else return 10183;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10184;
						else return 10185;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10186;
						else return 10187;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10188;
						else return 10189;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10190;
						else return 10191;
					else
						if (Waterlogged) return 10192;
						else return 10193;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10194;
						else return 10195;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10196;
						else return 10197;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10198;
						else return 10199;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10200;
						else return 10201;
					else
						if (Waterlogged) return 10202;
						else return 10203;
		}
		BlockState MangroveStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState MangroveTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6409;
							else return 6410;
						else
							if (Waterlogged) return 6411;
							else return 6412;
					else
						if (Powered)
							if (Waterlogged) return 6413;
							else return 6414;
						else
							if (Waterlogged) return 6415;
							else return 6416;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6417;
							else return 6418;
						else
							if (Waterlogged) return 6419;
							else return 6420;
					else
						if (Powered)
							if (Waterlogged) return 6421;
							else return 6422;
						else
							if (Waterlogged) return 6423;
							else return 6424;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6425;
							else return 6426;
						else
							if (Waterlogged) return 6427;
							else return 6428;
					else
						if (Powered)
							if (Waterlogged) return 6429;
							else return 6430;
						else
							if (Waterlogged) return 6431;
							else return 6432;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6433;
							else return 6434;
						else
							if (Waterlogged) return 6435;
							else return 6436;
					else
						if (Powered)
							if (Waterlogged) return 6437;
							else return 6438;
						else
							if (Waterlogged) return 6439;
							else return 6440;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6441;
							else return 6442;
						else
							if (Waterlogged) return 6443;
							else return 6444;
					else
						if (Powered)
							if (Waterlogged) return 6445;
							else return 6446;
						else
							if (Waterlogged) return 6447;
							else return 6448;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6449;
							else return 6450;
						else
							if (Waterlogged) return 6451;
							else return 6452;
					else
						if (Powered)
							if (Waterlogged) return 6453;
							else return 6454;
						else
							if (Waterlogged) return 6455;
							else return 6456;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6457;
							else return 6458;
						else
							if (Waterlogged) return 6459;
							else return 6460;
					else
						if (Powered)
							if (Waterlogged) return 6461;
							else return 6462;
						else
							if (Waterlogged) return 6463;
							else return 6464;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6465;
							else return 6466;
						else
							if (Waterlogged) return 6467;
							else return 6468;
					else
						if (Powered)
							if (Waterlogged) return 6469;
							else return 6470;
						else
							if (Waterlogged) return 6471;
							else return 6472;
		}
		BlockState MangroveTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWallHangingSign
	{
		constexpr BlockState MangroveWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5594;
				else return 5595;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5596;
				else return 5597;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5598;
				else return 5599;
			else
				if (Waterlogged) return 5600;
				else return 5601;
		}
		BlockState MangroveWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWallSign
	{
		constexpr BlockState MangroveWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4818;
				else return 4819;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4820;
				else return 4821;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4822;
				else return 4823;
			else
				if (Waterlogged) return 4824;
				else return 4825;
		}
		BlockState MangroveWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MangroveWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MangroveWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 210;
			else if (Axis == Axis::Y) return 211;
			else return 212;
		}
		BlockState MangroveWood();
		enum Axis Axis(BlockState Block);
	}
	namespace MediumAmethystBud
	{
		constexpr BlockState MediumAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 21057;
				else return 21058;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 21059;
				else return 21060;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 21061;
				else return 21062;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 21063;
				else return 21064;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 21065;
				else return 21066;
			else
				if (Waterlogged) return 21067;
				else return 21068;
		}
		BlockState MediumAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Melon
	{
		constexpr BlockState Melon()
		{
			return 6812;
		}
	}
	namespace MelonStem
	{
		constexpr BlockState MelonStem(const int Age)
		{
			if (Age == 0) return 6829;
			else if (Age == 1) return 6830;
			else if (Age == 2) return 6831;
			else if (Age == 3) return 6832;
			else if (Age == 4) return 6833;
			else if (Age == 5) return 6834;
			else if (Age == 6) return 6835;
			else return 6836;
		}
		BlockState MelonStem();
		int Age(BlockState Block);
	}
	namespace MossBlock
	{
		constexpr BlockState MossBlock()
		{
			return 24843;
		}
	}
	namespace MossCarpet
	{
		constexpr BlockState MossCarpet()
		{
			return 24826;
		}
	}
	namespace MossyCobblestone
	{
		constexpr BlockState MossyCobblestone()
		{
			return 2353;
		}
	}
	namespace MossyCobblestoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MossyCobblestoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14106;
				else return 14107;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14108;
				else return 14109;
			else
				if (Waterlogged) return 14110;
				else return 14111;
		}
		BlockState MossyCobblestoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyCobblestoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MossyCobblestoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13282;
						else return 13283;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13284;
						else return 13285;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13286;
						else return 13287;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13288;
						else return 13289;
					else
						if (Waterlogged) return 13290;
						else return 13291;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13292;
						else return 13293;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13294;
						else return 13295;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13296;
						else return 13297;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13298;
						else return 13299;
					else
						if (Waterlogged) return 13300;
						else return 13301;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13302;
						else return 13303;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13304;
						else return 13305;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13306;
						else return 13307;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13308;
						else return 13309;
					else
						if (Waterlogged) return 13310;
						else return 13311;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13312;
						else return 13313;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13314;
						else return 13315;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13316;
						else return 13317;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13318;
						else return 13319;
					else
						if (Waterlogged) return 13320;
						else return 13321;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13322;
						else return 13323;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13324;
						else return 13325;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13326;
						else return 13327;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13328;
						else return 13329;
					else
						if (Waterlogged) return 13330;
						else return 13331;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13332;
						else return 13333;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13334;
						else return 13335;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13336;
						else return 13337;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13338;
						else return 13339;
					else
						if (Waterlogged) return 13340;
						else return 13341;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13342;
						else return 13343;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13344;
						else return 13345;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13346;
						else return 13347;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13348;
						else return 13349;
					else
						if (Waterlogged) return 13350;
						else return 13351;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13352;
						else return 13353;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13354;
						else return 13355;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13356;
						else return 13357;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13358;
						else return 13359;
					else
						if (Waterlogged) return 13360;
						else return 13361;
		}
		BlockState MossyCobblestoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyCobblestoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MossyCobblestoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8243;
								else if (West == West::Low) return 8244;
								else return 8245;
							else
								if (West == West::None) return 8246;
								else if (West == West::Low) return 8247;
								else return 8248;
						else
							if (Waterlogged)
								if (West == West::None) return 8249;
								else if (West == West::Low) return 8250;
								else return 8251;
							else
								if (West == West::None) return 8252;
								else if (West == West::Low) return 8253;
								else return 8254;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8255;
								else if (West == West::Low) return 8256;
								else return 8257;
							else
								if (West == West::None) return 8258;
								else if (West == West::Low) return 8259;
								else return 8260;
						else
							if (Waterlogged)
								if (West == West::None) return 8261;
								else if (West == West::Low) return 8262;
								else return 8263;
							else
								if (West == West::None) return 8264;
								else if (West == West::Low) return 8265;
								else return 8266;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8267;
								else if (West == West::Low) return 8268;
								else return 8269;
							else
								if (West == West::None) return 8270;
								else if (West == West::Low) return 8271;
								else return 8272;
						else
							if (Waterlogged)
								if (West == West::None) return 8273;
								else if (West == West::Low) return 8274;
								else return 8275;
							else
								if (West == West::None) return 8276;
								else if (West == West::Low) return 8277;
								else return 8278;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8279;
								else if (West == West::Low) return 8280;
								else return 8281;
							else
								if (West == West::None) return 8282;
								else if (West == West::Low) return 8283;
								else return 8284;
						else
							if (Waterlogged)
								if (West == West::None) return 8285;
								else if (West == West::Low) return 8286;
								else return 8287;
							else
								if (West == West::None) return 8288;
								else if (West == West::Low) return 8289;
								else return 8290;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8291;
								else if (West == West::Low) return 8292;
								else return 8293;
							else
								if (West == West::None) return 8294;
								else if (West == West::Low) return 8295;
								else return 8296;
						else
							if (Waterlogged)
								if (West == West::None) return 8297;
								else if (West == West::Low) return 8298;
								else return 8299;
							else
								if (West == West::None) return 8300;
								else if (West == West::Low) return 8301;
								else return 8302;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8303;
								else if (West == West::Low) return 8304;
								else return 8305;
							else
								if (West == West::None) return 8306;
								else if (West == West::Low) return 8307;
								else return 8308;
						else
							if (Waterlogged)
								if (West == West::None) return 8309;
								else if (West == West::Low) return 8310;
								else return 8311;
							else
								if (West == West::None) return 8312;
								else if (West == West::Low) return 8313;
								else return 8314;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8315;
								else if (West == West::Low) return 8316;
								else return 8317;
							else
								if (West == West::None) return 8318;
								else if (West == West::Low) return 8319;
								else return 8320;
						else
							if (Waterlogged)
								if (West == West::None) return 8321;
								else if (West == West::Low) return 8322;
								else return 8323;
							else
								if (West == West::None) return 8324;
								else if (West == West::Low) return 8325;
								else return 8326;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8327;
								else if (West == West::Low) return 8328;
								else return 8329;
							else
								if (West == West::None) return 8330;
								else if (West == West::Low) return 8331;
								else return 8332;
						else
							if (Waterlogged)
								if (West == West::None) return 8333;
								else if (West == West::Low) return 8334;
								else return 8335;
							else
								if (West == West::None) return 8336;
								else if (West == West::Low) return 8337;
								else return 8338;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8339;
								else if (West == West::Low) return 8340;
								else return 8341;
							else
								if (West == West::None) return 8342;
								else if (West == West::Low) return 8343;
								else return 8344;
						else
							if (Waterlogged)
								if (West == West::None) return 8345;
								else if (West == West::Low) return 8346;
								else return 8347;
							else
								if (West == West::None) return 8348;
								else if (West == West::Low) return 8349;
								else return 8350;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8351;
								else if (West == West::Low) return 8352;
								else return 8353;
							else
								if (West == West::None) return 8354;
								else if (West == West::Low) return 8355;
								else return 8356;
						else
							if (Waterlogged)
								if (West == West::None) return 8357;
								else if (West == West::Low) return 8358;
								else return 8359;
							else
								if (West == West::None) return 8360;
								else if (West == West::Low) return 8361;
								else return 8362;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8363;
								else if (West == West::Low) return 8364;
								else return 8365;
							else
								if (West == West::None) return 8366;
								else if (West == West::Low) return 8367;
								else return 8368;
						else
							if (Waterlogged)
								if (West == West::None) return 8369;
								else if (West == West::Low) return 8370;
								else return 8371;
							else
								if (West == West::None) return 8372;
								else if (West == West::Low) return 8373;
								else return 8374;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8375;
								else if (West == West::Low) return 8376;
								else return 8377;
							else
								if (West == West::None) return 8378;
								else if (West == West::Low) return 8379;
								else return 8380;
						else
							if (Waterlogged)
								if (West == West::None) return 8381;
								else if (West == West::Low) return 8382;
								else return 8383;
							else
								if (West == West::None) return 8384;
								else if (West == West::Low) return 8385;
								else return 8386;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8387;
								else if (West == West::Low) return 8388;
								else return 8389;
							else
								if (West == West::None) return 8390;
								else if (West == West::Low) return 8391;
								else return 8392;
						else
							if (Waterlogged)
								if (West == West::None) return 8393;
								else if (West == West::Low) return 8394;
								else return 8395;
							else
								if (West == West::None) return 8396;
								else if (West == West::Low) return 8397;
								else return 8398;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8399;
								else if (West == West::Low) return 8400;
								else return 8401;
							else
								if (West == West::None) return 8402;
								else if (West == West::Low) return 8403;
								else return 8404;
						else
							if (Waterlogged)
								if (West == West::None) return 8405;
								else if (West == West::Low) return 8406;
								else return 8407;
							else
								if (West == West::None) return 8408;
								else if (West == West::Low) return 8409;
								else return 8410;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8411;
								else if (West == West::Low) return 8412;
								else return 8413;
							else
								if (West == West::None) return 8414;
								else if (West == West::Low) return 8415;
								else return 8416;
						else
							if (Waterlogged)
								if (West == West::None) return 8417;
								else if (West == West::Low) return 8418;
								else return 8419;
							else
								if (West == West::None) return 8420;
								else if (West == West::Low) return 8421;
								else return 8422;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8423;
								else if (West == West::Low) return 8424;
								else return 8425;
							else
								if (West == West::None) return 8426;
								else if (West == West::Low) return 8427;
								else return 8428;
						else
							if (Waterlogged)
								if (West == West::None) return 8429;
								else if (West == West::Low) return 8430;
								else return 8431;
							else
								if (West == West::None) return 8432;
								else if (West == West::Low) return 8433;
								else return 8434;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8435;
								else if (West == West::Low) return 8436;
								else return 8437;
							else
								if (West == West::None) return 8438;
								else if (West == West::Low) return 8439;
								else return 8440;
						else
							if (Waterlogged)
								if (West == West::None) return 8441;
								else if (West == West::Low) return 8442;
								else return 8443;
							else
								if (West == West::None) return 8444;
								else if (West == West::Low) return 8445;
								else return 8446;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8447;
								else if (West == West::Low) return 8448;
								else return 8449;
							else
								if (West == West::None) return 8450;
								else if (West == West::Low) return 8451;
								else return 8452;
						else
							if (Waterlogged)
								if (West == West::None) return 8453;
								else if (West == West::Low) return 8454;
								else return 8455;
							else
								if (West == West::None) return 8456;
								else if (West == West::Low) return 8457;
								else return 8458;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8459;
								else if (West == West::Low) return 8460;
								else return 8461;
							else
								if (West == West::None) return 8462;
								else if (West == West::Low) return 8463;
								else return 8464;
						else
							if (Waterlogged)
								if (West == West::None) return 8465;
								else if (West == West::Low) return 8466;
								else return 8467;
							else
								if (West == West::None) return 8468;
								else if (West == West::Low) return 8469;
								else return 8470;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8471;
								else if (West == West::Low) return 8472;
								else return 8473;
							else
								if (West == West::None) return 8474;
								else if (West == West::Low) return 8475;
								else return 8476;
						else
							if (Waterlogged)
								if (West == West::None) return 8477;
								else if (West == West::Low) return 8478;
								else return 8479;
							else
								if (West == West::None) return 8480;
								else if (West == West::Low) return 8481;
								else return 8482;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8483;
								else if (West == West::Low) return 8484;
								else return 8485;
							else
								if (West == West::None) return 8486;
								else if (West == West::Low) return 8487;
								else return 8488;
						else
							if (Waterlogged)
								if (West == West::None) return 8489;
								else if (West == West::Low) return 8490;
								else return 8491;
							else
								if (West == West::None) return 8492;
								else if (West == West::Low) return 8493;
								else return 8494;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8495;
								else if (West == West::Low) return 8496;
								else return 8497;
							else
								if (West == West::None) return 8498;
								else if (West == West::Low) return 8499;
								else return 8500;
						else
							if (Waterlogged)
								if (West == West::None) return 8501;
								else if (West == West::Low) return 8502;
								else return 8503;
							else
								if (West == West::None) return 8504;
								else if (West == West::Low) return 8505;
								else return 8506;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8507;
								else if (West == West::Low) return 8508;
								else return 8509;
							else
								if (West == West::None) return 8510;
								else if (West == West::Low) return 8511;
								else return 8512;
						else
							if (Waterlogged)
								if (West == West::None) return 8513;
								else if (West == West::Low) return 8514;
								else return 8515;
							else
								if (West == West::None) return 8516;
								else if (West == West::Low) return 8517;
								else return 8518;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8519;
								else if (West == West::Low) return 8520;
								else return 8521;
							else
								if (West == West::None) return 8522;
								else if (West == West::Low) return 8523;
								else return 8524;
						else
							if (Waterlogged)
								if (West == West::None) return 8525;
								else if (West == West::Low) return 8526;
								else return 8527;
							else
								if (West == West::None) return 8528;
								else if (West == West::Low) return 8529;
								else return 8530;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8531;
								else if (West == West::Low) return 8532;
								else return 8533;
							else
								if (West == West::None) return 8534;
								else if (West == West::Low) return 8535;
								else return 8536;
						else
							if (Waterlogged)
								if (West == West::None) return 8537;
								else if (West == West::Low) return 8538;
								else return 8539;
							else
								if (West == West::None) return 8540;
								else if (West == West::Low) return 8541;
								else return 8542;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8543;
								else if (West == West::Low) return 8544;
								else return 8545;
							else
								if (West == West::None) return 8546;
								else if (West == West::Low) return 8547;
								else return 8548;
						else
							if (Waterlogged)
								if (West == West::None) return 8549;
								else if (West == West::Low) return 8550;
								else return 8551;
							else
								if (West == West::None) return 8552;
								else if (West == West::Low) return 8553;
								else return 8554;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 8555;
								else if (West == West::Low) return 8556;
								else return 8557;
							else
								if (West == West::None) return 8558;
								else if (West == West::Low) return 8559;
								else return 8560;
						else
							if (Waterlogged)
								if (West == West::None) return 8561;
								else if (West == West::Low) return 8562;
								else return 8563;
							else
								if (West == West::None) return 8564;
								else if (West == West::Low) return 8565;
								else return 8566;
		}
		BlockState MossyCobblestoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MossyStoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MossyStoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14094;
				else return 14095;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14096;
				else return 14097;
			else
				if (Waterlogged) return 14098;
				else return 14099;
		}
		BlockState MossyStoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyStoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MossyStoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13122;
						else return 13123;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13124;
						else return 13125;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13126;
						else return 13127;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13128;
						else return 13129;
					else
						if (Waterlogged) return 13130;
						else return 13131;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13132;
						else return 13133;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13134;
						else return 13135;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13136;
						else return 13137;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13138;
						else return 13139;
					else
						if (Waterlogged) return 13140;
						else return 13141;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13142;
						else return 13143;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13144;
						else return 13145;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13146;
						else return 13147;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13148;
						else return 13149;
					else
						if (Waterlogged) return 13150;
						else return 13151;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13152;
						else return 13153;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13154;
						else return 13155;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13156;
						else return 13157;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13158;
						else return 13159;
					else
						if (Waterlogged) return 13160;
						else return 13161;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13162;
						else return 13163;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13164;
						else return 13165;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13166;
						else return 13167;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13168;
						else return 13169;
					else
						if (Waterlogged) return 13170;
						else return 13171;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13172;
						else return 13173;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13174;
						else return 13175;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13176;
						else return 13177;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13178;
						else return 13179;
					else
						if (Waterlogged) return 13180;
						else return 13181;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13182;
						else return 13183;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13184;
						else return 13185;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13186;
						else return 13187;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13188;
						else return 13189;
					else
						if (Waterlogged) return 13190;
						else return 13191;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13192;
						else return 13193;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13194;
						else return 13195;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13196;
						else return 13197;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13198;
						else return 13199;
					else
						if (Waterlogged) return 13200;
						else return 13201;
		}
		BlockState MossyStoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MossyStoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MossyStoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15132;
								else if (West == West::Low) return 15133;
								else return 15134;
							else
								if (West == West::None) return 15135;
								else if (West == West::Low) return 15136;
								else return 15137;
						else
							if (Waterlogged)
								if (West == West::None) return 15138;
								else if (West == West::Low) return 15139;
								else return 15140;
							else
								if (West == West::None) return 15141;
								else if (West == West::Low) return 15142;
								else return 15143;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15144;
								else if (West == West::Low) return 15145;
								else return 15146;
							else
								if (West == West::None) return 15147;
								else if (West == West::Low) return 15148;
								else return 15149;
						else
							if (Waterlogged)
								if (West == West::None) return 15150;
								else if (West == West::Low) return 15151;
								else return 15152;
							else
								if (West == West::None) return 15153;
								else if (West == West::Low) return 15154;
								else return 15155;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15156;
								else if (West == West::Low) return 15157;
								else return 15158;
							else
								if (West == West::None) return 15159;
								else if (West == West::Low) return 15160;
								else return 15161;
						else
							if (Waterlogged)
								if (West == West::None) return 15162;
								else if (West == West::Low) return 15163;
								else return 15164;
							else
								if (West == West::None) return 15165;
								else if (West == West::Low) return 15166;
								else return 15167;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15168;
								else if (West == West::Low) return 15169;
								else return 15170;
							else
								if (West == West::None) return 15171;
								else if (West == West::Low) return 15172;
								else return 15173;
						else
							if (Waterlogged)
								if (West == West::None) return 15174;
								else if (West == West::Low) return 15175;
								else return 15176;
							else
								if (West == West::None) return 15177;
								else if (West == West::Low) return 15178;
								else return 15179;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15180;
								else if (West == West::Low) return 15181;
								else return 15182;
							else
								if (West == West::None) return 15183;
								else if (West == West::Low) return 15184;
								else return 15185;
						else
							if (Waterlogged)
								if (West == West::None) return 15186;
								else if (West == West::Low) return 15187;
								else return 15188;
							else
								if (West == West::None) return 15189;
								else if (West == West::Low) return 15190;
								else return 15191;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15192;
								else if (West == West::Low) return 15193;
								else return 15194;
							else
								if (West == West::None) return 15195;
								else if (West == West::Low) return 15196;
								else return 15197;
						else
							if (Waterlogged)
								if (West == West::None) return 15198;
								else if (West == West::Low) return 15199;
								else return 15200;
							else
								if (West == West::None) return 15201;
								else if (West == West::Low) return 15202;
								else return 15203;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15204;
								else if (West == West::Low) return 15205;
								else return 15206;
							else
								if (West == West::None) return 15207;
								else if (West == West::Low) return 15208;
								else return 15209;
						else
							if (Waterlogged)
								if (West == West::None) return 15210;
								else if (West == West::Low) return 15211;
								else return 15212;
							else
								if (West == West::None) return 15213;
								else if (West == West::Low) return 15214;
								else return 15215;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15216;
								else if (West == West::Low) return 15217;
								else return 15218;
							else
								if (West == West::None) return 15219;
								else if (West == West::Low) return 15220;
								else return 15221;
						else
							if (Waterlogged)
								if (West == West::None) return 15222;
								else if (West == West::Low) return 15223;
								else return 15224;
							else
								if (West == West::None) return 15225;
								else if (West == West::Low) return 15226;
								else return 15227;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15228;
								else if (West == West::Low) return 15229;
								else return 15230;
							else
								if (West == West::None) return 15231;
								else if (West == West::Low) return 15232;
								else return 15233;
						else
							if (Waterlogged)
								if (West == West::None) return 15234;
								else if (West == West::Low) return 15235;
								else return 15236;
							else
								if (West == West::None) return 15237;
								else if (West == West::Low) return 15238;
								else return 15239;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15240;
								else if (West == West::Low) return 15241;
								else return 15242;
							else
								if (West == West::None) return 15243;
								else if (West == West::Low) return 15244;
								else return 15245;
						else
							if (Waterlogged)
								if (West == West::None) return 15246;
								else if (West == West::Low) return 15247;
								else return 15248;
							else
								if (West == West::None) return 15249;
								else if (West == West::Low) return 15250;
								else return 15251;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15252;
								else if (West == West::Low) return 15253;
								else return 15254;
							else
								if (West == West::None) return 15255;
								else if (West == West::Low) return 15256;
								else return 15257;
						else
							if (Waterlogged)
								if (West == West::None) return 15258;
								else if (West == West::Low) return 15259;
								else return 15260;
							else
								if (West == West::None) return 15261;
								else if (West == West::Low) return 15262;
								else return 15263;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15264;
								else if (West == West::Low) return 15265;
								else return 15266;
							else
								if (West == West::None) return 15267;
								else if (West == West::Low) return 15268;
								else return 15269;
						else
							if (Waterlogged)
								if (West == West::None) return 15270;
								else if (West == West::Low) return 15271;
								else return 15272;
							else
								if (West == West::None) return 15273;
								else if (West == West::Low) return 15274;
								else return 15275;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15276;
								else if (West == West::Low) return 15277;
								else return 15278;
							else
								if (West == West::None) return 15279;
								else if (West == West::Low) return 15280;
								else return 15281;
						else
							if (Waterlogged)
								if (West == West::None) return 15282;
								else if (West == West::Low) return 15283;
								else return 15284;
							else
								if (West == West::None) return 15285;
								else if (West == West::Low) return 15286;
								else return 15287;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15288;
								else if (West == West::Low) return 15289;
								else return 15290;
							else
								if (West == West::None) return 15291;
								else if (West == West::Low) return 15292;
								else return 15293;
						else
							if (Waterlogged)
								if (West == West::None) return 15294;
								else if (West == West::Low) return 15295;
								else return 15296;
							else
								if (West == West::None) return 15297;
								else if (West == West::Low) return 15298;
								else return 15299;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15300;
								else if (West == West::Low) return 15301;
								else return 15302;
							else
								if (West == West::None) return 15303;
								else if (West == West::Low) return 15304;
								else return 15305;
						else
							if (Waterlogged)
								if (West == West::None) return 15306;
								else if (West == West::Low) return 15307;
								else return 15308;
							else
								if (West == West::None) return 15309;
								else if (West == West::Low) return 15310;
								else return 15311;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15312;
								else if (West == West::Low) return 15313;
								else return 15314;
							else
								if (West == West::None) return 15315;
								else if (West == West::Low) return 15316;
								else return 15317;
						else
							if (Waterlogged)
								if (West == West::None) return 15318;
								else if (West == West::Low) return 15319;
								else return 15320;
							else
								if (West == West::None) return 15321;
								else if (West == West::Low) return 15322;
								else return 15323;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15324;
								else if (West == West::Low) return 15325;
								else return 15326;
							else
								if (West == West::None) return 15327;
								else if (West == West::Low) return 15328;
								else return 15329;
						else
							if (Waterlogged)
								if (West == West::None) return 15330;
								else if (West == West::Low) return 15331;
								else return 15332;
							else
								if (West == West::None) return 15333;
								else if (West == West::Low) return 15334;
								else return 15335;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15336;
								else if (West == West::Low) return 15337;
								else return 15338;
							else
								if (West == West::None) return 15339;
								else if (West == West::Low) return 15340;
								else return 15341;
						else
							if (Waterlogged)
								if (West == West::None) return 15342;
								else if (West == West::Low) return 15343;
								else return 15344;
							else
								if (West == West::None) return 15345;
								else if (West == West::Low) return 15346;
								else return 15347;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15348;
								else if (West == West::Low) return 15349;
								else return 15350;
							else
								if (West == West::None) return 15351;
								else if (West == West::Low) return 15352;
								else return 15353;
						else
							if (Waterlogged)
								if (West == West::None) return 15354;
								else if (West == West::Low) return 15355;
								else return 15356;
							else
								if (West == West::None) return 15357;
								else if (West == West::Low) return 15358;
								else return 15359;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15360;
								else if (West == West::Low) return 15361;
								else return 15362;
							else
								if (West == West::None) return 15363;
								else if (West == West::Low) return 15364;
								else return 15365;
						else
							if (Waterlogged)
								if (West == West::None) return 15366;
								else if (West == West::Low) return 15367;
								else return 15368;
							else
								if (West == West::None) return 15369;
								else if (West == West::Low) return 15370;
								else return 15371;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15372;
								else if (West == West::Low) return 15373;
								else return 15374;
							else
								if (West == West::None) return 15375;
								else if (West == West::Low) return 15376;
								else return 15377;
						else
							if (Waterlogged)
								if (West == West::None) return 15378;
								else if (West == West::Low) return 15379;
								else return 15380;
							else
								if (West == West::None) return 15381;
								else if (West == West::Low) return 15382;
								else return 15383;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15384;
								else if (West == West::Low) return 15385;
								else return 15386;
							else
								if (West == West::None) return 15387;
								else if (West == West::Low) return 15388;
								else return 15389;
						else
							if (Waterlogged)
								if (West == West::None) return 15390;
								else if (West == West::Low) return 15391;
								else return 15392;
							else
								if (West == West::None) return 15393;
								else if (West == West::Low) return 15394;
								else return 15395;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15396;
								else if (West == West::Low) return 15397;
								else return 15398;
							else
								if (West == West::None) return 15399;
								else if (West == West::Low) return 15400;
								else return 15401;
						else
							if (Waterlogged)
								if (West == West::None) return 15402;
								else if (West == West::Low) return 15403;
								else return 15404;
							else
								if (West == West::None) return 15405;
								else if (West == West::Low) return 15406;
								else return 15407;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15408;
								else if (West == West::Low) return 15409;
								else return 15410;
							else
								if (West == West::None) return 15411;
								else if (West == West::Low) return 15412;
								else return 15413;
						else
							if (Waterlogged)
								if (West == West::None) return 15414;
								else if (West == West::Low) return 15415;
								else return 15416;
							else
								if (West == West::None) return 15417;
								else if (West == West::Low) return 15418;
								else return 15419;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15420;
								else if (West == West::Low) return 15421;
								else return 15422;
							else
								if (West == West::None) return 15423;
								else if (West == West::Low) return 15424;
								else return 15425;
						else
							if (Waterlogged)
								if (West == West::None) return 15426;
								else if (West == West::Low) return 15427;
								else return 15428;
							else
								if (West == West::None) return 15429;
								else if (West == West::Low) return 15430;
								else return 15431;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15432;
								else if (West == West::Low) return 15433;
								else return 15434;
							else
								if (West == West::None) return 15435;
								else if (West == West::Low) return 15436;
								else return 15437;
						else
							if (Waterlogged)
								if (West == West::None) return 15438;
								else if (West == West::Low) return 15439;
								else return 15440;
							else
								if (West == West::None) return 15441;
								else if (West == West::Low) return 15442;
								else return 15443;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15444;
								else if (West == West::Low) return 15445;
								else return 15446;
							else
								if (West == West::None) return 15447;
								else if (West == West::Low) return 15448;
								else return 15449;
						else
							if (Waterlogged)
								if (West == West::None) return 15450;
								else if (West == West::Low) return 15451;
								else return 15452;
							else
								if (West == West::None) return 15453;
								else if (West == West::Low) return 15454;
								else return 15455;
		}
		BlockState MossyStoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MossyStoneBricks
	{
		constexpr BlockState MossyStoneBricks()
		{
			return 6538;
		}
	}
	namespace MovingPiston
	{
		enum class Type
		{
			Normal,
			Sticky,
		};
		constexpr BlockState MovingPiston(const eBlockFace Facing, const enum Type Type)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Normal) return 2063;
				else return 2064;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Normal) return 2065;
				else return 2066;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Normal) return 2067;
				else return 2068;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Type == Type::Normal) return 2069;
				else return 2070;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Type == Type::Normal) return 2071;
				else return 2072;
			else
				if (Type == Type::Normal) return 2073;
				else return 2074;
		}
		BlockState MovingPiston();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
	}
	namespace Mud
	{
		constexpr BlockState Mud()
		{
			return 24903;
		}
	}
	namespace MudBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState MudBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11270;
				else return 11271;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11272;
				else return 11273;
			else
				if (Waterlogged) return 11274;
				else return 11275;
		}
		BlockState MudBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MudBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState MudBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7189;
						else return 7190;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7191;
						else return 7192;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7193;
						else return 7194;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7195;
						else return 7196;
					else
						if (Waterlogged) return 7197;
						else return 7198;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7199;
						else return 7200;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7201;
						else return 7202;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7203;
						else return 7204;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7205;
						else return 7206;
					else
						if (Waterlogged) return 7207;
						else return 7208;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7209;
						else return 7210;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7211;
						else return 7212;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7213;
						else return 7214;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7215;
						else return 7216;
					else
						if (Waterlogged) return 7217;
						else return 7218;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7219;
						else return 7220;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7221;
						else return 7222;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7223;
						else return 7224;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7225;
						else return 7226;
					else
						if (Waterlogged) return 7227;
						else return 7228;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7229;
						else return 7230;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7231;
						else return 7232;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7233;
						else return 7234;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7235;
						else return 7236;
					else
						if (Waterlogged) return 7237;
						else return 7238;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7239;
						else return 7240;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7241;
						else return 7242;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7243;
						else return 7244;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7245;
						else return 7246;
					else
						if (Waterlogged) return 7247;
						else return 7248;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7249;
						else return 7250;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7251;
						else return 7252;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7253;
						else return 7254;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7255;
						else return 7256;
					else
						if (Waterlogged) return 7257;
						else return 7258;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7259;
						else return 7260;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7261;
						else return 7262;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7263;
						else return 7264;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7265;
						else return 7266;
					else
						if (Waterlogged) return 7267;
						else return 7268;
		}
		BlockState MudBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace MudBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState MudBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16104;
								else if (West == West::Low) return 16105;
								else return 16106;
							else
								if (West == West::None) return 16107;
								else if (West == West::Low) return 16108;
								else return 16109;
						else
							if (Waterlogged)
								if (West == West::None) return 16110;
								else if (West == West::Low) return 16111;
								else return 16112;
							else
								if (West == West::None) return 16113;
								else if (West == West::Low) return 16114;
								else return 16115;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16116;
								else if (West == West::Low) return 16117;
								else return 16118;
							else
								if (West == West::None) return 16119;
								else if (West == West::Low) return 16120;
								else return 16121;
						else
							if (Waterlogged)
								if (West == West::None) return 16122;
								else if (West == West::Low) return 16123;
								else return 16124;
							else
								if (West == West::None) return 16125;
								else if (West == West::Low) return 16126;
								else return 16127;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16128;
								else if (West == West::Low) return 16129;
								else return 16130;
							else
								if (West == West::None) return 16131;
								else if (West == West::Low) return 16132;
								else return 16133;
						else
							if (Waterlogged)
								if (West == West::None) return 16134;
								else if (West == West::Low) return 16135;
								else return 16136;
							else
								if (West == West::None) return 16137;
								else if (West == West::Low) return 16138;
								else return 16139;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16140;
								else if (West == West::Low) return 16141;
								else return 16142;
							else
								if (West == West::None) return 16143;
								else if (West == West::Low) return 16144;
								else return 16145;
						else
							if (Waterlogged)
								if (West == West::None) return 16146;
								else if (West == West::Low) return 16147;
								else return 16148;
							else
								if (West == West::None) return 16149;
								else if (West == West::Low) return 16150;
								else return 16151;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16152;
								else if (West == West::Low) return 16153;
								else return 16154;
							else
								if (West == West::None) return 16155;
								else if (West == West::Low) return 16156;
								else return 16157;
						else
							if (Waterlogged)
								if (West == West::None) return 16158;
								else if (West == West::Low) return 16159;
								else return 16160;
							else
								if (West == West::None) return 16161;
								else if (West == West::Low) return 16162;
								else return 16163;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16164;
								else if (West == West::Low) return 16165;
								else return 16166;
							else
								if (West == West::None) return 16167;
								else if (West == West::Low) return 16168;
								else return 16169;
						else
							if (Waterlogged)
								if (West == West::None) return 16170;
								else if (West == West::Low) return 16171;
								else return 16172;
							else
								if (West == West::None) return 16173;
								else if (West == West::Low) return 16174;
								else return 16175;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16176;
								else if (West == West::Low) return 16177;
								else return 16178;
							else
								if (West == West::None) return 16179;
								else if (West == West::Low) return 16180;
								else return 16181;
						else
							if (Waterlogged)
								if (West == West::None) return 16182;
								else if (West == West::Low) return 16183;
								else return 16184;
							else
								if (West == West::None) return 16185;
								else if (West == West::Low) return 16186;
								else return 16187;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16188;
								else if (West == West::Low) return 16189;
								else return 16190;
							else
								if (West == West::None) return 16191;
								else if (West == West::Low) return 16192;
								else return 16193;
						else
							if (Waterlogged)
								if (West == West::None) return 16194;
								else if (West == West::Low) return 16195;
								else return 16196;
							else
								if (West == West::None) return 16197;
								else if (West == West::Low) return 16198;
								else return 16199;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16200;
								else if (West == West::Low) return 16201;
								else return 16202;
							else
								if (West == West::None) return 16203;
								else if (West == West::Low) return 16204;
								else return 16205;
						else
							if (Waterlogged)
								if (West == West::None) return 16206;
								else if (West == West::Low) return 16207;
								else return 16208;
							else
								if (West == West::None) return 16209;
								else if (West == West::Low) return 16210;
								else return 16211;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16212;
								else if (West == West::Low) return 16213;
								else return 16214;
							else
								if (West == West::None) return 16215;
								else if (West == West::Low) return 16216;
								else return 16217;
						else
							if (Waterlogged)
								if (West == West::None) return 16218;
								else if (West == West::Low) return 16219;
								else return 16220;
							else
								if (West == West::None) return 16221;
								else if (West == West::Low) return 16222;
								else return 16223;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16224;
								else if (West == West::Low) return 16225;
								else return 16226;
							else
								if (West == West::None) return 16227;
								else if (West == West::Low) return 16228;
								else return 16229;
						else
							if (Waterlogged)
								if (West == West::None) return 16230;
								else if (West == West::Low) return 16231;
								else return 16232;
							else
								if (West == West::None) return 16233;
								else if (West == West::Low) return 16234;
								else return 16235;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16236;
								else if (West == West::Low) return 16237;
								else return 16238;
							else
								if (West == West::None) return 16239;
								else if (West == West::Low) return 16240;
								else return 16241;
						else
							if (Waterlogged)
								if (West == West::None) return 16242;
								else if (West == West::Low) return 16243;
								else return 16244;
							else
								if (West == West::None) return 16245;
								else if (West == West::Low) return 16246;
								else return 16247;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16248;
								else if (West == West::Low) return 16249;
								else return 16250;
							else
								if (West == West::None) return 16251;
								else if (West == West::Low) return 16252;
								else return 16253;
						else
							if (Waterlogged)
								if (West == West::None) return 16254;
								else if (West == West::Low) return 16255;
								else return 16256;
							else
								if (West == West::None) return 16257;
								else if (West == West::Low) return 16258;
								else return 16259;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16260;
								else if (West == West::Low) return 16261;
								else return 16262;
							else
								if (West == West::None) return 16263;
								else if (West == West::Low) return 16264;
								else return 16265;
						else
							if (Waterlogged)
								if (West == West::None) return 16266;
								else if (West == West::Low) return 16267;
								else return 16268;
							else
								if (West == West::None) return 16269;
								else if (West == West::Low) return 16270;
								else return 16271;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16272;
								else if (West == West::Low) return 16273;
								else return 16274;
							else
								if (West == West::None) return 16275;
								else if (West == West::Low) return 16276;
								else return 16277;
						else
							if (Waterlogged)
								if (West == West::None) return 16278;
								else if (West == West::Low) return 16279;
								else return 16280;
							else
								if (West == West::None) return 16281;
								else if (West == West::Low) return 16282;
								else return 16283;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16284;
								else if (West == West::Low) return 16285;
								else return 16286;
							else
								if (West == West::None) return 16287;
								else if (West == West::Low) return 16288;
								else return 16289;
						else
							if (Waterlogged)
								if (West == West::None) return 16290;
								else if (West == West::Low) return 16291;
								else return 16292;
							else
								if (West == West::None) return 16293;
								else if (West == West::Low) return 16294;
								else return 16295;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16296;
								else if (West == West::Low) return 16297;
								else return 16298;
							else
								if (West == West::None) return 16299;
								else if (West == West::Low) return 16300;
								else return 16301;
						else
							if (Waterlogged)
								if (West == West::None) return 16302;
								else if (West == West::Low) return 16303;
								else return 16304;
							else
								if (West == West::None) return 16305;
								else if (West == West::Low) return 16306;
								else return 16307;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16308;
								else if (West == West::Low) return 16309;
								else return 16310;
							else
								if (West == West::None) return 16311;
								else if (West == West::Low) return 16312;
								else return 16313;
						else
							if (Waterlogged)
								if (West == West::None) return 16314;
								else if (West == West::Low) return 16315;
								else return 16316;
							else
								if (West == West::None) return 16317;
								else if (West == West::Low) return 16318;
								else return 16319;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16320;
								else if (West == West::Low) return 16321;
								else return 16322;
							else
								if (West == West::None) return 16323;
								else if (West == West::Low) return 16324;
								else return 16325;
						else
							if (Waterlogged)
								if (West == West::None) return 16326;
								else if (West == West::Low) return 16327;
								else return 16328;
							else
								if (West == West::None) return 16329;
								else if (West == West::Low) return 16330;
								else return 16331;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16332;
								else if (West == West::Low) return 16333;
								else return 16334;
							else
								if (West == West::None) return 16335;
								else if (West == West::Low) return 16336;
								else return 16337;
						else
							if (Waterlogged)
								if (West == West::None) return 16338;
								else if (West == West::Low) return 16339;
								else return 16340;
							else
								if (West == West::None) return 16341;
								else if (West == West::Low) return 16342;
								else return 16343;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16344;
								else if (West == West::Low) return 16345;
								else return 16346;
							else
								if (West == West::None) return 16347;
								else if (West == West::Low) return 16348;
								else return 16349;
						else
							if (Waterlogged)
								if (West == West::None) return 16350;
								else if (West == West::Low) return 16351;
								else return 16352;
							else
								if (West == West::None) return 16353;
								else if (West == West::Low) return 16354;
								else return 16355;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16356;
								else if (West == West::Low) return 16357;
								else return 16358;
							else
								if (West == West::None) return 16359;
								else if (West == West::Low) return 16360;
								else return 16361;
						else
							if (Waterlogged)
								if (West == West::None) return 16362;
								else if (West == West::Low) return 16363;
								else return 16364;
							else
								if (West == West::None) return 16365;
								else if (West == West::Low) return 16366;
								else return 16367;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16368;
								else if (West == West::Low) return 16369;
								else return 16370;
							else
								if (West == West::None) return 16371;
								else if (West == West::Low) return 16372;
								else return 16373;
						else
							if (Waterlogged)
								if (West == West::None) return 16374;
								else if (West == West::Low) return 16375;
								else return 16376;
							else
								if (West == West::None) return 16377;
								else if (West == West::Low) return 16378;
								else return 16379;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16380;
								else if (West == West::Low) return 16381;
								else return 16382;
							else
								if (West == West::None) return 16383;
								else if (West == West::Low) return 16384;
								else return 16385;
						else
							if (Waterlogged)
								if (West == West::None) return 16386;
								else if (West == West::Low) return 16387;
								else return 16388;
							else
								if (West == West::None) return 16389;
								else if (West == West::Low) return 16390;
								else return 16391;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16392;
								else if (West == West::Low) return 16393;
								else return 16394;
							else
								if (West == West::None) return 16395;
								else if (West == West::Low) return 16396;
								else return 16397;
						else
							if (Waterlogged)
								if (West == West::None) return 16398;
								else if (West == West::Low) return 16399;
								else return 16400;
							else
								if (West == West::None) return 16401;
								else if (West == West::Low) return 16402;
								else return 16403;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16404;
								else if (West == West::Low) return 16405;
								else return 16406;
							else
								if (West == West::None) return 16407;
								else if (West == West::Low) return 16408;
								else return 16409;
						else
							if (Waterlogged)
								if (West == West::None) return 16410;
								else if (West == West::Low) return 16411;
								else return 16412;
							else
								if (West == West::None) return 16413;
								else if (West == West::Low) return 16414;
								else return 16415;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16416;
								else if (West == West::Low) return 16417;
								else return 16418;
							else
								if (West == West::None) return 16419;
								else if (West == West::Low) return 16420;
								else return 16421;
						else
							if (Waterlogged)
								if (West == West::None) return 16422;
								else if (West == West::Low) return 16423;
								else return 16424;
							else
								if (West == West::None) return 16425;
								else if (West == West::Low) return 16426;
								else return 16427;
		}
		BlockState MudBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace MudBricks
	{
		constexpr BlockState MudBricks()
		{
			return 6542;
		}
	}
	namespace MuddyMangroveRoots
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState MuddyMangroveRoots(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 156;
			else if (Axis == Axis::Y) return 157;
			else return 158;
		}
		BlockState MuddyMangroveRoots();
		enum Axis Axis(BlockState Block);
	}
	namespace MushroomStem
	{
		constexpr BlockState MushroomStem(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6677;
								else return 6678;
							else
								if (West) return 6679;
								else return 6680;
						else
							if (Up)
								if (West) return 6681;
								else return 6682;
							else
								if (West) return 6683;
								else return 6684;
					else
						if (South)
							if (Up)
								if (West) return 6685;
								else return 6686;
							else
								if (West) return 6687;
								else return 6688;
						else
							if (Up)
								if (West) return 6689;
								else return 6690;
							else
								if (West) return 6691;
								else return 6692;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6693;
								else return 6694;
							else
								if (West) return 6695;
								else return 6696;
						else
							if (Up)
								if (West) return 6697;
								else return 6698;
							else
								if (West) return 6699;
								else return 6700;
					else
						if (South)
							if (Up)
								if (West) return 6701;
								else return 6702;
							else
								if (West) return 6703;
								else return 6704;
						else
							if (Up)
								if (West) return 6705;
								else return 6706;
							else
								if (West) return 6707;
								else return 6708;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6709;
								else return 6710;
							else
								if (West) return 6711;
								else return 6712;
						else
							if (Up)
								if (West) return 6713;
								else return 6714;
							else
								if (West) return 6715;
								else return 6716;
					else
						if (South)
							if (Up)
								if (West) return 6717;
								else return 6718;
							else
								if (West) return 6719;
								else return 6720;
						else
							if (Up)
								if (West) return 6721;
								else return 6722;
							else
								if (West) return 6723;
								else return 6724;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6725;
								else return 6726;
							else
								if (West) return 6727;
								else return 6728;
						else
							if (Up)
								if (West) return 6729;
								else return 6730;
							else
								if (West) return 6731;
								else return 6732;
					else
						if (South)
							if (Up)
								if (West) return 6733;
								else return 6734;
							else
								if (West) return 6735;
								else return 6736;
						else
							if (Up)
								if (West) return 6737;
								else return 6738;
							else
								if (West) return 6739;
								else return 6740;
		}
		BlockState MushroomStem();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace Mycelium
	{
		constexpr BlockState Mycelium(const bool Snowy)
		{
			if (Snowy) return 7269;
			else return 7270;
		}
		BlockState Mycelium();
		bool Snowy(BlockState Block);
	}
	namespace NetherBrickFence
	{
		constexpr BlockState NetherBrickFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 7273;
							else return 7274;
						else
							if (West) return 7275;
							else return 7276;
					else
						if (Waterlogged)
							if (West) return 7277;
							else return 7278;
						else
							if (West) return 7279;
							else return 7280;
				else
					if (South)
						if (Waterlogged)
							if (West) return 7281;
							else return 7282;
						else
							if (West) return 7283;
							else return 7284;
					else
						if (Waterlogged)
							if (West) return 7285;
							else return 7286;
						else
							if (West) return 7287;
							else return 7288;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 7289;
							else return 7290;
						else
							if (West) return 7291;
							else return 7292;
					else
						if (Waterlogged)
							if (West) return 7293;
							else return 7294;
						else
							if (West) return 7295;
							else return 7296;
				else
					if (South)
						if (Waterlogged)
							if (West) return 7297;
							else return 7298;
						else
							if (West) return 7299;
							else return 7300;
					else
						if (Waterlogged)
							if (West) return 7301;
							else return 7302;
						else
							if (West) return 7303;
							else return 7304;
		}
		BlockState NetherBrickFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace NetherBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState NetherBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11276;
				else return 11277;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11278;
				else return 11279;
			else
				if (Waterlogged) return 11280;
				else return 11281;
		}
		BlockState NetherBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace NetherBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState NetherBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7305;
						else return 7306;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7307;
						else return 7308;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7309;
						else return 7310;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7311;
						else return 7312;
					else
						if (Waterlogged) return 7313;
						else return 7314;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7315;
						else return 7316;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7317;
						else return 7318;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7319;
						else return 7320;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7321;
						else return 7322;
					else
						if (Waterlogged) return 7323;
						else return 7324;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7325;
						else return 7326;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7327;
						else return 7328;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7329;
						else return 7330;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7331;
						else return 7332;
					else
						if (Waterlogged) return 7333;
						else return 7334;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7335;
						else return 7336;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7337;
						else return 7338;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7339;
						else return 7340;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7341;
						else return 7342;
					else
						if (Waterlogged) return 7343;
						else return 7344;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7345;
						else return 7346;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7347;
						else return 7348;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7349;
						else return 7350;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7351;
						else return 7352;
					else
						if (Waterlogged) return 7353;
						else return 7354;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7355;
						else return 7356;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7357;
						else return 7358;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7359;
						else return 7360;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7361;
						else return 7362;
					else
						if (Waterlogged) return 7363;
						else return 7364;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7365;
						else return 7366;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7367;
						else return 7368;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7369;
						else return 7370;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7371;
						else return 7372;
					else
						if (Waterlogged) return 7373;
						else return 7374;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7375;
						else return 7376;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7377;
						else return 7378;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7379;
						else return 7380;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7381;
						else return 7382;
					else
						if (Waterlogged) return 7383;
						else return 7384;
		}
		BlockState NetherBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace NetherBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState NetherBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16428;
								else if (West == West::Low) return 16429;
								else return 16430;
							else
								if (West == West::None) return 16431;
								else if (West == West::Low) return 16432;
								else return 16433;
						else
							if (Waterlogged)
								if (West == West::None) return 16434;
								else if (West == West::Low) return 16435;
								else return 16436;
							else
								if (West == West::None) return 16437;
								else if (West == West::Low) return 16438;
								else return 16439;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16440;
								else if (West == West::Low) return 16441;
								else return 16442;
							else
								if (West == West::None) return 16443;
								else if (West == West::Low) return 16444;
								else return 16445;
						else
							if (Waterlogged)
								if (West == West::None) return 16446;
								else if (West == West::Low) return 16447;
								else return 16448;
							else
								if (West == West::None) return 16449;
								else if (West == West::Low) return 16450;
								else return 16451;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16452;
								else if (West == West::Low) return 16453;
								else return 16454;
							else
								if (West == West::None) return 16455;
								else if (West == West::Low) return 16456;
								else return 16457;
						else
							if (Waterlogged)
								if (West == West::None) return 16458;
								else if (West == West::Low) return 16459;
								else return 16460;
							else
								if (West == West::None) return 16461;
								else if (West == West::Low) return 16462;
								else return 16463;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16464;
								else if (West == West::Low) return 16465;
								else return 16466;
							else
								if (West == West::None) return 16467;
								else if (West == West::Low) return 16468;
								else return 16469;
						else
							if (Waterlogged)
								if (West == West::None) return 16470;
								else if (West == West::Low) return 16471;
								else return 16472;
							else
								if (West == West::None) return 16473;
								else if (West == West::Low) return 16474;
								else return 16475;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16476;
								else if (West == West::Low) return 16477;
								else return 16478;
							else
								if (West == West::None) return 16479;
								else if (West == West::Low) return 16480;
								else return 16481;
						else
							if (Waterlogged)
								if (West == West::None) return 16482;
								else if (West == West::Low) return 16483;
								else return 16484;
							else
								if (West == West::None) return 16485;
								else if (West == West::Low) return 16486;
								else return 16487;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16488;
								else if (West == West::Low) return 16489;
								else return 16490;
							else
								if (West == West::None) return 16491;
								else if (West == West::Low) return 16492;
								else return 16493;
						else
							if (Waterlogged)
								if (West == West::None) return 16494;
								else if (West == West::Low) return 16495;
								else return 16496;
							else
								if (West == West::None) return 16497;
								else if (West == West::Low) return 16498;
								else return 16499;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16500;
								else if (West == West::Low) return 16501;
								else return 16502;
							else
								if (West == West::None) return 16503;
								else if (West == West::Low) return 16504;
								else return 16505;
						else
							if (Waterlogged)
								if (West == West::None) return 16506;
								else if (West == West::Low) return 16507;
								else return 16508;
							else
								if (West == West::None) return 16509;
								else if (West == West::Low) return 16510;
								else return 16511;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16512;
								else if (West == West::Low) return 16513;
								else return 16514;
							else
								if (West == West::None) return 16515;
								else if (West == West::Low) return 16516;
								else return 16517;
						else
							if (Waterlogged)
								if (West == West::None) return 16518;
								else if (West == West::Low) return 16519;
								else return 16520;
							else
								if (West == West::None) return 16521;
								else if (West == West::Low) return 16522;
								else return 16523;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16524;
								else if (West == West::Low) return 16525;
								else return 16526;
							else
								if (West == West::None) return 16527;
								else if (West == West::Low) return 16528;
								else return 16529;
						else
							if (Waterlogged)
								if (West == West::None) return 16530;
								else if (West == West::Low) return 16531;
								else return 16532;
							else
								if (West == West::None) return 16533;
								else if (West == West::Low) return 16534;
								else return 16535;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16536;
								else if (West == West::Low) return 16537;
								else return 16538;
							else
								if (West == West::None) return 16539;
								else if (West == West::Low) return 16540;
								else return 16541;
						else
							if (Waterlogged)
								if (West == West::None) return 16542;
								else if (West == West::Low) return 16543;
								else return 16544;
							else
								if (West == West::None) return 16545;
								else if (West == West::Low) return 16546;
								else return 16547;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16548;
								else if (West == West::Low) return 16549;
								else return 16550;
							else
								if (West == West::None) return 16551;
								else if (West == West::Low) return 16552;
								else return 16553;
						else
							if (Waterlogged)
								if (West == West::None) return 16554;
								else if (West == West::Low) return 16555;
								else return 16556;
							else
								if (West == West::None) return 16557;
								else if (West == West::Low) return 16558;
								else return 16559;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16560;
								else if (West == West::Low) return 16561;
								else return 16562;
							else
								if (West == West::None) return 16563;
								else if (West == West::Low) return 16564;
								else return 16565;
						else
							if (Waterlogged)
								if (West == West::None) return 16566;
								else if (West == West::Low) return 16567;
								else return 16568;
							else
								if (West == West::None) return 16569;
								else if (West == West::Low) return 16570;
								else return 16571;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16572;
								else if (West == West::Low) return 16573;
								else return 16574;
							else
								if (West == West::None) return 16575;
								else if (West == West::Low) return 16576;
								else return 16577;
						else
							if (Waterlogged)
								if (West == West::None) return 16578;
								else if (West == West::Low) return 16579;
								else return 16580;
							else
								if (West == West::None) return 16581;
								else if (West == West::Low) return 16582;
								else return 16583;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16584;
								else if (West == West::Low) return 16585;
								else return 16586;
							else
								if (West == West::None) return 16587;
								else if (West == West::Low) return 16588;
								else return 16589;
						else
							if (Waterlogged)
								if (West == West::None) return 16590;
								else if (West == West::Low) return 16591;
								else return 16592;
							else
								if (West == West::None) return 16593;
								else if (West == West::Low) return 16594;
								else return 16595;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16596;
								else if (West == West::Low) return 16597;
								else return 16598;
							else
								if (West == West::None) return 16599;
								else if (West == West::Low) return 16600;
								else return 16601;
						else
							if (Waterlogged)
								if (West == West::None) return 16602;
								else if (West == West::Low) return 16603;
								else return 16604;
							else
								if (West == West::None) return 16605;
								else if (West == West::Low) return 16606;
								else return 16607;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16608;
								else if (West == West::Low) return 16609;
								else return 16610;
							else
								if (West == West::None) return 16611;
								else if (West == West::Low) return 16612;
								else return 16613;
						else
							if (Waterlogged)
								if (West == West::None) return 16614;
								else if (West == West::Low) return 16615;
								else return 16616;
							else
								if (West == West::None) return 16617;
								else if (West == West::Low) return 16618;
								else return 16619;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16620;
								else if (West == West::Low) return 16621;
								else return 16622;
							else
								if (West == West::None) return 16623;
								else if (West == West::Low) return 16624;
								else return 16625;
						else
							if (Waterlogged)
								if (West == West::None) return 16626;
								else if (West == West::Low) return 16627;
								else return 16628;
							else
								if (West == West::None) return 16629;
								else if (West == West::Low) return 16630;
								else return 16631;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16632;
								else if (West == West::Low) return 16633;
								else return 16634;
							else
								if (West == West::None) return 16635;
								else if (West == West::Low) return 16636;
								else return 16637;
						else
							if (Waterlogged)
								if (West == West::None) return 16638;
								else if (West == West::Low) return 16639;
								else return 16640;
							else
								if (West == West::None) return 16641;
								else if (West == West::Low) return 16642;
								else return 16643;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16644;
								else if (West == West::Low) return 16645;
								else return 16646;
							else
								if (West == West::None) return 16647;
								else if (West == West::Low) return 16648;
								else return 16649;
						else
							if (Waterlogged)
								if (West == West::None) return 16650;
								else if (West == West::Low) return 16651;
								else return 16652;
							else
								if (West == West::None) return 16653;
								else if (West == West::Low) return 16654;
								else return 16655;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16656;
								else if (West == West::Low) return 16657;
								else return 16658;
							else
								if (West == West::None) return 16659;
								else if (West == West::Low) return 16660;
								else return 16661;
						else
							if (Waterlogged)
								if (West == West::None) return 16662;
								else if (West == West::Low) return 16663;
								else return 16664;
							else
								if (West == West::None) return 16665;
								else if (West == West::Low) return 16666;
								else return 16667;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16668;
								else if (West == West::Low) return 16669;
								else return 16670;
							else
								if (West == West::None) return 16671;
								else if (West == West::Low) return 16672;
								else return 16673;
						else
							if (Waterlogged)
								if (West == West::None) return 16674;
								else if (West == West::Low) return 16675;
								else return 16676;
							else
								if (West == West::None) return 16677;
								else if (West == West::Low) return 16678;
								else return 16679;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16680;
								else if (West == West::Low) return 16681;
								else return 16682;
							else
								if (West == West::None) return 16683;
								else if (West == West::Low) return 16684;
								else return 16685;
						else
							if (Waterlogged)
								if (West == West::None) return 16686;
								else if (West == West::Low) return 16687;
								else return 16688;
							else
								if (West == West::None) return 16689;
								else if (West == West::Low) return 16690;
								else return 16691;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16692;
								else if (West == West::Low) return 16693;
								else return 16694;
							else
								if (West == West::None) return 16695;
								else if (West == West::Low) return 16696;
								else return 16697;
						else
							if (Waterlogged)
								if (West == West::None) return 16698;
								else if (West == West::Low) return 16699;
								else return 16700;
							else
								if (West == West::None) return 16701;
								else if (West == West::Low) return 16702;
								else return 16703;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16704;
								else if (West == West::Low) return 16705;
								else return 16706;
							else
								if (West == West::None) return 16707;
								else if (West == West::Low) return 16708;
								else return 16709;
						else
							if (Waterlogged)
								if (West == West::None) return 16710;
								else if (West == West::Low) return 16711;
								else return 16712;
							else
								if (West == West::None) return 16713;
								else if (West == West::Low) return 16714;
								else return 16715;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16716;
								else if (West == West::Low) return 16717;
								else return 16718;
							else
								if (West == West::None) return 16719;
								else if (West == West::Low) return 16720;
								else return 16721;
						else
							if (Waterlogged)
								if (West == West::None) return 16722;
								else if (West == West::Low) return 16723;
								else return 16724;
							else
								if (West == West::None) return 16725;
								else if (West == West::Low) return 16726;
								else return 16727;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16728;
								else if (West == West::Low) return 16729;
								else return 16730;
							else
								if (West == West::None) return 16731;
								else if (West == West::Low) return 16732;
								else return 16733;
						else
							if (Waterlogged)
								if (West == West::None) return 16734;
								else if (West == West::Low) return 16735;
								else return 16736;
							else
								if (West == West::None) return 16737;
								else if (West == West::Low) return 16738;
								else return 16739;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16740;
								else if (West == West::Low) return 16741;
								else return 16742;
							else
								if (West == West::None) return 16743;
								else if (West == West::Low) return 16744;
								else return 16745;
						else
							if (Waterlogged)
								if (West == West::None) return 16746;
								else if (West == West::Low) return 16747;
								else return 16748;
							else
								if (West == West::None) return 16749;
								else if (West == West::Low) return 16750;
								else return 16751;
		}
		BlockState NetherBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace NetherBricks
	{
		constexpr BlockState NetherBricks()
		{
			return 7272;
		}
	}
	namespace NetherGoldOre
	{
		constexpr BlockState NetherGoldOre()
		{
			return 129;
		}
	}
	namespace NetherPortal
	{
		enum class Axis
		{
			X,
			Z,
		};
		constexpr BlockState NetherPortal(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 5864;
			else return 5865;
		}
		BlockState NetherPortal();
		enum Axis Axis(BlockState Block);
	}
	namespace NetherQuartzOre
	{
		constexpr BlockState NetherQuartzOre()
		{
			return 9224;
		}
	}
	namespace NetherSprouts
	{
		constexpr BlockState NetherSprouts()
		{
			return 18595;
		}
	}
	namespace NetherWart
	{
		constexpr BlockState NetherWart(const int Age)
		{
			if (Age == 0) return 7385;
			else if (Age == 1) return 7386;
			else if (Age == 2) return 7387;
			else return 7388;
		}
		BlockState NetherWart();
		int Age(BlockState Block);
	}
	namespace NetherWartBlock
	{
		constexpr BlockState NetherWartBlock()
		{
			return 12544;
		}
	}
	namespace NetheriteBlock
	{
		constexpr BlockState NetheriteBlock()
		{
			return 19447;
		}
	}
	namespace Netherrack
	{
		constexpr BlockState Netherrack()
		{
			return 5849;
		}
	}
	namespace NoteBlock
	{
		enum class Instrument
		{
			Harp,
			Basedrum,
			Snare,
			Hat,
			Bass,
			Flute,
			Bell,
			Guitar,
			Chime,
			Xylophone,
			IronXylophone,
			CowBell,
			Didgeridoo,
			Bit,
			Banjo,
			Pling,
			Zombie,
			Skeleton,
			Creeper,
			Dragon,
			WitherSkeleton,
			Piglin,
			CustomHead,
		};
		constexpr BlockState NoteBlock(const enum Instrument Instrument, const int Note, const bool Powered)
		{
			if (Instrument == Instrument::Harp)
				if (Note == 0)
					if (Powered) return 538;
					else return 539;
				else if (Note == 1)
					if (Powered) return 540;
					else return 541;
				else if (Note == 2)
					if (Powered) return 542;
					else return 543;
				else if (Note == 3)
					if (Powered) return 544;
					else return 545;
				else if (Note == 4)
					if (Powered) return 546;
					else return 547;
				else if (Note == 5)
					if (Powered) return 548;
					else return 549;
				else if (Note == 6)
					if (Powered) return 550;
					else return 551;
				else if (Note == 7)
					if (Powered) return 552;
					else return 553;
				else if (Note == 8)
					if (Powered) return 554;
					else return 555;
				else if (Note == 9)
					if (Powered) return 556;
					else return 557;
				else if (Note == 10)
					if (Powered) return 558;
					else return 559;
				else if (Note == 11)
					if (Powered) return 560;
					else return 561;
				else if (Note == 12)
					if (Powered) return 562;
					else return 563;
				else if (Note == 13)
					if (Powered) return 564;
					else return 565;
				else if (Note == 14)
					if (Powered) return 566;
					else return 567;
				else if (Note == 15)
					if (Powered) return 568;
					else return 569;
				else if (Note == 16)
					if (Powered) return 570;
					else return 571;
				else if (Note == 17)
					if (Powered) return 572;
					else return 573;
				else if (Note == 18)
					if (Powered) return 574;
					else return 575;
				else if (Note == 19)
					if (Powered) return 576;
					else return 577;
				else if (Note == 20)
					if (Powered) return 578;
					else return 579;
				else if (Note == 21)
					if (Powered) return 580;
					else return 581;
				else if (Note == 22)
					if (Powered) return 582;
					else return 583;
				else if (Note == 23)
					if (Powered) return 584;
					else return 585;
				else
					if (Powered) return 586;
					else return 587;
			else if (Instrument == Instrument::Basedrum)
				if (Note == 0)
					if (Powered) return 588;
					else return 589;
				else if (Note == 1)
					if (Powered) return 590;
					else return 591;
				else if (Note == 2)
					if (Powered) return 592;
					else return 593;
				else if (Note == 3)
					if (Powered) return 594;
					else return 595;
				else if (Note == 4)
					if (Powered) return 596;
					else return 597;
				else if (Note == 5)
					if (Powered) return 598;
					else return 599;
				else if (Note == 6)
					if (Powered) return 600;
					else return 601;
				else if (Note == 7)
					if (Powered) return 602;
					else return 603;
				else if (Note == 8)
					if (Powered) return 604;
					else return 605;
				else if (Note == 9)
					if (Powered) return 606;
					else return 607;
				else if (Note == 10)
					if (Powered) return 608;
					else return 609;
				else if (Note == 11)
					if (Powered) return 610;
					else return 611;
				else if (Note == 12)
					if (Powered) return 612;
					else return 613;
				else if (Note == 13)
					if (Powered) return 614;
					else return 615;
				else if (Note == 14)
					if (Powered) return 616;
					else return 617;
				else if (Note == 15)
					if (Powered) return 618;
					else return 619;
				else if (Note == 16)
					if (Powered) return 620;
					else return 621;
				else if (Note == 17)
					if (Powered) return 622;
					else return 623;
				else if (Note == 18)
					if (Powered) return 624;
					else return 625;
				else if (Note == 19)
					if (Powered) return 626;
					else return 627;
				else if (Note == 20)
					if (Powered) return 628;
					else return 629;
				else if (Note == 21)
					if (Powered) return 630;
					else return 631;
				else if (Note == 22)
					if (Powered) return 632;
					else return 633;
				else if (Note == 23)
					if (Powered) return 634;
					else return 635;
				else
					if (Powered) return 636;
					else return 637;
			else if (Instrument == Instrument::Snare)
				if (Note == 0)
					if (Powered) return 638;
					else return 639;
				else if (Note == 1)
					if (Powered) return 640;
					else return 641;
				else if (Note == 2)
					if (Powered) return 642;
					else return 643;
				else if (Note == 3)
					if (Powered) return 644;
					else return 645;
				else if (Note == 4)
					if (Powered) return 646;
					else return 647;
				else if (Note == 5)
					if (Powered) return 648;
					else return 649;
				else if (Note == 6)
					if (Powered) return 650;
					else return 651;
				else if (Note == 7)
					if (Powered) return 652;
					else return 653;
				else if (Note == 8)
					if (Powered) return 654;
					else return 655;
				else if (Note == 9)
					if (Powered) return 656;
					else return 657;
				else if (Note == 10)
					if (Powered) return 658;
					else return 659;
				else if (Note == 11)
					if (Powered) return 660;
					else return 661;
				else if (Note == 12)
					if (Powered) return 662;
					else return 663;
				else if (Note == 13)
					if (Powered) return 664;
					else return 665;
				else if (Note == 14)
					if (Powered) return 666;
					else return 667;
				else if (Note == 15)
					if (Powered) return 668;
					else return 669;
				else if (Note == 16)
					if (Powered) return 670;
					else return 671;
				else if (Note == 17)
					if (Powered) return 672;
					else return 673;
				else if (Note == 18)
					if (Powered) return 674;
					else return 675;
				else if (Note == 19)
					if (Powered) return 676;
					else return 677;
				else if (Note == 20)
					if (Powered) return 678;
					else return 679;
				else if (Note == 21)
					if (Powered) return 680;
					else return 681;
				else if (Note == 22)
					if (Powered) return 682;
					else return 683;
				else if (Note == 23)
					if (Powered) return 684;
					else return 685;
				else
					if (Powered) return 686;
					else return 687;
			else if (Instrument == Instrument::Hat)
				if (Note == 0)
					if (Powered) return 688;
					else return 689;
				else if (Note == 1)
					if (Powered) return 690;
					else return 691;
				else if (Note == 2)
					if (Powered) return 692;
					else return 693;
				else if (Note == 3)
					if (Powered) return 694;
					else return 695;
				else if (Note == 4)
					if (Powered) return 696;
					else return 697;
				else if (Note == 5)
					if (Powered) return 698;
					else return 699;
				else if (Note == 6)
					if (Powered) return 700;
					else return 701;
				else if (Note == 7)
					if (Powered) return 702;
					else return 703;
				else if (Note == 8)
					if (Powered) return 704;
					else return 705;
				else if (Note == 9)
					if (Powered) return 706;
					else return 707;
				else if (Note == 10)
					if (Powered) return 708;
					else return 709;
				else if (Note == 11)
					if (Powered) return 710;
					else return 711;
				else if (Note == 12)
					if (Powered) return 712;
					else return 713;
				else if (Note == 13)
					if (Powered) return 714;
					else return 715;
				else if (Note == 14)
					if (Powered) return 716;
					else return 717;
				else if (Note == 15)
					if (Powered) return 718;
					else return 719;
				else if (Note == 16)
					if (Powered) return 720;
					else return 721;
				else if (Note == 17)
					if (Powered) return 722;
					else return 723;
				else if (Note == 18)
					if (Powered) return 724;
					else return 725;
				else if (Note == 19)
					if (Powered) return 726;
					else return 727;
				else if (Note == 20)
					if (Powered) return 728;
					else return 729;
				else if (Note == 21)
					if (Powered) return 730;
					else return 731;
				else if (Note == 22)
					if (Powered) return 732;
					else return 733;
				else if (Note == 23)
					if (Powered) return 734;
					else return 735;
				else
					if (Powered) return 736;
					else return 737;
			else if (Instrument == Instrument::Bass)
				if (Note == 0)
					if (Powered) return 738;
					else return 739;
				else if (Note == 1)
					if (Powered) return 740;
					else return 741;
				else if (Note == 2)
					if (Powered) return 742;
					else return 743;
				else if (Note == 3)
					if (Powered) return 744;
					else return 745;
				else if (Note == 4)
					if (Powered) return 746;
					else return 747;
				else if (Note == 5)
					if (Powered) return 748;
					else return 749;
				else if (Note == 6)
					if (Powered) return 750;
					else return 751;
				else if (Note == 7)
					if (Powered) return 752;
					else return 753;
				else if (Note == 8)
					if (Powered) return 754;
					else return 755;
				else if (Note == 9)
					if (Powered) return 756;
					else return 757;
				else if (Note == 10)
					if (Powered) return 758;
					else return 759;
				else if (Note == 11)
					if (Powered) return 760;
					else return 761;
				else if (Note == 12)
					if (Powered) return 762;
					else return 763;
				else if (Note == 13)
					if (Powered) return 764;
					else return 765;
				else if (Note == 14)
					if (Powered) return 766;
					else return 767;
				else if (Note == 15)
					if (Powered) return 768;
					else return 769;
				else if (Note == 16)
					if (Powered) return 770;
					else return 771;
				else if (Note == 17)
					if (Powered) return 772;
					else return 773;
				else if (Note == 18)
					if (Powered) return 774;
					else return 775;
				else if (Note == 19)
					if (Powered) return 776;
					else return 777;
				else if (Note == 20)
					if (Powered) return 778;
					else return 779;
				else if (Note == 21)
					if (Powered) return 780;
					else return 781;
				else if (Note == 22)
					if (Powered) return 782;
					else return 783;
				else if (Note == 23)
					if (Powered) return 784;
					else return 785;
				else
					if (Powered) return 786;
					else return 787;
			else if (Instrument == Instrument::Flute)
				if (Note == 0)
					if (Powered) return 788;
					else return 789;
				else if (Note == 1)
					if (Powered) return 790;
					else return 791;
				else if (Note == 2)
					if (Powered) return 792;
					else return 793;
				else if (Note == 3)
					if (Powered) return 794;
					else return 795;
				else if (Note == 4)
					if (Powered) return 796;
					else return 797;
				else if (Note == 5)
					if (Powered) return 798;
					else return 799;
				else if (Note == 6)
					if (Powered) return 800;
					else return 801;
				else if (Note == 7)
					if (Powered) return 802;
					else return 803;
				else if (Note == 8)
					if (Powered) return 804;
					else return 805;
				else if (Note == 9)
					if (Powered) return 806;
					else return 807;
				else if (Note == 10)
					if (Powered) return 808;
					else return 809;
				else if (Note == 11)
					if (Powered) return 810;
					else return 811;
				else if (Note == 12)
					if (Powered) return 812;
					else return 813;
				else if (Note == 13)
					if (Powered) return 814;
					else return 815;
				else if (Note == 14)
					if (Powered) return 816;
					else return 817;
				else if (Note == 15)
					if (Powered) return 818;
					else return 819;
				else if (Note == 16)
					if (Powered) return 820;
					else return 821;
				else if (Note == 17)
					if (Powered) return 822;
					else return 823;
				else if (Note == 18)
					if (Powered) return 824;
					else return 825;
				else if (Note == 19)
					if (Powered) return 826;
					else return 827;
				else if (Note == 20)
					if (Powered) return 828;
					else return 829;
				else if (Note == 21)
					if (Powered) return 830;
					else return 831;
				else if (Note == 22)
					if (Powered) return 832;
					else return 833;
				else if (Note == 23)
					if (Powered) return 834;
					else return 835;
				else
					if (Powered) return 836;
					else return 837;
			else if (Instrument == Instrument::Bell)
				if (Note == 0)
					if (Powered) return 838;
					else return 839;
				else if (Note == 1)
					if (Powered) return 840;
					else return 841;
				else if (Note == 2)
					if (Powered) return 842;
					else return 843;
				else if (Note == 3)
					if (Powered) return 844;
					else return 845;
				else if (Note == 4)
					if (Powered) return 846;
					else return 847;
				else if (Note == 5)
					if (Powered) return 848;
					else return 849;
				else if (Note == 6)
					if (Powered) return 850;
					else return 851;
				else if (Note == 7)
					if (Powered) return 852;
					else return 853;
				else if (Note == 8)
					if (Powered) return 854;
					else return 855;
				else if (Note == 9)
					if (Powered) return 856;
					else return 857;
				else if (Note == 10)
					if (Powered) return 858;
					else return 859;
				else if (Note == 11)
					if (Powered) return 860;
					else return 861;
				else if (Note == 12)
					if (Powered) return 862;
					else return 863;
				else if (Note == 13)
					if (Powered) return 864;
					else return 865;
				else if (Note == 14)
					if (Powered) return 866;
					else return 867;
				else if (Note == 15)
					if (Powered) return 868;
					else return 869;
				else if (Note == 16)
					if (Powered) return 870;
					else return 871;
				else if (Note == 17)
					if (Powered) return 872;
					else return 873;
				else if (Note == 18)
					if (Powered) return 874;
					else return 875;
				else if (Note == 19)
					if (Powered) return 876;
					else return 877;
				else if (Note == 20)
					if (Powered) return 878;
					else return 879;
				else if (Note == 21)
					if (Powered) return 880;
					else return 881;
				else if (Note == 22)
					if (Powered) return 882;
					else return 883;
				else if (Note == 23)
					if (Powered) return 884;
					else return 885;
				else
					if (Powered) return 886;
					else return 887;
			else if (Instrument == Instrument::Guitar)
				if (Note == 0)
					if (Powered) return 888;
					else return 889;
				else if (Note == 1)
					if (Powered) return 890;
					else return 891;
				else if (Note == 2)
					if (Powered) return 892;
					else return 893;
				else if (Note == 3)
					if (Powered) return 894;
					else return 895;
				else if (Note == 4)
					if (Powered) return 896;
					else return 897;
				else if (Note == 5)
					if (Powered) return 898;
					else return 899;
				else if (Note == 6)
					if (Powered) return 900;
					else return 901;
				else if (Note == 7)
					if (Powered) return 902;
					else return 903;
				else if (Note == 8)
					if (Powered) return 904;
					else return 905;
				else if (Note == 9)
					if (Powered) return 906;
					else return 907;
				else if (Note == 10)
					if (Powered) return 908;
					else return 909;
				else if (Note == 11)
					if (Powered) return 910;
					else return 911;
				else if (Note == 12)
					if (Powered) return 912;
					else return 913;
				else if (Note == 13)
					if (Powered) return 914;
					else return 915;
				else if (Note == 14)
					if (Powered) return 916;
					else return 917;
				else if (Note == 15)
					if (Powered) return 918;
					else return 919;
				else if (Note == 16)
					if (Powered) return 920;
					else return 921;
				else if (Note == 17)
					if (Powered) return 922;
					else return 923;
				else if (Note == 18)
					if (Powered) return 924;
					else return 925;
				else if (Note == 19)
					if (Powered) return 926;
					else return 927;
				else if (Note == 20)
					if (Powered) return 928;
					else return 929;
				else if (Note == 21)
					if (Powered) return 930;
					else return 931;
				else if (Note == 22)
					if (Powered) return 932;
					else return 933;
				else if (Note == 23)
					if (Powered) return 934;
					else return 935;
				else
					if (Powered) return 936;
					else return 937;
			else if (Instrument == Instrument::Chime)
				if (Note == 0)
					if (Powered) return 938;
					else return 939;
				else if (Note == 1)
					if (Powered) return 940;
					else return 941;
				else if (Note == 2)
					if (Powered) return 942;
					else return 943;
				else if (Note == 3)
					if (Powered) return 944;
					else return 945;
				else if (Note == 4)
					if (Powered) return 946;
					else return 947;
				else if (Note == 5)
					if (Powered) return 948;
					else return 949;
				else if (Note == 6)
					if (Powered) return 950;
					else return 951;
				else if (Note == 7)
					if (Powered) return 952;
					else return 953;
				else if (Note == 8)
					if (Powered) return 954;
					else return 955;
				else if (Note == 9)
					if (Powered) return 956;
					else return 957;
				else if (Note == 10)
					if (Powered) return 958;
					else return 959;
				else if (Note == 11)
					if (Powered) return 960;
					else return 961;
				else if (Note == 12)
					if (Powered) return 962;
					else return 963;
				else if (Note == 13)
					if (Powered) return 964;
					else return 965;
				else if (Note == 14)
					if (Powered) return 966;
					else return 967;
				else if (Note == 15)
					if (Powered) return 968;
					else return 969;
				else if (Note == 16)
					if (Powered) return 970;
					else return 971;
				else if (Note == 17)
					if (Powered) return 972;
					else return 973;
				else if (Note == 18)
					if (Powered) return 974;
					else return 975;
				else if (Note == 19)
					if (Powered) return 976;
					else return 977;
				else if (Note == 20)
					if (Powered) return 978;
					else return 979;
				else if (Note == 21)
					if (Powered) return 980;
					else return 981;
				else if (Note == 22)
					if (Powered) return 982;
					else return 983;
				else if (Note == 23)
					if (Powered) return 984;
					else return 985;
				else
					if (Powered) return 986;
					else return 987;
			else if (Instrument == Instrument::Xylophone)
				if (Note == 0)
					if (Powered) return 988;
					else return 989;
				else if (Note == 1)
					if (Powered) return 990;
					else return 991;
				else if (Note == 2)
					if (Powered) return 992;
					else return 993;
				else if (Note == 3)
					if (Powered) return 994;
					else return 995;
				else if (Note == 4)
					if (Powered) return 996;
					else return 997;
				else if (Note == 5)
					if (Powered) return 998;
					else return 999;
				else if (Note == 6)
					if (Powered) return 1000;
					else return 1001;
				else if (Note == 7)
					if (Powered) return 1002;
					else return 1003;
				else if (Note == 8)
					if (Powered) return 1004;
					else return 1005;
				else if (Note == 9)
					if (Powered) return 1006;
					else return 1007;
				else if (Note == 10)
					if (Powered) return 1008;
					else return 1009;
				else if (Note == 11)
					if (Powered) return 1010;
					else return 1011;
				else if (Note == 12)
					if (Powered) return 1012;
					else return 1013;
				else if (Note == 13)
					if (Powered) return 1014;
					else return 1015;
				else if (Note == 14)
					if (Powered) return 1016;
					else return 1017;
				else if (Note == 15)
					if (Powered) return 1018;
					else return 1019;
				else if (Note == 16)
					if (Powered) return 1020;
					else return 1021;
				else if (Note == 17)
					if (Powered) return 1022;
					else return 1023;
				else if (Note == 18)
					if (Powered) return 1024;
					else return 1025;
				else if (Note == 19)
					if (Powered) return 1026;
					else return 1027;
				else if (Note == 20)
					if (Powered) return 1028;
					else return 1029;
				else if (Note == 21)
					if (Powered) return 1030;
					else return 1031;
				else if (Note == 22)
					if (Powered) return 1032;
					else return 1033;
				else if (Note == 23)
					if (Powered) return 1034;
					else return 1035;
				else
					if (Powered) return 1036;
					else return 1037;
			else if (Instrument == Instrument::IronXylophone)
				if (Note == 0)
					if (Powered) return 1038;
					else return 1039;
				else if (Note == 1)
					if (Powered) return 1040;
					else return 1041;
				else if (Note == 2)
					if (Powered) return 1042;
					else return 1043;
				else if (Note == 3)
					if (Powered) return 1044;
					else return 1045;
				else if (Note == 4)
					if (Powered) return 1046;
					else return 1047;
				else if (Note == 5)
					if (Powered) return 1048;
					else return 1049;
				else if (Note == 6)
					if (Powered) return 1050;
					else return 1051;
				else if (Note == 7)
					if (Powered) return 1052;
					else return 1053;
				else if (Note == 8)
					if (Powered) return 1054;
					else return 1055;
				else if (Note == 9)
					if (Powered) return 1056;
					else return 1057;
				else if (Note == 10)
					if (Powered) return 1058;
					else return 1059;
				else if (Note == 11)
					if (Powered) return 1060;
					else return 1061;
				else if (Note == 12)
					if (Powered) return 1062;
					else return 1063;
				else if (Note == 13)
					if (Powered) return 1064;
					else return 1065;
				else if (Note == 14)
					if (Powered) return 1066;
					else return 1067;
				else if (Note == 15)
					if (Powered) return 1068;
					else return 1069;
				else if (Note == 16)
					if (Powered) return 1070;
					else return 1071;
				else if (Note == 17)
					if (Powered) return 1072;
					else return 1073;
				else if (Note == 18)
					if (Powered) return 1074;
					else return 1075;
				else if (Note == 19)
					if (Powered) return 1076;
					else return 1077;
				else if (Note == 20)
					if (Powered) return 1078;
					else return 1079;
				else if (Note == 21)
					if (Powered) return 1080;
					else return 1081;
				else if (Note == 22)
					if (Powered) return 1082;
					else return 1083;
				else if (Note == 23)
					if (Powered) return 1084;
					else return 1085;
				else
					if (Powered) return 1086;
					else return 1087;
			else if (Instrument == Instrument::CowBell)
				if (Note == 0)
					if (Powered) return 1088;
					else return 1089;
				else if (Note == 1)
					if (Powered) return 1090;
					else return 1091;
				else if (Note == 2)
					if (Powered) return 1092;
					else return 1093;
				else if (Note == 3)
					if (Powered) return 1094;
					else return 1095;
				else if (Note == 4)
					if (Powered) return 1096;
					else return 1097;
				else if (Note == 5)
					if (Powered) return 1098;
					else return 1099;
				else if (Note == 6)
					if (Powered) return 1100;
					else return 1101;
				else if (Note == 7)
					if (Powered) return 1102;
					else return 1103;
				else if (Note == 8)
					if (Powered) return 1104;
					else return 1105;
				else if (Note == 9)
					if (Powered) return 1106;
					else return 1107;
				else if (Note == 10)
					if (Powered) return 1108;
					else return 1109;
				else if (Note == 11)
					if (Powered) return 1110;
					else return 1111;
				else if (Note == 12)
					if (Powered) return 1112;
					else return 1113;
				else if (Note == 13)
					if (Powered) return 1114;
					else return 1115;
				else if (Note == 14)
					if (Powered) return 1116;
					else return 1117;
				else if (Note == 15)
					if (Powered) return 1118;
					else return 1119;
				else if (Note == 16)
					if (Powered) return 1120;
					else return 1121;
				else if (Note == 17)
					if (Powered) return 1122;
					else return 1123;
				else if (Note == 18)
					if (Powered) return 1124;
					else return 1125;
				else if (Note == 19)
					if (Powered) return 1126;
					else return 1127;
				else if (Note == 20)
					if (Powered) return 1128;
					else return 1129;
				else if (Note == 21)
					if (Powered) return 1130;
					else return 1131;
				else if (Note == 22)
					if (Powered) return 1132;
					else return 1133;
				else if (Note == 23)
					if (Powered) return 1134;
					else return 1135;
				else
					if (Powered) return 1136;
					else return 1137;
			else if (Instrument == Instrument::Didgeridoo)
				if (Note == 0)
					if (Powered) return 1138;
					else return 1139;
				else if (Note == 1)
					if (Powered) return 1140;
					else return 1141;
				else if (Note == 2)
					if (Powered) return 1142;
					else return 1143;
				else if (Note == 3)
					if (Powered) return 1144;
					else return 1145;
				else if (Note == 4)
					if (Powered) return 1146;
					else return 1147;
				else if (Note == 5)
					if (Powered) return 1148;
					else return 1149;
				else if (Note == 6)
					if (Powered) return 1150;
					else return 1151;
				else if (Note == 7)
					if (Powered) return 1152;
					else return 1153;
				else if (Note == 8)
					if (Powered) return 1154;
					else return 1155;
				else if (Note == 9)
					if (Powered) return 1156;
					else return 1157;
				else if (Note == 10)
					if (Powered) return 1158;
					else return 1159;
				else if (Note == 11)
					if (Powered) return 1160;
					else return 1161;
				else if (Note == 12)
					if (Powered) return 1162;
					else return 1163;
				else if (Note == 13)
					if (Powered) return 1164;
					else return 1165;
				else if (Note == 14)
					if (Powered) return 1166;
					else return 1167;
				else if (Note == 15)
					if (Powered) return 1168;
					else return 1169;
				else if (Note == 16)
					if (Powered) return 1170;
					else return 1171;
				else if (Note == 17)
					if (Powered) return 1172;
					else return 1173;
				else if (Note == 18)
					if (Powered) return 1174;
					else return 1175;
				else if (Note == 19)
					if (Powered) return 1176;
					else return 1177;
				else if (Note == 20)
					if (Powered) return 1178;
					else return 1179;
				else if (Note == 21)
					if (Powered) return 1180;
					else return 1181;
				else if (Note == 22)
					if (Powered) return 1182;
					else return 1183;
				else if (Note == 23)
					if (Powered) return 1184;
					else return 1185;
				else
					if (Powered) return 1186;
					else return 1187;
			else if (Instrument == Instrument::Bit)
				if (Note == 0)
					if (Powered) return 1188;
					else return 1189;
				else if (Note == 1)
					if (Powered) return 1190;
					else return 1191;
				else if (Note == 2)
					if (Powered) return 1192;
					else return 1193;
				else if (Note == 3)
					if (Powered) return 1194;
					else return 1195;
				else if (Note == 4)
					if (Powered) return 1196;
					else return 1197;
				else if (Note == 5)
					if (Powered) return 1198;
					else return 1199;
				else if (Note == 6)
					if (Powered) return 1200;
					else return 1201;
				else if (Note == 7)
					if (Powered) return 1202;
					else return 1203;
				else if (Note == 8)
					if (Powered) return 1204;
					else return 1205;
				else if (Note == 9)
					if (Powered) return 1206;
					else return 1207;
				else if (Note == 10)
					if (Powered) return 1208;
					else return 1209;
				else if (Note == 11)
					if (Powered) return 1210;
					else return 1211;
				else if (Note == 12)
					if (Powered) return 1212;
					else return 1213;
				else if (Note == 13)
					if (Powered) return 1214;
					else return 1215;
				else if (Note == 14)
					if (Powered) return 1216;
					else return 1217;
				else if (Note == 15)
					if (Powered) return 1218;
					else return 1219;
				else if (Note == 16)
					if (Powered) return 1220;
					else return 1221;
				else if (Note == 17)
					if (Powered) return 1222;
					else return 1223;
				else if (Note == 18)
					if (Powered) return 1224;
					else return 1225;
				else if (Note == 19)
					if (Powered) return 1226;
					else return 1227;
				else if (Note == 20)
					if (Powered) return 1228;
					else return 1229;
				else if (Note == 21)
					if (Powered) return 1230;
					else return 1231;
				else if (Note == 22)
					if (Powered) return 1232;
					else return 1233;
				else if (Note == 23)
					if (Powered) return 1234;
					else return 1235;
				else
					if (Powered) return 1236;
					else return 1237;
			else if (Instrument == Instrument::Banjo)
				if (Note == 0)
					if (Powered) return 1238;
					else return 1239;
				else if (Note == 1)
					if (Powered) return 1240;
					else return 1241;
				else if (Note == 2)
					if (Powered) return 1242;
					else return 1243;
				else if (Note == 3)
					if (Powered) return 1244;
					else return 1245;
				else if (Note == 4)
					if (Powered) return 1246;
					else return 1247;
				else if (Note == 5)
					if (Powered) return 1248;
					else return 1249;
				else if (Note == 6)
					if (Powered) return 1250;
					else return 1251;
				else if (Note == 7)
					if (Powered) return 1252;
					else return 1253;
				else if (Note == 8)
					if (Powered) return 1254;
					else return 1255;
				else if (Note == 9)
					if (Powered) return 1256;
					else return 1257;
				else if (Note == 10)
					if (Powered) return 1258;
					else return 1259;
				else if (Note == 11)
					if (Powered) return 1260;
					else return 1261;
				else if (Note == 12)
					if (Powered) return 1262;
					else return 1263;
				else if (Note == 13)
					if (Powered) return 1264;
					else return 1265;
				else if (Note == 14)
					if (Powered) return 1266;
					else return 1267;
				else if (Note == 15)
					if (Powered) return 1268;
					else return 1269;
				else if (Note == 16)
					if (Powered) return 1270;
					else return 1271;
				else if (Note == 17)
					if (Powered) return 1272;
					else return 1273;
				else if (Note == 18)
					if (Powered) return 1274;
					else return 1275;
				else if (Note == 19)
					if (Powered) return 1276;
					else return 1277;
				else if (Note == 20)
					if (Powered) return 1278;
					else return 1279;
				else if (Note == 21)
					if (Powered) return 1280;
					else return 1281;
				else if (Note == 22)
					if (Powered) return 1282;
					else return 1283;
				else if (Note == 23)
					if (Powered) return 1284;
					else return 1285;
				else
					if (Powered) return 1286;
					else return 1287;
			else if (Instrument == Instrument::Pling)
				if (Note == 0)
					if (Powered) return 1288;
					else return 1289;
				else if (Note == 1)
					if (Powered) return 1290;
					else return 1291;
				else if (Note == 2)
					if (Powered) return 1292;
					else return 1293;
				else if (Note == 3)
					if (Powered) return 1294;
					else return 1295;
				else if (Note == 4)
					if (Powered) return 1296;
					else return 1297;
				else if (Note == 5)
					if (Powered) return 1298;
					else return 1299;
				else if (Note == 6)
					if (Powered) return 1300;
					else return 1301;
				else if (Note == 7)
					if (Powered) return 1302;
					else return 1303;
				else if (Note == 8)
					if (Powered) return 1304;
					else return 1305;
				else if (Note == 9)
					if (Powered) return 1306;
					else return 1307;
				else if (Note == 10)
					if (Powered) return 1308;
					else return 1309;
				else if (Note == 11)
					if (Powered) return 1310;
					else return 1311;
				else if (Note == 12)
					if (Powered) return 1312;
					else return 1313;
				else if (Note == 13)
					if (Powered) return 1314;
					else return 1315;
				else if (Note == 14)
					if (Powered) return 1316;
					else return 1317;
				else if (Note == 15)
					if (Powered) return 1318;
					else return 1319;
				else if (Note == 16)
					if (Powered) return 1320;
					else return 1321;
				else if (Note == 17)
					if (Powered) return 1322;
					else return 1323;
				else if (Note == 18)
					if (Powered) return 1324;
					else return 1325;
				else if (Note == 19)
					if (Powered) return 1326;
					else return 1327;
				else if (Note == 20)
					if (Powered) return 1328;
					else return 1329;
				else if (Note == 21)
					if (Powered) return 1330;
					else return 1331;
				else if (Note == 22)
					if (Powered) return 1332;
					else return 1333;
				else if (Note == 23)
					if (Powered) return 1334;
					else return 1335;
				else
					if (Powered) return 1336;
					else return 1337;
			else if (Instrument == Instrument::Zombie)
				if (Note == 0)
					if (Powered) return 1338;
					else return 1339;
				else if (Note == 1)
					if (Powered) return 1340;
					else return 1341;
				else if (Note == 2)
					if (Powered) return 1342;
					else return 1343;
				else if (Note == 3)
					if (Powered) return 1344;
					else return 1345;
				else if (Note == 4)
					if (Powered) return 1346;
					else return 1347;
				else if (Note == 5)
					if (Powered) return 1348;
					else return 1349;
				else if (Note == 6)
					if (Powered) return 1350;
					else return 1351;
				else if (Note == 7)
					if (Powered) return 1352;
					else return 1353;
				else if (Note == 8)
					if (Powered) return 1354;
					else return 1355;
				else if (Note == 9)
					if (Powered) return 1356;
					else return 1357;
				else if (Note == 10)
					if (Powered) return 1358;
					else return 1359;
				else if (Note == 11)
					if (Powered) return 1360;
					else return 1361;
				else if (Note == 12)
					if (Powered) return 1362;
					else return 1363;
				else if (Note == 13)
					if (Powered) return 1364;
					else return 1365;
				else if (Note == 14)
					if (Powered) return 1366;
					else return 1367;
				else if (Note == 15)
					if (Powered) return 1368;
					else return 1369;
				else if (Note == 16)
					if (Powered) return 1370;
					else return 1371;
				else if (Note == 17)
					if (Powered) return 1372;
					else return 1373;
				else if (Note == 18)
					if (Powered) return 1374;
					else return 1375;
				else if (Note == 19)
					if (Powered) return 1376;
					else return 1377;
				else if (Note == 20)
					if (Powered) return 1378;
					else return 1379;
				else if (Note == 21)
					if (Powered) return 1380;
					else return 1381;
				else if (Note == 22)
					if (Powered) return 1382;
					else return 1383;
				else if (Note == 23)
					if (Powered) return 1384;
					else return 1385;
				else
					if (Powered) return 1386;
					else return 1387;
			else if (Instrument == Instrument::Skeleton)
				if (Note == 0)
					if (Powered) return 1388;
					else return 1389;
				else if (Note == 1)
					if (Powered) return 1390;
					else return 1391;
				else if (Note == 2)
					if (Powered) return 1392;
					else return 1393;
				else if (Note == 3)
					if (Powered) return 1394;
					else return 1395;
				else if (Note == 4)
					if (Powered) return 1396;
					else return 1397;
				else if (Note == 5)
					if (Powered) return 1398;
					else return 1399;
				else if (Note == 6)
					if (Powered) return 1400;
					else return 1401;
				else if (Note == 7)
					if (Powered) return 1402;
					else return 1403;
				else if (Note == 8)
					if (Powered) return 1404;
					else return 1405;
				else if (Note == 9)
					if (Powered) return 1406;
					else return 1407;
				else if (Note == 10)
					if (Powered) return 1408;
					else return 1409;
				else if (Note == 11)
					if (Powered) return 1410;
					else return 1411;
				else if (Note == 12)
					if (Powered) return 1412;
					else return 1413;
				else if (Note == 13)
					if (Powered) return 1414;
					else return 1415;
				else if (Note == 14)
					if (Powered) return 1416;
					else return 1417;
				else if (Note == 15)
					if (Powered) return 1418;
					else return 1419;
				else if (Note == 16)
					if (Powered) return 1420;
					else return 1421;
				else if (Note == 17)
					if (Powered) return 1422;
					else return 1423;
				else if (Note == 18)
					if (Powered) return 1424;
					else return 1425;
				else if (Note == 19)
					if (Powered) return 1426;
					else return 1427;
				else if (Note == 20)
					if (Powered) return 1428;
					else return 1429;
				else if (Note == 21)
					if (Powered) return 1430;
					else return 1431;
				else if (Note == 22)
					if (Powered) return 1432;
					else return 1433;
				else if (Note == 23)
					if (Powered) return 1434;
					else return 1435;
				else
					if (Powered) return 1436;
					else return 1437;
			else if (Instrument == Instrument::Creeper)
				if (Note == 0)
					if (Powered) return 1438;
					else return 1439;
				else if (Note == 1)
					if (Powered) return 1440;
					else return 1441;
				else if (Note == 2)
					if (Powered) return 1442;
					else return 1443;
				else if (Note == 3)
					if (Powered) return 1444;
					else return 1445;
				else if (Note == 4)
					if (Powered) return 1446;
					else return 1447;
				else if (Note == 5)
					if (Powered) return 1448;
					else return 1449;
				else if (Note == 6)
					if (Powered) return 1450;
					else return 1451;
				else if (Note == 7)
					if (Powered) return 1452;
					else return 1453;
				else if (Note == 8)
					if (Powered) return 1454;
					else return 1455;
				else if (Note == 9)
					if (Powered) return 1456;
					else return 1457;
				else if (Note == 10)
					if (Powered) return 1458;
					else return 1459;
				else if (Note == 11)
					if (Powered) return 1460;
					else return 1461;
				else if (Note == 12)
					if (Powered) return 1462;
					else return 1463;
				else if (Note == 13)
					if (Powered) return 1464;
					else return 1465;
				else if (Note == 14)
					if (Powered) return 1466;
					else return 1467;
				else if (Note == 15)
					if (Powered) return 1468;
					else return 1469;
				else if (Note == 16)
					if (Powered) return 1470;
					else return 1471;
				else if (Note == 17)
					if (Powered) return 1472;
					else return 1473;
				else if (Note == 18)
					if (Powered) return 1474;
					else return 1475;
				else if (Note == 19)
					if (Powered) return 1476;
					else return 1477;
				else if (Note == 20)
					if (Powered) return 1478;
					else return 1479;
				else if (Note == 21)
					if (Powered) return 1480;
					else return 1481;
				else if (Note == 22)
					if (Powered) return 1482;
					else return 1483;
				else if (Note == 23)
					if (Powered) return 1484;
					else return 1485;
				else
					if (Powered) return 1486;
					else return 1487;
			else if (Instrument == Instrument::Dragon)
				if (Note == 0)
					if (Powered) return 1488;
					else return 1489;
				else if (Note == 1)
					if (Powered) return 1490;
					else return 1491;
				else if (Note == 2)
					if (Powered) return 1492;
					else return 1493;
				else if (Note == 3)
					if (Powered) return 1494;
					else return 1495;
				else if (Note == 4)
					if (Powered) return 1496;
					else return 1497;
				else if (Note == 5)
					if (Powered) return 1498;
					else return 1499;
				else if (Note == 6)
					if (Powered) return 1500;
					else return 1501;
				else if (Note == 7)
					if (Powered) return 1502;
					else return 1503;
				else if (Note == 8)
					if (Powered) return 1504;
					else return 1505;
				else if (Note == 9)
					if (Powered) return 1506;
					else return 1507;
				else if (Note == 10)
					if (Powered) return 1508;
					else return 1509;
				else if (Note == 11)
					if (Powered) return 1510;
					else return 1511;
				else if (Note == 12)
					if (Powered) return 1512;
					else return 1513;
				else if (Note == 13)
					if (Powered) return 1514;
					else return 1515;
				else if (Note == 14)
					if (Powered) return 1516;
					else return 1517;
				else if (Note == 15)
					if (Powered) return 1518;
					else return 1519;
				else if (Note == 16)
					if (Powered) return 1520;
					else return 1521;
				else if (Note == 17)
					if (Powered) return 1522;
					else return 1523;
				else if (Note == 18)
					if (Powered) return 1524;
					else return 1525;
				else if (Note == 19)
					if (Powered) return 1526;
					else return 1527;
				else if (Note == 20)
					if (Powered) return 1528;
					else return 1529;
				else if (Note == 21)
					if (Powered) return 1530;
					else return 1531;
				else if (Note == 22)
					if (Powered) return 1532;
					else return 1533;
				else if (Note == 23)
					if (Powered) return 1534;
					else return 1535;
				else
					if (Powered) return 1536;
					else return 1537;
			else if (Instrument == Instrument::WitherSkeleton)
				if (Note == 0)
					if (Powered) return 1538;
					else return 1539;
				else if (Note == 1)
					if (Powered) return 1540;
					else return 1541;
				else if (Note == 2)
					if (Powered) return 1542;
					else return 1543;
				else if (Note == 3)
					if (Powered) return 1544;
					else return 1545;
				else if (Note == 4)
					if (Powered) return 1546;
					else return 1547;
				else if (Note == 5)
					if (Powered) return 1548;
					else return 1549;
				else if (Note == 6)
					if (Powered) return 1550;
					else return 1551;
				else if (Note == 7)
					if (Powered) return 1552;
					else return 1553;
				else if (Note == 8)
					if (Powered) return 1554;
					else return 1555;
				else if (Note == 9)
					if (Powered) return 1556;
					else return 1557;
				else if (Note == 10)
					if (Powered) return 1558;
					else return 1559;
				else if (Note == 11)
					if (Powered) return 1560;
					else return 1561;
				else if (Note == 12)
					if (Powered) return 1562;
					else return 1563;
				else if (Note == 13)
					if (Powered) return 1564;
					else return 1565;
				else if (Note == 14)
					if (Powered) return 1566;
					else return 1567;
				else if (Note == 15)
					if (Powered) return 1568;
					else return 1569;
				else if (Note == 16)
					if (Powered) return 1570;
					else return 1571;
				else if (Note == 17)
					if (Powered) return 1572;
					else return 1573;
				else if (Note == 18)
					if (Powered) return 1574;
					else return 1575;
				else if (Note == 19)
					if (Powered) return 1576;
					else return 1577;
				else if (Note == 20)
					if (Powered) return 1578;
					else return 1579;
				else if (Note == 21)
					if (Powered) return 1580;
					else return 1581;
				else if (Note == 22)
					if (Powered) return 1582;
					else return 1583;
				else if (Note == 23)
					if (Powered) return 1584;
					else return 1585;
				else
					if (Powered) return 1586;
					else return 1587;
			else if (Instrument == Instrument::Piglin)
				if (Note == 0)
					if (Powered) return 1588;
					else return 1589;
				else if (Note == 1)
					if (Powered) return 1590;
					else return 1591;
				else if (Note == 2)
					if (Powered) return 1592;
					else return 1593;
				else if (Note == 3)
					if (Powered) return 1594;
					else return 1595;
				else if (Note == 4)
					if (Powered) return 1596;
					else return 1597;
				else if (Note == 5)
					if (Powered) return 1598;
					else return 1599;
				else if (Note == 6)
					if (Powered) return 1600;
					else return 1601;
				else if (Note == 7)
					if (Powered) return 1602;
					else return 1603;
				else if (Note == 8)
					if (Powered) return 1604;
					else return 1605;
				else if (Note == 9)
					if (Powered) return 1606;
					else return 1607;
				else if (Note == 10)
					if (Powered) return 1608;
					else return 1609;
				else if (Note == 11)
					if (Powered) return 1610;
					else return 1611;
				else if (Note == 12)
					if (Powered) return 1612;
					else return 1613;
				else if (Note == 13)
					if (Powered) return 1614;
					else return 1615;
				else if (Note == 14)
					if (Powered) return 1616;
					else return 1617;
				else if (Note == 15)
					if (Powered) return 1618;
					else return 1619;
				else if (Note == 16)
					if (Powered) return 1620;
					else return 1621;
				else if (Note == 17)
					if (Powered) return 1622;
					else return 1623;
				else if (Note == 18)
					if (Powered) return 1624;
					else return 1625;
				else if (Note == 19)
					if (Powered) return 1626;
					else return 1627;
				else if (Note == 20)
					if (Powered) return 1628;
					else return 1629;
				else if (Note == 21)
					if (Powered) return 1630;
					else return 1631;
				else if (Note == 22)
					if (Powered) return 1632;
					else return 1633;
				else if (Note == 23)
					if (Powered) return 1634;
					else return 1635;
				else
					if (Powered) return 1636;
					else return 1637;
			else
				if (Note == 0)
					if (Powered) return 1638;
					else return 1639;
				else if (Note == 1)
					if (Powered) return 1640;
					else return 1641;
				else if (Note == 2)
					if (Powered) return 1642;
					else return 1643;
				else if (Note == 3)
					if (Powered) return 1644;
					else return 1645;
				else if (Note == 4)
					if (Powered) return 1646;
					else return 1647;
				else if (Note == 5)
					if (Powered) return 1648;
					else return 1649;
				else if (Note == 6)
					if (Powered) return 1650;
					else return 1651;
				else if (Note == 7)
					if (Powered) return 1652;
					else return 1653;
				else if (Note == 8)
					if (Powered) return 1654;
					else return 1655;
				else if (Note == 9)
					if (Powered) return 1656;
					else return 1657;
				else if (Note == 10)
					if (Powered) return 1658;
					else return 1659;
				else if (Note == 11)
					if (Powered) return 1660;
					else return 1661;
				else if (Note == 12)
					if (Powered) return 1662;
					else return 1663;
				else if (Note == 13)
					if (Powered) return 1664;
					else return 1665;
				else if (Note == 14)
					if (Powered) return 1666;
					else return 1667;
				else if (Note == 15)
					if (Powered) return 1668;
					else return 1669;
				else if (Note == 16)
					if (Powered) return 1670;
					else return 1671;
				else if (Note == 17)
					if (Powered) return 1672;
					else return 1673;
				else if (Note == 18)
					if (Powered) return 1674;
					else return 1675;
				else if (Note == 19)
					if (Powered) return 1676;
					else return 1677;
				else if (Note == 20)
					if (Powered) return 1678;
					else return 1679;
				else if (Note == 21)
					if (Powered) return 1680;
					else return 1681;
				else if (Note == 22)
					if (Powered) return 1682;
					else return 1683;
				else if (Note == 23)
					if (Powered) return 1684;
					else return 1685;
				else
					if (Powered) return 1686;
					else return 1687;
		}
		BlockState NoteBlock();
		enum Instrument Instrument(BlockState Block);
		int Note(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState OakButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8611;
					else return 8612;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8613;
					else return 8614;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8615;
					else return 8616;
				else
					if (Powered) return 8617;
					else return 8618;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8619;
					else return 8620;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8621;
					else return 8622;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8623;
					else return 8624;
				else
					if (Powered) return 8625;
					else return 8626;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8627;
					else return 8628;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8629;
					else return 8630;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8631;
					else return 8632;
				else
					if (Powered) return 8633;
					else return 8634;
		}
		BlockState OakButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState OakDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4590;
							else return 4591;
						else
							if (Powered) return 4592;
							else return 4593;
					else
						if (Open)
							if (Powered) return 4594;
							else return 4595;
						else
							if (Powered) return 4596;
							else return 4597;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4598;
							else return 4599;
						else
							if (Powered) return 4600;
							else return 4601;
					else
						if (Open)
							if (Powered) return 4602;
							else return 4603;
						else
							if (Powered) return 4604;
							else return 4605;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4606;
							else return 4607;
						else
							if (Powered) return 4608;
							else return 4609;
					else
						if (Open)
							if (Powered) return 4610;
							else return 4611;
						else
							if (Powered) return 4612;
							else return 4613;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4614;
							else return 4615;
						else
							if (Powered) return 4616;
							else return 4617;
					else
						if (Open)
							if (Powered) return 4618;
							else return 4619;
						else
							if (Powered) return 4620;
							else return 4621;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4622;
							else return 4623;
						else
							if (Powered) return 4624;
							else return 4625;
					else
						if (Open)
							if (Powered) return 4626;
							else return 4627;
						else
							if (Powered) return 4628;
							else return 4629;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4630;
							else return 4631;
						else
							if (Powered) return 4632;
							else return 4633;
					else
						if (Open)
							if (Powered) return 4634;
							else return 4635;
						else
							if (Powered) return 4636;
							else return 4637;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4638;
							else return 4639;
						else
							if (Powered) return 4640;
							else return 4641;
					else
						if (Open)
							if (Powered) return 4642;
							else return 4643;
						else
							if (Powered) return 4644;
							else return 4645;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 4646;
							else return 4647;
						else
							if (Powered) return 4648;
							else return 4649;
					else
						if (Open)
							if (Powered) return 4650;
							else return 4651;
						else
							if (Powered) return 4652;
							else return 4653;
		}
		BlockState OakDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakFence
	{
		constexpr BlockState OakFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 5817;
							else return 5818;
						else
							if (West) return 5819;
							else return 5820;
					else
						if (Waterlogged)
							if (West) return 5821;
							else return 5822;
						else
							if (West) return 5823;
							else return 5824;
				else
					if (South)
						if (Waterlogged)
							if (West) return 5825;
							else return 5826;
						else
							if (West) return 5827;
							else return 5828;
					else
						if (Waterlogged)
							if (West) return 5829;
							else return 5830;
						else
							if (West) return 5831;
							else return 5832;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 5833;
							else return 5834;
						else
							if (West) return 5835;
							else return 5836;
					else
						if (Waterlogged)
							if (West) return 5837;
							else return 5838;
						else
							if (West) return 5839;
							else return 5840;
				else
					if (South)
						if (Waterlogged)
							if (West) return 5841;
							else return 5842;
						else
							if (West) return 5843;
							else return 5844;
					else
						if (Waterlogged)
							if (West) return 5845;
							else return 5846;
						else
							if (West) return 5847;
							else return 5848;
		}
		BlockState OakFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace OakFenceGate
	{
		constexpr BlockState OakFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 6997;
						else return 6998;
					else
						if (Powered) return 6999;
						else return 7000;
				else
					if (Open)
						if (Powered) return 7001;
						else return 7002;
					else
						if (Powered) return 7003;
						else return 7004;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 7005;
						else return 7006;
					else
						if (Powered) return 7007;
						else return 7008;
				else
					if (Open)
						if (Powered) return 7009;
						else return 7010;
					else
						if (Powered) return 7011;
						else return 7012;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 7013;
						else return 7014;
					else
						if (Powered) return 7015;
						else return 7016;
				else
					if (Open)
						if (Powered) return 7017;
						else return 7018;
					else
						if (Powered) return 7019;
						else return 7020;
			else
				if (InWall)
					if (Open)
						if (Powered) return 7021;
						else return 7022;
					else
						if (Powered) return 7023;
						else return 7024;
				else
					if (Open)
						if (Powered) return 7025;
						else return 7026;
					else
						if (Powered) return 7027;
						else return 7028;
		}
		BlockState OakFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OakHangingSign
	{
		constexpr BlockState OakHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 4834;
					else return 4835;
				else if (Rotation == 1)
					if (Waterlogged) return 4836;
					else return 4837;
				else if (Rotation == 2)
					if (Waterlogged) return 4838;
					else return 4839;
				else if (Rotation == 3)
					if (Waterlogged) return 4840;
					else return 4841;
				else if (Rotation == 4)
					if (Waterlogged) return 4842;
					else return 4843;
				else if (Rotation == 5)
					if (Waterlogged) return 4844;
					else return 4845;
				else if (Rotation == 6)
					if (Waterlogged) return 4846;
					else return 4847;
				else if (Rotation == 7)
					if (Waterlogged) return 4848;
					else return 4849;
				else if (Rotation == 8)
					if (Waterlogged) return 4850;
					else return 4851;
				else if (Rotation == 9)
					if (Waterlogged) return 4852;
					else return 4853;
				else if (Rotation == 10)
					if (Waterlogged) return 4854;
					else return 4855;
				else if (Rotation == 11)
					if (Waterlogged) return 4856;
					else return 4857;
				else if (Rotation == 12)
					if (Waterlogged) return 4858;
					else return 4859;
				else if (Rotation == 13)
					if (Waterlogged) return 4860;
					else return 4861;
				else if (Rotation == 14)
					if (Waterlogged) return 4862;
					else return 4863;
				else
					if (Waterlogged) return 4864;
					else return 4865;
			else
				if (Rotation == 0)
					if (Waterlogged) return 4866;
					else return 4867;
				else if (Rotation == 1)
					if (Waterlogged) return 4868;
					else return 4869;
				else if (Rotation == 2)
					if (Waterlogged) return 4870;
					else return 4871;
				else if (Rotation == 3)
					if (Waterlogged) return 4872;
					else return 4873;
				else if (Rotation == 4)
					if (Waterlogged) return 4874;
					else return 4875;
				else if (Rotation == 5)
					if (Waterlogged) return 4876;
					else return 4877;
				else if (Rotation == 6)
					if (Waterlogged) return 4878;
					else return 4879;
				else if (Rotation == 7)
					if (Waterlogged) return 4880;
					else return 4881;
				else if (Rotation == 8)
					if (Waterlogged) return 4882;
					else return 4883;
				else if (Rotation == 9)
					if (Waterlogged) return 4884;
					else return 4885;
				else if (Rotation == 10)
					if (Waterlogged) return 4886;
					else return 4887;
				else if (Rotation == 11)
					if (Waterlogged) return 4888;
					else return 4889;
				else if (Rotation == 12)
					if (Waterlogged) return 4890;
					else return 4891;
				else if (Rotation == 13)
					if (Waterlogged) return 4892;
					else return 4893;
				else if (Rotation == 14)
					if (Waterlogged) return 4894;
					else return 4895;
				else
					if (Waterlogged) return 4896;
					else return 4897;
		}
		BlockState OakHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakLeaves
	{
		constexpr BlockState OakLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 237;
					else return 238;
				else
					if (Waterlogged) return 239;
					else return 240;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 241;
					else return 242;
				else
					if (Waterlogged) return 243;
					else return 244;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 245;
					else return 246;
				else
					if (Waterlogged) return 247;
					else return 248;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 249;
					else return 250;
				else
					if (Waterlogged) return 251;
					else return 252;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 253;
					else return 254;
				else
					if (Waterlogged) return 255;
					else return 256;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 257;
					else return 258;
				else
					if (Waterlogged) return 259;
					else return 260;
			else
				if (Persistent)
					if (Waterlogged) return 261;
					else return 262;
				else
					if (Waterlogged) return 263;
					else return 264;
		}
		BlockState OakLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 130;
			else if (Axis == Axis::Y) return 131;
			else return 132;
		}
		BlockState OakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace OakPlanks
	{
		constexpr BlockState OakPlanks()
		{
			return 15;
		}
	}
	namespace OakPressurePlate
	{
		constexpr BlockState OakPressurePlate(const bool Powered)
		{
			if (Powered) return 5716;
			else return 5717;
		}
		BlockState OakPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace OakSapling
	{
		constexpr BlockState OakSapling(const int Stage)
		{
			if (Stage == 0) return 25;
			else return 26;
		}
		BlockState OakSapling();
		int Stage(BlockState Block);
	}
	namespace OakSign
	{
		constexpr BlockState OakSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4302;
				else return 4303;
			else if (Rotation == 1)
				if (Waterlogged) return 4304;
				else return 4305;
			else if (Rotation == 2)
				if (Waterlogged) return 4306;
				else return 4307;
			else if (Rotation == 3)
				if (Waterlogged) return 4308;
				else return 4309;
			else if (Rotation == 4)
				if (Waterlogged) return 4310;
				else return 4311;
			else if (Rotation == 5)
				if (Waterlogged) return 4312;
				else return 4313;
			else if (Rotation == 6)
				if (Waterlogged) return 4314;
				else return 4315;
			else if (Rotation == 7)
				if (Waterlogged) return 4316;
				else return 4317;
			else if (Rotation == 8)
				if (Waterlogged) return 4318;
				else return 4319;
			else if (Rotation == 9)
				if (Waterlogged) return 4320;
				else return 4321;
			else if (Rotation == 10)
				if (Waterlogged) return 4322;
				else return 4323;
			else if (Rotation == 11)
				if (Waterlogged) return 4324;
				else return 4325;
			else if (Rotation == 12)
				if (Waterlogged) return 4326;
				else return 4327;
			else if (Rotation == 13)
				if (Waterlogged) return 4328;
				else return 4329;
			else if (Rotation == 14)
				if (Waterlogged) return 4330;
				else return 4331;
			else
				if (Waterlogged) return 4332;
				else return 4333;
		}
		BlockState OakSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState OakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11162;
				else return 11163;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11164;
				else return 11165;
			else
				if (Waterlogged) return 11166;
				else return 11167;
		}
		BlockState OakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState OakStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2874;
						else return 2875;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2876;
						else return 2877;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2878;
						else return 2879;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2880;
						else return 2881;
					else
						if (Waterlogged) return 2882;
						else return 2883;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2884;
						else return 2885;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2886;
						else return 2887;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2888;
						else return 2889;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2890;
						else return 2891;
					else
						if (Waterlogged) return 2892;
						else return 2893;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2894;
						else return 2895;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2896;
						else return 2897;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2898;
						else return 2899;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2900;
						else return 2901;
					else
						if (Waterlogged) return 2902;
						else return 2903;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2904;
						else return 2905;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2906;
						else return 2907;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2908;
						else return 2909;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2910;
						else return 2911;
					else
						if (Waterlogged) return 2912;
						else return 2913;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2914;
						else return 2915;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2916;
						else return 2917;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2918;
						else return 2919;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2920;
						else return 2921;
					else
						if (Waterlogged) return 2922;
						else return 2923;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2924;
						else return 2925;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2926;
						else return 2927;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2928;
						else return 2929;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2930;
						else return 2931;
					else
						if (Waterlogged) return 2932;
						else return 2933;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2934;
						else return 2935;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2936;
						else return 2937;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2938;
						else return 2939;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2940;
						else return 2941;
					else
						if (Waterlogged) return 2942;
						else return 2943;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 2944;
						else return 2945;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 2946;
						else return 2947;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 2948;
						else return 2949;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 2950;
						else return 2951;
					else
						if (Waterlogged) return 2952;
						else return 2953;
		}
		BlockState OakStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState OakTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 5961;
							else return 5962;
						else
							if (Waterlogged) return 5963;
							else return 5964;
					else
						if (Powered)
							if (Waterlogged) return 5965;
							else return 5966;
						else
							if (Waterlogged) return 5967;
							else return 5968;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 5969;
							else return 5970;
						else
							if (Waterlogged) return 5971;
							else return 5972;
					else
						if (Powered)
							if (Waterlogged) return 5973;
							else return 5974;
						else
							if (Waterlogged) return 5975;
							else return 5976;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 5977;
							else return 5978;
						else
							if (Waterlogged) return 5979;
							else return 5980;
					else
						if (Powered)
							if (Waterlogged) return 5981;
							else return 5982;
						else
							if (Waterlogged) return 5983;
							else return 5984;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 5985;
							else return 5986;
						else
							if (Waterlogged) return 5987;
							else return 5988;
					else
						if (Powered)
							if (Waterlogged) return 5989;
							else return 5990;
						else
							if (Waterlogged) return 5991;
							else return 5992;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 5993;
							else return 5994;
						else
							if (Waterlogged) return 5995;
							else return 5996;
					else
						if (Powered)
							if (Waterlogged) return 5997;
							else return 5998;
						else
							if (Waterlogged) return 5999;
							else return 6000;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6001;
							else return 6002;
						else
							if (Waterlogged) return 6003;
							else return 6004;
					else
						if (Powered)
							if (Waterlogged) return 6005;
							else return 6006;
						else
							if (Waterlogged) return 6007;
							else return 6008;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6009;
							else return 6010;
						else
							if (Waterlogged) return 6011;
							else return 6012;
					else
						if (Powered)
							if (Waterlogged) return 6013;
							else return 6014;
						else
							if (Waterlogged) return 6015;
							else return 6016;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6017;
							else return 6018;
						else
							if (Waterlogged) return 6019;
							else return 6020;
					else
						if (Powered)
							if (Waterlogged) return 6021;
							else return 6022;
						else
							if (Waterlogged) return 6023;
							else return 6024;
		}
		BlockState OakTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWallHangingSign
	{
		constexpr BlockState OakWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5538;
				else return 5539;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5540;
				else return 5541;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5542;
				else return 5543;
			else
				if (Waterlogged) return 5544;
				else return 5545;
		}
		BlockState OakWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWallSign
	{
		constexpr BlockState OakWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4762;
				else return 4763;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4764;
				else return 4765;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4766;
				else return 4767;
			else
				if (Waterlogged) return 4768;
				else return 4769;
		}
		BlockState OakWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 189;
			else if (Axis == Axis::Y) return 190;
			else return 191;
		}
		BlockState OakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace Observer
	{
		constexpr BlockState Observer(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 12550;
				else return 12551;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 12552;
				else return 12553;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 12554;
				else return 12555;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Powered) return 12556;
				else return 12557;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Powered) return 12558;
				else return 12559;
			else
				if (Powered) return 12560;
				else return 12561;
		}
		BlockState Observer();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Obsidian
	{
		constexpr BlockState Obsidian()
		{
			return 2354;
		}
	}
	namespace OchreFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState OchreFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 26563;
			else if (Axis == Axis::Y) return 26564;
			else return 26565;
		}
		BlockState OchreFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace OrangeBanner
	{
		constexpr BlockState OrangeBanner(const int Rotation)
		{
			if (Rotation == 0) return 10775;
			else if (Rotation == 1) return 10776;
			else if (Rotation == 2) return 10777;
			else if (Rotation == 3) return 10778;
			else if (Rotation == 4) return 10779;
			else if (Rotation == 5) return 10780;
			else if (Rotation == 6) return 10781;
			else if (Rotation == 7) return 10782;
			else if (Rotation == 8) return 10783;
			else if (Rotation == 9) return 10784;
			else if (Rotation == 10) return 10785;
			else if (Rotation == 11) return 10786;
			else if (Rotation == 12) return 10787;
			else if (Rotation == 13) return 10788;
			else if (Rotation == 14) return 10789;
			else return 10790;
		}
		BlockState OrangeBanner();
		int Rotation(BlockState Block);
	}
	namespace OrangeBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState OrangeBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1704;
					else return 1705;
				else
					if (Part == Part::Head) return 1706;
					else return 1707;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1708;
					else return 1709;
				else
					if (Part == Part::Head) return 1710;
					else return 1711;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1712;
					else return 1713;
				else
					if (Part == Part::Head) return 1714;
					else return 1715;
			else
				if (Occupied)
					if (Part == Part::Head) return 1716;
					else return 1717;
				else
					if (Part == Part::Head) return 1718;
					else return 1719;
		}
		BlockState OrangeBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace OrangeCandle
	{
		constexpr BlockState OrangeCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20757;
					else return 20758;
				else
					if (Waterlogged) return 20759;
					else return 20760;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20761;
					else return 20762;
				else
					if (Waterlogged) return 20763;
					else return 20764;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20765;
					else return 20766;
				else
					if (Waterlogged) return 20767;
					else return 20768;
			else
				if (Lit)
					if (Waterlogged) return 20769;
					else return 20770;
				else
					if (Waterlogged) return 20771;
					else return 20772;
		}
		BlockState OrangeCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OrangeCandleCake
	{
		constexpr BlockState OrangeCandleCake(const bool Lit)
		{
			if (Lit) return 21001;
			else return 21002;
		}
		BlockState OrangeCandleCake();
		bool Lit(BlockState Block);
	}
	namespace OrangeCarpet
	{
		constexpr BlockState OrangeCarpet()
		{
			return 10729;
		}
	}
	namespace OrangeConcrete
	{
		constexpr BlockState OrangeConcrete()
		{
			return 12729;
		}
	}
	namespace OrangeConcretePowder
	{
		constexpr BlockState OrangeConcretePowder()
		{
			return 12745;
		}
	}
	namespace OrangeGlazedTerracotta
	{
		constexpr BlockState OrangeGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12668;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12669;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12670;
			else return 12671;
		}
		BlockState OrangeGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeShulkerBox
	{
		constexpr BlockState OrangeShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12574;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12575;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12576;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12577;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12578;
			else return 12579;
		}
		BlockState OrangeShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeStainedGlass
	{
		constexpr BlockState OrangeStainedGlass()
		{
			return 5946;
		}
	}
	namespace OrangeStainedGlassPane
	{
		constexpr BlockState OrangeStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9404;
							else return 9405;
						else
							if (West) return 9406;
							else return 9407;
					else
						if (Waterlogged)
							if (West) return 9408;
							else return 9409;
						else
							if (West) return 9410;
							else return 9411;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9412;
							else return 9413;
						else
							if (West) return 9414;
							else return 9415;
					else
						if (Waterlogged)
							if (West) return 9416;
							else return 9417;
						else
							if (West) return 9418;
							else return 9419;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9420;
							else return 9421;
						else
							if (West) return 9422;
							else return 9423;
					else
						if (Waterlogged)
							if (West) return 9424;
							else return 9425;
						else
							if (West) return 9426;
							else return 9427;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9428;
							else return 9429;
						else
							if (West) return 9430;
							else return 9431;
					else
						if (Waterlogged)
							if (West) return 9432;
							else return 9433;
						else
							if (West) return 9434;
							else return 9435;
		}
		BlockState OrangeStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace OrangeTerracotta
	{
		constexpr BlockState OrangeTerracotta()
		{
			return 9357;
		}
	}
	namespace OrangeTulip
	{
		constexpr BlockState OrangeTulip()
		{
			return 2082;
		}
	}
	namespace OrangeWallBanner
	{
		constexpr BlockState OrangeWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11019;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11020;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11021;
			else return 11022;
		}
		BlockState OrangeWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace OrangeWool
	{
		constexpr BlockState OrangeWool()
		{
			return 2048;
		}
	}
	namespace OxeyeDaisy
	{
		constexpr BlockState OxeyeDaisy()
		{
			return 2085;
		}
	}
	namespace OxidizedChiseledCopper
	{
		constexpr BlockState OxidizedChiseledCopper()
		{
			return 22948;
		}
	}
	namespace OxidizedCopper
	{
		constexpr BlockState OxidizedCopper()
		{
			return 22941;
		}
	}
	namespace OxidizedCopperBulb
	{
		constexpr BlockState OxidizedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24704;
				else return 24705;
			else
				if (Powered) return 24706;
				else return 24707;
		}
		BlockState OxidizedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OxidizedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState OxidizedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23780;
							else return 23781;
						else
							if (Powered) return 23782;
							else return 23783;
					else
						if (Open)
							if (Powered) return 23784;
							else return 23785;
						else
							if (Powered) return 23786;
							else return 23787;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23788;
							else return 23789;
						else
							if (Powered) return 23790;
							else return 23791;
					else
						if (Open)
							if (Powered) return 23792;
							else return 23793;
						else
							if (Powered) return 23794;
							else return 23795;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23796;
							else return 23797;
						else
							if (Powered) return 23798;
							else return 23799;
					else
						if (Open)
							if (Powered) return 23800;
							else return 23801;
						else
							if (Powered) return 23802;
							else return 23803;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23804;
							else return 23805;
						else
							if (Powered) return 23806;
							else return 23807;
					else
						if (Open)
							if (Powered) return 23808;
							else return 23809;
						else
							if (Powered) return 23810;
							else return 23811;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23812;
							else return 23813;
						else
							if (Powered) return 23814;
							else return 23815;
					else
						if (Open)
							if (Powered) return 23816;
							else return 23817;
						else
							if (Powered) return 23818;
							else return 23819;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23820;
							else return 23821;
						else
							if (Powered) return 23822;
							else return 23823;
					else
						if (Open)
							if (Powered) return 23824;
							else return 23825;
						else
							if (Powered) return 23826;
							else return 23827;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23828;
							else return 23829;
						else
							if (Powered) return 23830;
							else return 23831;
					else
						if (Open)
							if (Powered) return 23832;
							else return 23833;
						else
							if (Powered) return 23834;
							else return 23835;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23836;
							else return 23837;
						else
							if (Powered) return 23838;
							else return 23839;
					else
						if (Open)
							if (Powered) return 23840;
							else return 23841;
						else
							if (Powered) return 23842;
							else return 23843;
		}
		BlockState OxidizedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace OxidizedCopperGrate
	{
		constexpr BlockState OxidizedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24682;
			else return 24683;
		}
		BlockState OxidizedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState OxidizedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24292;
							else return 24293;
						else
							if (Waterlogged) return 24294;
							else return 24295;
					else
						if (Powered)
							if (Waterlogged) return 24296;
							else return 24297;
						else
							if (Waterlogged) return 24298;
							else return 24299;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24300;
							else return 24301;
						else
							if (Waterlogged) return 24302;
							else return 24303;
					else
						if (Powered)
							if (Waterlogged) return 24304;
							else return 24305;
						else
							if (Waterlogged) return 24306;
							else return 24307;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24308;
							else return 24309;
						else
							if (Waterlogged) return 24310;
							else return 24311;
					else
						if (Powered)
							if (Waterlogged) return 24312;
							else return 24313;
						else
							if (Waterlogged) return 24314;
							else return 24315;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24316;
							else return 24317;
						else
							if (Waterlogged) return 24318;
							else return 24319;
					else
						if (Powered)
							if (Waterlogged) return 24320;
							else return 24321;
						else
							if (Waterlogged) return 24322;
							else return 24323;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24324;
							else return 24325;
						else
							if (Waterlogged) return 24326;
							else return 24327;
					else
						if (Powered)
							if (Waterlogged) return 24328;
							else return 24329;
						else
							if (Waterlogged) return 24330;
							else return 24331;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24332;
							else return 24333;
						else
							if (Waterlogged) return 24334;
							else return 24335;
					else
						if (Powered)
							if (Waterlogged) return 24336;
							else return 24337;
						else
							if (Waterlogged) return 24338;
							else return 24339;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24340;
							else return 24341;
						else
							if (Waterlogged) return 24342;
							else return 24343;
					else
						if (Powered)
							if (Waterlogged) return 24344;
							else return 24345;
						else
							if (Waterlogged) return 24346;
							else return 24347;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24348;
							else return 24349;
						else
							if (Waterlogged) return 24350;
							else return 24351;
					else
						if (Powered)
							if (Waterlogged) return 24352;
							else return 24353;
						else
							if (Waterlogged) return 24354;
							else return 24355;
		}
		BlockState OxidizedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCutCopper
	{
		constexpr BlockState OxidizedCutCopper()
		{
			return 22944;
		}
	}
	namespace OxidizedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState OxidizedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23276;
				else return 23277;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23278;
				else return 23279;
			else
				if (Waterlogged) return 23280;
				else return 23281;
		}
		BlockState OxidizedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace OxidizedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState OxidizedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22956;
						else return 22957;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22958;
						else return 22959;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22960;
						else return 22961;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22962;
						else return 22963;
					else
						if (Waterlogged) return 22964;
						else return 22965;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22966;
						else return 22967;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22968;
						else return 22969;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22970;
						else return 22971;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22972;
						else return 22973;
					else
						if (Waterlogged) return 22974;
						else return 22975;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22976;
						else return 22977;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22978;
						else return 22979;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22980;
						else return 22981;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22982;
						else return 22983;
					else
						if (Waterlogged) return 22984;
						else return 22985;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22986;
						else return 22987;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22988;
						else return 22989;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 22990;
						else return 22991;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 22992;
						else return 22993;
					else
						if (Waterlogged) return 22994;
						else return 22995;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 22996;
						else return 22997;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 22998;
						else return 22999;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23000;
						else return 23001;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23002;
						else return 23003;
					else
						if (Waterlogged) return 23004;
						else return 23005;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23006;
						else return 23007;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23008;
						else return 23009;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23010;
						else return 23011;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23012;
						else return 23013;
					else
						if (Waterlogged) return 23014;
						else return 23015;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23016;
						else return 23017;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23018;
						else return 23019;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23020;
						else return 23021;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23022;
						else return 23023;
					else
						if (Waterlogged) return 23024;
						else return 23025;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23026;
						else return 23027;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23028;
						else return 23029;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23030;
						else return 23031;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23032;
						else return 23033;
					else
						if (Waterlogged) return 23034;
						else return 23035;
		}
		BlockState OxidizedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PackedIce
	{
		constexpr BlockState PackedIce()
		{
			return 10746;
		}
	}
	namespace PackedMud
	{
		constexpr BlockState PackedMud()
		{
			return 6541;
		}
	}
	namespace PearlescentFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PearlescentFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 26569;
			else if (Axis == Axis::Y) return 26570;
			else return 26571;
		}
		BlockState PearlescentFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace Peony
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Peony(const enum Half Half)
		{
			if (Half == Half::Upper) return 10753;
			else return 10754;
		}
		BlockState Peony();
		enum Half Half(BlockState Block);
	}
	namespace PetrifiedOakSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PetrifiedOakSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11246;
				else return 11247;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11248;
				else return 11249;
			else
				if (Waterlogged) return 11250;
				else return 11251;
		}
		BlockState PetrifiedOakSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PiglinHead
	{
		constexpr BlockState PiglinHead(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 9067;
				else if (Rotation == 1) return 9068;
				else if (Rotation == 2) return 9069;
				else if (Rotation == 3) return 9070;
				else if (Rotation == 4) return 9071;
				else if (Rotation == 5) return 9072;
				else if (Rotation == 6) return 9073;
				else if (Rotation == 7) return 9074;
				else if (Rotation == 8) return 9075;
				else if (Rotation == 9) return 9076;
				else if (Rotation == 10) return 9077;
				else if (Rotation == 11) return 9078;
				else if (Rotation == 12) return 9079;
				else if (Rotation == 13) return 9080;
				else if (Rotation == 14) return 9081;
				else return 9082;
			else
				if (Rotation == 0) return 9083;
				else if (Rotation == 1) return 9084;
				else if (Rotation == 2) return 9085;
				else if (Rotation == 3) return 9086;
				else if (Rotation == 4) return 9087;
				else if (Rotation == 5) return 9088;
				else if (Rotation == 6) return 9089;
				else if (Rotation == 7) return 9090;
				else if (Rotation == 8) return 9091;
				else if (Rotation == 9) return 9092;
				else if (Rotation == 10) return 9093;
				else if (Rotation == 11) return 9094;
				else if (Rotation == 12) return 9095;
				else if (Rotation == 13) return 9096;
				else if (Rotation == 14) return 9097;
				else return 9098;
		}
		BlockState PiglinHead();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace PiglinWallHead
	{
		constexpr BlockState PiglinWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 9099;
				else return 9100;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 9101;
				else return 9102;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 9103;
				else return 9104;
			else
				if (Powered) return 9105;
				else return 9106;
		}
		BlockState PiglinWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PinkBanner
	{
		constexpr BlockState PinkBanner(const int Rotation)
		{
			if (Rotation == 0) return 10855;
			else if (Rotation == 1) return 10856;
			else if (Rotation == 2) return 10857;
			else if (Rotation == 3) return 10858;
			else if (Rotation == 4) return 10859;
			else if (Rotation == 5) return 10860;
			else if (Rotation == 6) return 10861;
			else if (Rotation == 7) return 10862;
			else if (Rotation == 8) return 10863;
			else if (Rotation == 9) return 10864;
			else if (Rotation == 10) return 10865;
			else if (Rotation == 11) return 10866;
			else if (Rotation == 12) return 10867;
			else if (Rotation == 13) return 10868;
			else if (Rotation == 14) return 10869;
			else return 10870;
		}
		BlockState PinkBanner();
		int Rotation(BlockState Block);
	}
	namespace PinkBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState PinkBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1784;
					else return 1785;
				else
					if (Part == Part::Head) return 1786;
					else return 1787;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1788;
					else return 1789;
				else
					if (Part == Part::Head) return 1790;
					else return 1791;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1792;
					else return 1793;
				else
					if (Part == Part::Head) return 1794;
					else return 1795;
			else
				if (Occupied)
					if (Part == Part::Head) return 1796;
					else return 1797;
				else
					if (Part == Part::Head) return 1798;
					else return 1799;
		}
		BlockState PinkBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace PinkCandle
	{
		constexpr BlockState PinkCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20837;
					else return 20838;
				else
					if (Waterlogged) return 20839;
					else return 20840;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20841;
					else return 20842;
				else
					if (Waterlogged) return 20843;
					else return 20844;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20845;
					else return 20846;
				else
					if (Waterlogged) return 20847;
					else return 20848;
			else
				if (Lit)
					if (Waterlogged) return 20849;
					else return 20850;
				else
					if (Waterlogged) return 20851;
					else return 20852;
		}
		BlockState PinkCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PinkCandleCake
	{
		constexpr BlockState PinkCandleCake(const bool Lit)
		{
			if (Lit) return 21011;
			else return 21012;
		}
		BlockState PinkCandleCake();
		bool Lit(BlockState Block);
	}
	namespace PinkCarpet
	{
		constexpr BlockState PinkCarpet()
		{
			return 10734;
		}
	}
	namespace PinkConcrete
	{
		constexpr BlockState PinkConcrete()
		{
			return 12734;
		}
	}
	namespace PinkConcretePowder
	{
		constexpr BlockState PinkConcretePowder()
		{
			return 12750;
		}
	}
	namespace PinkGlazedTerracotta
	{
		constexpr BlockState PinkGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12688;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12689;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12690;
			else return 12691;
		}
		BlockState PinkGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkPetals
	{
		constexpr BlockState PinkPetals(const eBlockFace Facing, const int FlowerAmount)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (FlowerAmount == 1) return 24827;
				else if (FlowerAmount == 2) return 24828;
				else if (FlowerAmount == 3) return 24829;
				else return 24830;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (FlowerAmount == 1) return 24831;
				else if (FlowerAmount == 2) return 24832;
				else if (FlowerAmount == 3) return 24833;
				else return 24834;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (FlowerAmount == 1) return 24835;
				else if (FlowerAmount == 2) return 24836;
				else if (FlowerAmount == 3) return 24837;
				else return 24838;
			else
				if (FlowerAmount == 1) return 24839;
				else if (FlowerAmount == 2) return 24840;
				else if (FlowerAmount == 3) return 24841;
				else return 24842;
		}
		BlockState PinkPetals();
		eBlockFace Facing(BlockState Block);
		int FlowerAmount(BlockState Block);
	}
	namespace PinkShulkerBox
	{
		constexpr BlockState PinkShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12604;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12605;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12606;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12607;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12608;
			else return 12609;
		}
		BlockState PinkShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkStainedGlass
	{
		constexpr BlockState PinkStainedGlass()
		{
			return 5951;
		}
	}
	namespace PinkStainedGlassPane
	{
		constexpr BlockState PinkStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9564;
							else return 9565;
						else
							if (West) return 9566;
							else return 9567;
					else
						if (Waterlogged)
							if (West) return 9568;
							else return 9569;
						else
							if (West) return 9570;
							else return 9571;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9572;
							else return 9573;
						else
							if (West) return 9574;
							else return 9575;
					else
						if (Waterlogged)
							if (West) return 9576;
							else return 9577;
						else
							if (West) return 9578;
							else return 9579;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9580;
							else return 9581;
						else
							if (West) return 9582;
							else return 9583;
					else
						if (Waterlogged)
							if (West) return 9584;
							else return 9585;
						else
							if (West) return 9586;
							else return 9587;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9588;
							else return 9589;
						else
							if (West) return 9590;
							else return 9591;
					else
						if (Waterlogged)
							if (West) return 9592;
							else return 9593;
						else
							if (West) return 9594;
							else return 9595;
		}
		BlockState PinkStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace PinkTerracotta
	{
		constexpr BlockState PinkTerracotta()
		{
			return 9362;
		}
	}
	namespace PinkTulip
	{
		constexpr BlockState PinkTulip()
		{
			return 2084;
		}
	}
	namespace PinkWallBanner
	{
		constexpr BlockState PinkWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11039;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11040;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11041;
			else return 11042;
		}
		BlockState PinkWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace PinkWool
	{
		constexpr BlockState PinkWool()
		{
			return 2053;
		}
	}
	namespace Piston
	{
		constexpr BlockState Piston(const bool Extended, const eBlockFace Facing)
		{
			if (Extended)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2011;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2012;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2013;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2014;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2015;
				else return 2016;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2017;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2018;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2019;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2020;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2021;
				else return 2022;
		}
		BlockState Piston();
		bool Extended(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace PistonHead
	{
		enum class Type
		{
			Normal,
			Sticky,
		};
		constexpr BlockState PistonHead(const eBlockFace Facing, const bool Short, const enum Type Type)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Short)
					if (Type == Type::Normal) return 2023;
					else return 2024;
				else
					if (Type == Type::Normal) return 2025;
					else return 2026;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Short)
					if (Type == Type::Normal) return 2027;
					else return 2028;
				else
					if (Type == Type::Normal) return 2029;
					else return 2030;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Short)
					if (Type == Type::Normal) return 2031;
					else return 2032;
				else
					if (Type == Type::Normal) return 2033;
					else return 2034;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Short)
					if (Type == Type::Normal) return 2035;
					else return 2036;
				else
					if (Type == Type::Normal) return 2037;
					else return 2038;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Short)
					if (Type == Type::Normal) return 2039;
					else return 2040;
				else
					if (Type == Type::Normal) return 2041;
					else return 2042;
			else
				if (Short)
					if (Type == Type::Normal) return 2043;
					else return 2044;
				else
					if (Type == Type::Normal) return 2045;
					else return 2046;
		}
		BlockState PistonHead();
		eBlockFace Facing(BlockState Block);
		bool Short(BlockState Block);
		enum Type Type(BlockState Block);
	}
	namespace PitcherCrop
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState PitcherCrop(const int Age, const enum Half Half)
		{
			if (Age == 0)
				if (Half == Half::Upper) return 12497;
				else return 12498;
			else if (Age == 1)
				if (Half == Half::Upper) return 12499;
				else return 12500;
			else if (Age == 2)
				if (Half == Half::Upper) return 12501;
				else return 12502;
			else if (Age == 3)
				if (Half == Half::Upper) return 12503;
				else return 12504;
			else
				if (Half == Half::Upper) return 12505;
				else return 12506;
		}
		BlockState PitcherCrop();
		int Age(BlockState Block);
		enum Half Half(BlockState Block);
	}
	namespace PitcherPlant
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState PitcherPlant(const enum Half Half)
		{
			if (Half == Half::Upper) return 12507;
			else return 12508;
		}
		BlockState PitcherPlant();
		enum Half Half(BlockState Block);
	}
	namespace PlayerHead
	{
		constexpr BlockState PlayerHead(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 8947;
				else if (Rotation == 1) return 8948;
				else if (Rotation == 2) return 8949;
				else if (Rotation == 3) return 8950;
				else if (Rotation == 4) return 8951;
				else if (Rotation == 5) return 8952;
				else if (Rotation == 6) return 8953;
				else if (Rotation == 7) return 8954;
				else if (Rotation == 8) return 8955;
				else if (Rotation == 9) return 8956;
				else if (Rotation == 10) return 8957;
				else if (Rotation == 11) return 8958;
				else if (Rotation == 12) return 8959;
				else if (Rotation == 13) return 8960;
				else if (Rotation == 14) return 8961;
				else return 8962;
			else
				if (Rotation == 0) return 8963;
				else if (Rotation == 1) return 8964;
				else if (Rotation == 2) return 8965;
				else if (Rotation == 3) return 8966;
				else if (Rotation == 4) return 8967;
				else if (Rotation == 5) return 8968;
				else if (Rotation == 6) return 8969;
				else if (Rotation == 7) return 8970;
				else if (Rotation == 8) return 8971;
				else if (Rotation == 9) return 8972;
				else if (Rotation == 10) return 8973;
				else if (Rotation == 11) return 8974;
				else if (Rotation == 12) return 8975;
				else if (Rotation == 13) return 8976;
				else if (Rotation == 14) return 8977;
				else return 8978;
		}
		BlockState PlayerHead();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace PlayerWallHead
	{
		constexpr BlockState PlayerWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 8979;
				else return 8980;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 8981;
				else return 8982;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 8983;
				else return 8984;
			else
				if (Powered) return 8985;
				else return 8986;
		}
		BlockState PlayerWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace Podzol
	{
		constexpr BlockState Podzol(const bool Snowy)
		{
			if (Snowy) return 12;
			else return 13;
		}
		BlockState Podzol();
		bool Snowy(BlockState Block);
	}
	namespace PointedDripstone
	{
		enum class Thickness
		{
			TipMerge,
			Tip,
			Frustum,
			Middle,
			Base,
		};
		enum class VerticalDirection
		{
			Up,
			Down,
		};
		constexpr BlockState PointedDripstone(const enum Thickness Thickness, const enum VerticalDirection VerticalDirection, const bool Waterlogged)
		{
			if (Thickness == Thickness::TipMerge)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 24748;
					else return 24749;
				else
					if (Waterlogged) return 24750;
					else return 24751;
			else if (Thickness == Thickness::Tip)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 24752;
					else return 24753;
				else
					if (Waterlogged) return 24754;
					else return 24755;
			else if (Thickness == Thickness::Frustum)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 24756;
					else return 24757;
				else
					if (Waterlogged) return 24758;
					else return 24759;
			else if (Thickness == Thickness::Middle)
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 24760;
					else return 24761;
				else
					if (Waterlogged) return 24762;
					else return 24763;
			else
				if (VerticalDirection == VerticalDirection::Up)
					if (Waterlogged) return 24764;
					else return 24765;
				else
					if (Waterlogged) return 24766;
					else return 24767;
		}
		BlockState PointedDripstone();
		enum Thickness Thickness(BlockState Block);
		enum VerticalDirection VerticalDirection(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedAndesite
	{
		constexpr BlockState PolishedAndesite()
		{
			return 7;
		}
	}
	namespace PolishedAndesiteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedAndesiteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14148;
				else return 14149;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14150;
				else return 14151;
			else
				if (Waterlogged) return 14152;
				else return 14153;
		}
		BlockState PolishedAndesiteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedAndesiteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedAndesiteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13922;
						else return 13923;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13924;
						else return 13925;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13926;
						else return 13927;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13928;
						else return 13929;
					else
						if (Waterlogged) return 13930;
						else return 13931;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13932;
						else return 13933;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13934;
						else return 13935;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13936;
						else return 13937;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13938;
						else return 13939;
					else
						if (Waterlogged) return 13940;
						else return 13941;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13942;
						else return 13943;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13944;
						else return 13945;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13946;
						else return 13947;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13948;
						else return 13949;
					else
						if (Waterlogged) return 13950;
						else return 13951;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13952;
						else return 13953;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13954;
						else return 13955;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13956;
						else return 13957;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13958;
						else return 13959;
					else
						if (Waterlogged) return 13960;
						else return 13961;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13962;
						else return 13963;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13964;
						else return 13965;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13966;
						else return 13967;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13968;
						else return 13969;
					else
						if (Waterlogged) return 13970;
						else return 13971;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13972;
						else return 13973;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13974;
						else return 13975;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13976;
						else return 13977;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13978;
						else return 13979;
					else
						if (Waterlogged) return 13980;
						else return 13981;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13982;
						else return 13983;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13984;
						else return 13985;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13986;
						else return 13987;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13988;
						else return 13989;
					else
						if (Waterlogged) return 13990;
						else return 13991;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13992;
						else return 13993;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13994;
						else return 13995;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13996;
						else return 13997;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13998;
						else return 13999;
					else
						if (Waterlogged) return 14000;
						else return 14001;
		}
		BlockState PolishedAndesiteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBasalt
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PolishedBasalt(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 5855;
			else if (Axis == Axis::Y) return 5856;
			else return 5857;
		}
		BlockState PolishedBasalt();
		enum Axis Axis(BlockState Block);
	}
	namespace PolishedBlackstone
	{
		constexpr BlockState PolishedBlackstone()
		{
			return 19871;
		}
	}
	namespace PolishedBlackstoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedBlackstoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 19875;
				else return 19876;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 19877;
				else return 19878;
			else
				if (Waterlogged) return 19879;
				else return 19880;
		}
		BlockState PolishedBlackstoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedBlackstoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19881;
						else return 19882;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19883;
						else return 19884;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19885;
						else return 19886;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19887;
						else return 19888;
					else
						if (Waterlogged) return 19889;
						else return 19890;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19891;
						else return 19892;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19893;
						else return 19894;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19895;
						else return 19896;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19897;
						else return 19898;
					else
						if (Waterlogged) return 19899;
						else return 19900;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19901;
						else return 19902;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19903;
						else return 19904;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19905;
						else return 19906;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19907;
						else return 19908;
					else
						if (Waterlogged) return 19909;
						else return 19910;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19911;
						else return 19912;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19913;
						else return 19914;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19915;
						else return 19916;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19917;
						else return 19918;
					else
						if (Waterlogged) return 19919;
						else return 19920;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19921;
						else return 19922;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19923;
						else return 19924;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19925;
						else return 19926;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19927;
						else return 19928;
					else
						if (Waterlogged) return 19929;
						else return 19930;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19931;
						else return 19932;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19933;
						else return 19934;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19935;
						else return 19936;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19937;
						else return 19938;
					else
						if (Waterlogged) return 19939;
						else return 19940;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19941;
						else return 19942;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19943;
						else return 19944;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19945;
						else return 19946;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19947;
						else return 19948;
					else
						if (Waterlogged) return 19949;
						else return 19950;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19951;
						else return 19952;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19953;
						else return 19954;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19955;
						else return 19956;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19957;
						else return 19958;
					else
						if (Waterlogged) return 19959;
						else return 19960;
		}
		BlockState PolishedBlackstoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedBlackstoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19961;
								else if (West == West::Low) return 19962;
								else return 19963;
							else
								if (West == West::None) return 19964;
								else if (West == West::Low) return 19965;
								else return 19966;
						else
							if (Waterlogged)
								if (West == West::None) return 19967;
								else if (West == West::Low) return 19968;
								else return 19969;
							else
								if (West == West::None) return 19970;
								else if (West == West::Low) return 19971;
								else return 19972;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19973;
								else if (West == West::Low) return 19974;
								else return 19975;
							else
								if (West == West::None) return 19976;
								else if (West == West::Low) return 19977;
								else return 19978;
						else
							if (Waterlogged)
								if (West == West::None) return 19979;
								else if (West == West::Low) return 19980;
								else return 19981;
							else
								if (West == West::None) return 19982;
								else if (West == West::Low) return 19983;
								else return 19984;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19985;
								else if (West == West::Low) return 19986;
								else return 19987;
							else
								if (West == West::None) return 19988;
								else if (West == West::Low) return 19989;
								else return 19990;
						else
							if (Waterlogged)
								if (West == West::None) return 19991;
								else if (West == West::Low) return 19992;
								else return 19993;
							else
								if (West == West::None) return 19994;
								else if (West == West::Low) return 19995;
								else return 19996;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 19997;
								else if (West == West::Low) return 19998;
								else return 19999;
							else
								if (West == West::None) return 20000;
								else if (West == West::Low) return 20001;
								else return 20002;
						else
							if (Waterlogged)
								if (West == West::None) return 20003;
								else if (West == West::Low) return 20004;
								else return 20005;
							else
								if (West == West::None) return 20006;
								else if (West == West::Low) return 20007;
								else return 20008;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20009;
								else if (West == West::Low) return 20010;
								else return 20011;
							else
								if (West == West::None) return 20012;
								else if (West == West::Low) return 20013;
								else return 20014;
						else
							if (Waterlogged)
								if (West == West::None) return 20015;
								else if (West == West::Low) return 20016;
								else return 20017;
							else
								if (West == West::None) return 20018;
								else if (West == West::Low) return 20019;
								else return 20020;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20021;
								else if (West == West::Low) return 20022;
								else return 20023;
							else
								if (West == West::None) return 20024;
								else if (West == West::Low) return 20025;
								else return 20026;
						else
							if (Waterlogged)
								if (West == West::None) return 20027;
								else if (West == West::Low) return 20028;
								else return 20029;
							else
								if (West == West::None) return 20030;
								else if (West == West::Low) return 20031;
								else return 20032;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20033;
								else if (West == West::Low) return 20034;
								else return 20035;
							else
								if (West == West::None) return 20036;
								else if (West == West::Low) return 20037;
								else return 20038;
						else
							if (Waterlogged)
								if (West == West::None) return 20039;
								else if (West == West::Low) return 20040;
								else return 20041;
							else
								if (West == West::None) return 20042;
								else if (West == West::Low) return 20043;
								else return 20044;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20045;
								else if (West == West::Low) return 20046;
								else return 20047;
							else
								if (West == West::None) return 20048;
								else if (West == West::Low) return 20049;
								else return 20050;
						else
							if (Waterlogged)
								if (West == West::None) return 20051;
								else if (West == West::Low) return 20052;
								else return 20053;
							else
								if (West == West::None) return 20054;
								else if (West == West::Low) return 20055;
								else return 20056;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20057;
								else if (West == West::Low) return 20058;
								else return 20059;
							else
								if (West == West::None) return 20060;
								else if (West == West::Low) return 20061;
								else return 20062;
						else
							if (Waterlogged)
								if (West == West::None) return 20063;
								else if (West == West::Low) return 20064;
								else return 20065;
							else
								if (West == West::None) return 20066;
								else if (West == West::Low) return 20067;
								else return 20068;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20069;
								else if (West == West::Low) return 20070;
								else return 20071;
							else
								if (West == West::None) return 20072;
								else if (West == West::Low) return 20073;
								else return 20074;
						else
							if (Waterlogged)
								if (West == West::None) return 20075;
								else if (West == West::Low) return 20076;
								else return 20077;
							else
								if (West == West::None) return 20078;
								else if (West == West::Low) return 20079;
								else return 20080;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20081;
								else if (West == West::Low) return 20082;
								else return 20083;
							else
								if (West == West::None) return 20084;
								else if (West == West::Low) return 20085;
								else return 20086;
						else
							if (Waterlogged)
								if (West == West::None) return 20087;
								else if (West == West::Low) return 20088;
								else return 20089;
							else
								if (West == West::None) return 20090;
								else if (West == West::Low) return 20091;
								else return 20092;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20093;
								else if (West == West::Low) return 20094;
								else return 20095;
							else
								if (West == West::None) return 20096;
								else if (West == West::Low) return 20097;
								else return 20098;
						else
							if (Waterlogged)
								if (West == West::None) return 20099;
								else if (West == West::Low) return 20100;
								else return 20101;
							else
								if (West == West::None) return 20102;
								else if (West == West::Low) return 20103;
								else return 20104;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20105;
								else if (West == West::Low) return 20106;
								else return 20107;
							else
								if (West == West::None) return 20108;
								else if (West == West::Low) return 20109;
								else return 20110;
						else
							if (Waterlogged)
								if (West == West::None) return 20111;
								else if (West == West::Low) return 20112;
								else return 20113;
							else
								if (West == West::None) return 20114;
								else if (West == West::Low) return 20115;
								else return 20116;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20117;
								else if (West == West::Low) return 20118;
								else return 20119;
							else
								if (West == West::None) return 20120;
								else if (West == West::Low) return 20121;
								else return 20122;
						else
							if (Waterlogged)
								if (West == West::None) return 20123;
								else if (West == West::Low) return 20124;
								else return 20125;
							else
								if (West == West::None) return 20126;
								else if (West == West::Low) return 20127;
								else return 20128;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20129;
								else if (West == West::Low) return 20130;
								else return 20131;
							else
								if (West == West::None) return 20132;
								else if (West == West::Low) return 20133;
								else return 20134;
						else
							if (Waterlogged)
								if (West == West::None) return 20135;
								else if (West == West::Low) return 20136;
								else return 20137;
							else
								if (West == West::None) return 20138;
								else if (West == West::Low) return 20139;
								else return 20140;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20141;
								else if (West == West::Low) return 20142;
								else return 20143;
							else
								if (West == West::None) return 20144;
								else if (West == West::Low) return 20145;
								else return 20146;
						else
							if (Waterlogged)
								if (West == West::None) return 20147;
								else if (West == West::Low) return 20148;
								else return 20149;
							else
								if (West == West::None) return 20150;
								else if (West == West::Low) return 20151;
								else return 20152;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20153;
								else if (West == West::Low) return 20154;
								else return 20155;
							else
								if (West == West::None) return 20156;
								else if (West == West::Low) return 20157;
								else return 20158;
						else
							if (Waterlogged)
								if (West == West::None) return 20159;
								else if (West == West::Low) return 20160;
								else return 20161;
							else
								if (West == West::None) return 20162;
								else if (West == West::Low) return 20163;
								else return 20164;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20165;
								else if (West == West::Low) return 20166;
								else return 20167;
							else
								if (West == West::None) return 20168;
								else if (West == West::Low) return 20169;
								else return 20170;
						else
							if (Waterlogged)
								if (West == West::None) return 20171;
								else if (West == West::Low) return 20172;
								else return 20173;
							else
								if (West == West::None) return 20174;
								else if (West == West::Low) return 20175;
								else return 20176;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20177;
								else if (West == West::Low) return 20178;
								else return 20179;
							else
								if (West == West::None) return 20180;
								else if (West == West::Low) return 20181;
								else return 20182;
						else
							if (Waterlogged)
								if (West == West::None) return 20183;
								else if (West == West::Low) return 20184;
								else return 20185;
							else
								if (West == West::None) return 20186;
								else if (West == West::Low) return 20187;
								else return 20188;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20189;
								else if (West == West::Low) return 20190;
								else return 20191;
							else
								if (West == West::None) return 20192;
								else if (West == West::Low) return 20193;
								else return 20194;
						else
							if (Waterlogged)
								if (West == West::None) return 20195;
								else if (West == West::Low) return 20196;
								else return 20197;
							else
								if (West == West::None) return 20198;
								else if (West == West::Low) return 20199;
								else return 20200;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20201;
								else if (West == West::Low) return 20202;
								else return 20203;
							else
								if (West == West::None) return 20204;
								else if (West == West::Low) return 20205;
								else return 20206;
						else
							if (Waterlogged)
								if (West == West::None) return 20207;
								else if (West == West::Low) return 20208;
								else return 20209;
							else
								if (West == West::None) return 20210;
								else if (West == West::Low) return 20211;
								else return 20212;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20213;
								else if (West == West::Low) return 20214;
								else return 20215;
							else
								if (West == West::None) return 20216;
								else if (West == West::Low) return 20217;
								else return 20218;
						else
							if (Waterlogged)
								if (West == West::None) return 20219;
								else if (West == West::Low) return 20220;
								else return 20221;
							else
								if (West == West::None) return 20222;
								else if (West == West::Low) return 20223;
								else return 20224;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20225;
								else if (West == West::Low) return 20226;
								else return 20227;
							else
								if (West == West::None) return 20228;
								else if (West == West::Low) return 20229;
								else return 20230;
						else
							if (Waterlogged)
								if (West == West::None) return 20231;
								else if (West == West::Low) return 20232;
								else return 20233;
							else
								if (West == West::None) return 20234;
								else if (West == West::Low) return 20235;
								else return 20236;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20237;
								else if (West == West::Low) return 20238;
								else return 20239;
							else
								if (West == West::None) return 20240;
								else if (West == West::Low) return 20241;
								else return 20242;
						else
							if (Waterlogged)
								if (West == West::None) return 20243;
								else if (West == West::Low) return 20244;
								else return 20245;
							else
								if (West == West::None) return 20246;
								else if (West == West::Low) return 20247;
								else return 20248;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20249;
								else if (West == West::Low) return 20250;
								else return 20251;
							else
								if (West == West::None) return 20252;
								else if (West == West::Low) return 20253;
								else return 20254;
						else
							if (Waterlogged)
								if (West == West::None) return 20255;
								else if (West == West::Low) return 20256;
								else return 20257;
							else
								if (West == West::None) return 20258;
								else if (West == West::Low) return 20259;
								else return 20260;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20261;
								else if (West == West::Low) return 20262;
								else return 20263;
							else
								if (West == West::None) return 20264;
								else if (West == West::Low) return 20265;
								else return 20266;
						else
							if (Waterlogged)
								if (West == West::None) return 20267;
								else if (West == West::Low) return 20268;
								else return 20269;
							else
								if (West == West::None) return 20270;
								else if (West == West::Low) return 20271;
								else return 20272;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20273;
								else if (West == West::Low) return 20274;
								else return 20275;
							else
								if (West == West::None) return 20276;
								else if (West == West::Low) return 20277;
								else return 20278;
						else
							if (Waterlogged)
								if (West == West::None) return 20279;
								else if (West == West::Low) return 20280;
								else return 20281;
							else
								if (West == West::None) return 20282;
								else if (West == West::Low) return 20283;
								else return 20284;
		}
		BlockState PolishedBlackstoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedBlackstoneBricks
	{
		constexpr BlockState PolishedBlackstoneBricks()
		{
			return 19872;
		}
	}
	namespace PolishedBlackstoneButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState PolishedBlackstoneButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20374;
					else return 20375;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20376;
					else return 20377;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20378;
					else return 20379;
				else
					if (Powered) return 20380;
					else return 20381;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20382;
					else return 20383;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20384;
					else return 20385;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20386;
					else return 20387;
				else
					if (Powered) return 20388;
					else return 20389;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 20390;
					else return 20391;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 20392;
					else return 20393;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 20394;
					else return 20395;
				else
					if (Powered) return 20396;
					else return 20397;
		}
		BlockState PolishedBlackstoneButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace PolishedBlackstonePressurePlate
	{
		constexpr BlockState PolishedBlackstonePressurePlate(const bool Powered)
		{
			if (Powered) return 20372;
			else return 20373;
		}
		BlockState PolishedBlackstonePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace PolishedBlackstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedBlackstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 20366;
				else return 20367;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 20368;
				else return 20369;
			else
				if (Waterlogged) return 20370;
				else return 20371;
		}
		BlockState PolishedBlackstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedBlackstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20286;
						else return 20287;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20288;
						else return 20289;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20290;
						else return 20291;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20292;
						else return 20293;
					else
						if (Waterlogged) return 20294;
						else return 20295;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20296;
						else return 20297;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20298;
						else return 20299;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20300;
						else return 20301;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20302;
						else return 20303;
					else
						if (Waterlogged) return 20304;
						else return 20305;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20306;
						else return 20307;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20308;
						else return 20309;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20310;
						else return 20311;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20312;
						else return 20313;
					else
						if (Waterlogged) return 20314;
						else return 20315;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20316;
						else return 20317;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20318;
						else return 20319;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20320;
						else return 20321;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20322;
						else return 20323;
					else
						if (Waterlogged) return 20324;
						else return 20325;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20326;
						else return 20327;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20328;
						else return 20329;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20330;
						else return 20331;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20332;
						else return 20333;
					else
						if (Waterlogged) return 20334;
						else return 20335;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20336;
						else return 20337;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20338;
						else return 20339;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20340;
						else return 20341;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20342;
						else return 20343;
					else
						if (Waterlogged) return 20344;
						else return 20345;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20346;
						else return 20347;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20348;
						else return 20349;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20350;
						else return 20351;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20352;
						else return 20353;
					else
						if (Waterlogged) return 20354;
						else return 20355;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 20356;
						else return 20357;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 20358;
						else return 20359;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 20360;
						else return 20361;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 20362;
						else return 20363;
					else
						if (Waterlogged) return 20364;
						else return 20365;
		}
		BlockState PolishedBlackstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedBlackstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedBlackstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20398;
								else if (West == West::Low) return 20399;
								else return 20400;
							else
								if (West == West::None) return 20401;
								else if (West == West::Low) return 20402;
								else return 20403;
						else
							if (Waterlogged)
								if (West == West::None) return 20404;
								else if (West == West::Low) return 20405;
								else return 20406;
							else
								if (West == West::None) return 20407;
								else if (West == West::Low) return 20408;
								else return 20409;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20410;
								else if (West == West::Low) return 20411;
								else return 20412;
							else
								if (West == West::None) return 20413;
								else if (West == West::Low) return 20414;
								else return 20415;
						else
							if (Waterlogged)
								if (West == West::None) return 20416;
								else if (West == West::Low) return 20417;
								else return 20418;
							else
								if (West == West::None) return 20419;
								else if (West == West::Low) return 20420;
								else return 20421;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20422;
								else if (West == West::Low) return 20423;
								else return 20424;
							else
								if (West == West::None) return 20425;
								else if (West == West::Low) return 20426;
								else return 20427;
						else
							if (Waterlogged)
								if (West == West::None) return 20428;
								else if (West == West::Low) return 20429;
								else return 20430;
							else
								if (West == West::None) return 20431;
								else if (West == West::Low) return 20432;
								else return 20433;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20434;
								else if (West == West::Low) return 20435;
								else return 20436;
							else
								if (West == West::None) return 20437;
								else if (West == West::Low) return 20438;
								else return 20439;
						else
							if (Waterlogged)
								if (West == West::None) return 20440;
								else if (West == West::Low) return 20441;
								else return 20442;
							else
								if (West == West::None) return 20443;
								else if (West == West::Low) return 20444;
								else return 20445;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20446;
								else if (West == West::Low) return 20447;
								else return 20448;
							else
								if (West == West::None) return 20449;
								else if (West == West::Low) return 20450;
								else return 20451;
						else
							if (Waterlogged)
								if (West == West::None) return 20452;
								else if (West == West::Low) return 20453;
								else return 20454;
							else
								if (West == West::None) return 20455;
								else if (West == West::Low) return 20456;
								else return 20457;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20458;
								else if (West == West::Low) return 20459;
								else return 20460;
							else
								if (West == West::None) return 20461;
								else if (West == West::Low) return 20462;
								else return 20463;
						else
							if (Waterlogged)
								if (West == West::None) return 20464;
								else if (West == West::Low) return 20465;
								else return 20466;
							else
								if (West == West::None) return 20467;
								else if (West == West::Low) return 20468;
								else return 20469;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20470;
								else if (West == West::Low) return 20471;
								else return 20472;
							else
								if (West == West::None) return 20473;
								else if (West == West::Low) return 20474;
								else return 20475;
						else
							if (Waterlogged)
								if (West == West::None) return 20476;
								else if (West == West::Low) return 20477;
								else return 20478;
							else
								if (West == West::None) return 20479;
								else if (West == West::Low) return 20480;
								else return 20481;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20482;
								else if (West == West::Low) return 20483;
								else return 20484;
							else
								if (West == West::None) return 20485;
								else if (West == West::Low) return 20486;
								else return 20487;
						else
							if (Waterlogged)
								if (West == West::None) return 20488;
								else if (West == West::Low) return 20489;
								else return 20490;
							else
								if (West == West::None) return 20491;
								else if (West == West::Low) return 20492;
								else return 20493;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20494;
								else if (West == West::Low) return 20495;
								else return 20496;
							else
								if (West == West::None) return 20497;
								else if (West == West::Low) return 20498;
								else return 20499;
						else
							if (Waterlogged)
								if (West == West::None) return 20500;
								else if (West == West::Low) return 20501;
								else return 20502;
							else
								if (West == West::None) return 20503;
								else if (West == West::Low) return 20504;
								else return 20505;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20506;
								else if (West == West::Low) return 20507;
								else return 20508;
							else
								if (West == West::None) return 20509;
								else if (West == West::Low) return 20510;
								else return 20511;
						else
							if (Waterlogged)
								if (West == West::None) return 20512;
								else if (West == West::Low) return 20513;
								else return 20514;
							else
								if (West == West::None) return 20515;
								else if (West == West::Low) return 20516;
								else return 20517;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20518;
								else if (West == West::Low) return 20519;
								else return 20520;
							else
								if (West == West::None) return 20521;
								else if (West == West::Low) return 20522;
								else return 20523;
						else
							if (Waterlogged)
								if (West == West::None) return 20524;
								else if (West == West::Low) return 20525;
								else return 20526;
							else
								if (West == West::None) return 20527;
								else if (West == West::Low) return 20528;
								else return 20529;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20530;
								else if (West == West::Low) return 20531;
								else return 20532;
							else
								if (West == West::None) return 20533;
								else if (West == West::Low) return 20534;
								else return 20535;
						else
							if (Waterlogged)
								if (West == West::None) return 20536;
								else if (West == West::Low) return 20537;
								else return 20538;
							else
								if (West == West::None) return 20539;
								else if (West == West::Low) return 20540;
								else return 20541;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20542;
								else if (West == West::Low) return 20543;
								else return 20544;
							else
								if (West == West::None) return 20545;
								else if (West == West::Low) return 20546;
								else return 20547;
						else
							if (Waterlogged)
								if (West == West::None) return 20548;
								else if (West == West::Low) return 20549;
								else return 20550;
							else
								if (West == West::None) return 20551;
								else if (West == West::Low) return 20552;
								else return 20553;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20554;
								else if (West == West::Low) return 20555;
								else return 20556;
							else
								if (West == West::None) return 20557;
								else if (West == West::Low) return 20558;
								else return 20559;
						else
							if (Waterlogged)
								if (West == West::None) return 20560;
								else if (West == West::Low) return 20561;
								else return 20562;
							else
								if (West == West::None) return 20563;
								else if (West == West::Low) return 20564;
								else return 20565;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20566;
								else if (West == West::Low) return 20567;
								else return 20568;
							else
								if (West == West::None) return 20569;
								else if (West == West::Low) return 20570;
								else return 20571;
						else
							if (Waterlogged)
								if (West == West::None) return 20572;
								else if (West == West::Low) return 20573;
								else return 20574;
							else
								if (West == West::None) return 20575;
								else if (West == West::Low) return 20576;
								else return 20577;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20578;
								else if (West == West::Low) return 20579;
								else return 20580;
							else
								if (West == West::None) return 20581;
								else if (West == West::Low) return 20582;
								else return 20583;
						else
							if (Waterlogged)
								if (West == West::None) return 20584;
								else if (West == West::Low) return 20585;
								else return 20586;
							else
								if (West == West::None) return 20587;
								else if (West == West::Low) return 20588;
								else return 20589;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20590;
								else if (West == West::Low) return 20591;
								else return 20592;
							else
								if (West == West::None) return 20593;
								else if (West == West::Low) return 20594;
								else return 20595;
						else
							if (Waterlogged)
								if (West == West::None) return 20596;
								else if (West == West::Low) return 20597;
								else return 20598;
							else
								if (West == West::None) return 20599;
								else if (West == West::Low) return 20600;
								else return 20601;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20602;
								else if (West == West::Low) return 20603;
								else return 20604;
							else
								if (West == West::None) return 20605;
								else if (West == West::Low) return 20606;
								else return 20607;
						else
							if (Waterlogged)
								if (West == West::None) return 20608;
								else if (West == West::Low) return 20609;
								else return 20610;
							else
								if (West == West::None) return 20611;
								else if (West == West::Low) return 20612;
								else return 20613;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20614;
								else if (West == West::Low) return 20615;
								else return 20616;
							else
								if (West == West::None) return 20617;
								else if (West == West::Low) return 20618;
								else return 20619;
						else
							if (Waterlogged)
								if (West == West::None) return 20620;
								else if (West == West::Low) return 20621;
								else return 20622;
							else
								if (West == West::None) return 20623;
								else if (West == West::Low) return 20624;
								else return 20625;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20626;
								else if (West == West::Low) return 20627;
								else return 20628;
							else
								if (West == West::None) return 20629;
								else if (West == West::Low) return 20630;
								else return 20631;
						else
							if (Waterlogged)
								if (West == West::None) return 20632;
								else if (West == West::Low) return 20633;
								else return 20634;
							else
								if (West == West::None) return 20635;
								else if (West == West::Low) return 20636;
								else return 20637;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20638;
								else if (West == West::Low) return 20639;
								else return 20640;
							else
								if (West == West::None) return 20641;
								else if (West == West::Low) return 20642;
								else return 20643;
						else
							if (Waterlogged)
								if (West == West::None) return 20644;
								else if (West == West::Low) return 20645;
								else return 20646;
							else
								if (West == West::None) return 20647;
								else if (West == West::Low) return 20648;
								else return 20649;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20650;
								else if (West == West::Low) return 20651;
								else return 20652;
							else
								if (West == West::None) return 20653;
								else if (West == West::Low) return 20654;
								else return 20655;
						else
							if (Waterlogged)
								if (West == West::None) return 20656;
								else if (West == West::Low) return 20657;
								else return 20658;
							else
								if (West == West::None) return 20659;
								else if (West == West::Low) return 20660;
								else return 20661;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20662;
								else if (West == West::Low) return 20663;
								else return 20664;
							else
								if (West == West::None) return 20665;
								else if (West == West::Low) return 20666;
								else return 20667;
						else
							if (Waterlogged)
								if (West == West::None) return 20668;
								else if (West == West::Low) return 20669;
								else return 20670;
							else
								if (West == West::None) return 20671;
								else if (West == West::Low) return 20672;
								else return 20673;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20674;
								else if (West == West::Low) return 20675;
								else return 20676;
							else
								if (West == West::None) return 20677;
								else if (West == West::Low) return 20678;
								else return 20679;
						else
							if (Waterlogged)
								if (West == West::None) return 20680;
								else if (West == West::Low) return 20681;
								else return 20682;
							else
								if (West == West::None) return 20683;
								else if (West == West::Low) return 20684;
								else return 20685;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20686;
								else if (West == West::Low) return 20687;
								else return 20688;
							else
								if (West == West::None) return 20689;
								else if (West == West::Low) return 20690;
								else return 20691;
						else
							if (Waterlogged)
								if (West == West::None) return 20692;
								else if (West == West::Low) return 20693;
								else return 20694;
							else
								if (West == West::None) return 20695;
								else if (West == West::Low) return 20696;
								else return 20697;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20698;
								else if (West == West::Low) return 20699;
								else return 20700;
							else
								if (West == West::None) return 20701;
								else if (West == West::Low) return 20702;
								else return 20703;
						else
							if (Waterlogged)
								if (West == West::None) return 20704;
								else if (West == West::Low) return 20705;
								else return 20706;
							else
								if (West == West::None) return 20707;
								else if (West == West::Low) return 20708;
								else return 20709;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 20710;
								else if (West == West::Low) return 20711;
								else return 20712;
							else
								if (West == West::None) return 20713;
								else if (West == West::Low) return 20714;
								else return 20715;
						else
							if (Waterlogged)
								if (West == West::None) return 20716;
								else if (West == West::Low) return 20717;
								else return 20718;
							else
								if (West == West::None) return 20719;
								else if (West == West::Low) return 20720;
								else return 20721;
		}
		BlockState PolishedBlackstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedDeepslate
	{
		constexpr BlockState PolishedDeepslate()
		{
			return 25318;
		}
	}
	namespace PolishedDeepslateSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedDeepslateSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 25399;
				else return 25400;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 25401;
				else return 25402;
			else
				if (Waterlogged) return 25403;
				else return 25404;
		}
		BlockState PolishedDeepslateSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDeepslateStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedDeepslateStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25319;
						else return 25320;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25321;
						else return 25322;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25323;
						else return 25324;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25325;
						else return 25326;
					else
						if (Waterlogged) return 25327;
						else return 25328;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25329;
						else return 25330;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25331;
						else return 25332;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25333;
						else return 25334;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25335;
						else return 25336;
					else
						if (Waterlogged) return 25337;
						else return 25338;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25339;
						else return 25340;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25341;
						else return 25342;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25343;
						else return 25344;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25345;
						else return 25346;
					else
						if (Waterlogged) return 25347;
						else return 25348;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25349;
						else return 25350;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25351;
						else return 25352;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25353;
						else return 25354;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25355;
						else return 25356;
					else
						if (Waterlogged) return 25357;
						else return 25358;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25359;
						else return 25360;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25361;
						else return 25362;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25363;
						else return 25364;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25365;
						else return 25366;
					else
						if (Waterlogged) return 25367;
						else return 25368;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25369;
						else return 25370;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25371;
						else return 25372;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25373;
						else return 25374;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25375;
						else return 25376;
					else
						if (Waterlogged) return 25377;
						else return 25378;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25379;
						else return 25380;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25381;
						else return 25382;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25383;
						else return 25384;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25385;
						else return 25386;
					else
						if (Waterlogged) return 25387;
						else return 25388;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 25389;
						else return 25390;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 25391;
						else return 25392;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 25393;
						else return 25394;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 25395;
						else return 25396;
					else
						if (Waterlogged) return 25397;
						else return 25398;
		}
		BlockState PolishedDeepslateStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDeepslateWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedDeepslateWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25405;
								else if (West == West::Low) return 25406;
								else return 25407;
							else
								if (West == West::None) return 25408;
								else if (West == West::Low) return 25409;
								else return 25410;
						else
							if (Waterlogged)
								if (West == West::None) return 25411;
								else if (West == West::Low) return 25412;
								else return 25413;
							else
								if (West == West::None) return 25414;
								else if (West == West::Low) return 25415;
								else return 25416;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25417;
								else if (West == West::Low) return 25418;
								else return 25419;
							else
								if (West == West::None) return 25420;
								else if (West == West::Low) return 25421;
								else return 25422;
						else
							if (Waterlogged)
								if (West == West::None) return 25423;
								else if (West == West::Low) return 25424;
								else return 25425;
							else
								if (West == West::None) return 25426;
								else if (West == West::Low) return 25427;
								else return 25428;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25429;
								else if (West == West::Low) return 25430;
								else return 25431;
							else
								if (West == West::None) return 25432;
								else if (West == West::Low) return 25433;
								else return 25434;
						else
							if (Waterlogged)
								if (West == West::None) return 25435;
								else if (West == West::Low) return 25436;
								else return 25437;
							else
								if (West == West::None) return 25438;
								else if (West == West::Low) return 25439;
								else return 25440;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25441;
								else if (West == West::Low) return 25442;
								else return 25443;
							else
								if (West == West::None) return 25444;
								else if (West == West::Low) return 25445;
								else return 25446;
						else
							if (Waterlogged)
								if (West == West::None) return 25447;
								else if (West == West::Low) return 25448;
								else return 25449;
							else
								if (West == West::None) return 25450;
								else if (West == West::Low) return 25451;
								else return 25452;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25453;
								else if (West == West::Low) return 25454;
								else return 25455;
							else
								if (West == West::None) return 25456;
								else if (West == West::Low) return 25457;
								else return 25458;
						else
							if (Waterlogged)
								if (West == West::None) return 25459;
								else if (West == West::Low) return 25460;
								else return 25461;
							else
								if (West == West::None) return 25462;
								else if (West == West::Low) return 25463;
								else return 25464;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25465;
								else if (West == West::Low) return 25466;
								else return 25467;
							else
								if (West == West::None) return 25468;
								else if (West == West::Low) return 25469;
								else return 25470;
						else
							if (Waterlogged)
								if (West == West::None) return 25471;
								else if (West == West::Low) return 25472;
								else return 25473;
							else
								if (West == West::None) return 25474;
								else if (West == West::Low) return 25475;
								else return 25476;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25477;
								else if (West == West::Low) return 25478;
								else return 25479;
							else
								if (West == West::None) return 25480;
								else if (West == West::Low) return 25481;
								else return 25482;
						else
							if (Waterlogged)
								if (West == West::None) return 25483;
								else if (West == West::Low) return 25484;
								else return 25485;
							else
								if (West == West::None) return 25486;
								else if (West == West::Low) return 25487;
								else return 25488;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25489;
								else if (West == West::Low) return 25490;
								else return 25491;
							else
								if (West == West::None) return 25492;
								else if (West == West::Low) return 25493;
								else return 25494;
						else
							if (Waterlogged)
								if (West == West::None) return 25495;
								else if (West == West::Low) return 25496;
								else return 25497;
							else
								if (West == West::None) return 25498;
								else if (West == West::Low) return 25499;
								else return 25500;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25501;
								else if (West == West::Low) return 25502;
								else return 25503;
							else
								if (West == West::None) return 25504;
								else if (West == West::Low) return 25505;
								else return 25506;
						else
							if (Waterlogged)
								if (West == West::None) return 25507;
								else if (West == West::Low) return 25508;
								else return 25509;
							else
								if (West == West::None) return 25510;
								else if (West == West::Low) return 25511;
								else return 25512;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25513;
								else if (West == West::Low) return 25514;
								else return 25515;
							else
								if (West == West::None) return 25516;
								else if (West == West::Low) return 25517;
								else return 25518;
						else
							if (Waterlogged)
								if (West == West::None) return 25519;
								else if (West == West::Low) return 25520;
								else return 25521;
							else
								if (West == West::None) return 25522;
								else if (West == West::Low) return 25523;
								else return 25524;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25525;
								else if (West == West::Low) return 25526;
								else return 25527;
							else
								if (West == West::None) return 25528;
								else if (West == West::Low) return 25529;
								else return 25530;
						else
							if (Waterlogged)
								if (West == West::None) return 25531;
								else if (West == West::Low) return 25532;
								else return 25533;
							else
								if (West == West::None) return 25534;
								else if (West == West::Low) return 25535;
								else return 25536;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25537;
								else if (West == West::Low) return 25538;
								else return 25539;
							else
								if (West == West::None) return 25540;
								else if (West == West::Low) return 25541;
								else return 25542;
						else
							if (Waterlogged)
								if (West == West::None) return 25543;
								else if (West == West::Low) return 25544;
								else return 25545;
							else
								if (West == West::None) return 25546;
								else if (West == West::Low) return 25547;
								else return 25548;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25549;
								else if (West == West::Low) return 25550;
								else return 25551;
							else
								if (West == West::None) return 25552;
								else if (West == West::Low) return 25553;
								else return 25554;
						else
							if (Waterlogged)
								if (West == West::None) return 25555;
								else if (West == West::Low) return 25556;
								else return 25557;
							else
								if (West == West::None) return 25558;
								else if (West == West::Low) return 25559;
								else return 25560;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25561;
								else if (West == West::Low) return 25562;
								else return 25563;
							else
								if (West == West::None) return 25564;
								else if (West == West::Low) return 25565;
								else return 25566;
						else
							if (Waterlogged)
								if (West == West::None) return 25567;
								else if (West == West::Low) return 25568;
								else return 25569;
							else
								if (West == West::None) return 25570;
								else if (West == West::Low) return 25571;
								else return 25572;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25573;
								else if (West == West::Low) return 25574;
								else return 25575;
							else
								if (West == West::None) return 25576;
								else if (West == West::Low) return 25577;
								else return 25578;
						else
							if (Waterlogged)
								if (West == West::None) return 25579;
								else if (West == West::Low) return 25580;
								else return 25581;
							else
								if (West == West::None) return 25582;
								else if (West == West::Low) return 25583;
								else return 25584;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25585;
								else if (West == West::Low) return 25586;
								else return 25587;
							else
								if (West == West::None) return 25588;
								else if (West == West::Low) return 25589;
								else return 25590;
						else
							if (Waterlogged)
								if (West == West::None) return 25591;
								else if (West == West::Low) return 25592;
								else return 25593;
							else
								if (West == West::None) return 25594;
								else if (West == West::Low) return 25595;
								else return 25596;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25597;
								else if (West == West::Low) return 25598;
								else return 25599;
							else
								if (West == West::None) return 25600;
								else if (West == West::Low) return 25601;
								else return 25602;
						else
							if (Waterlogged)
								if (West == West::None) return 25603;
								else if (West == West::Low) return 25604;
								else return 25605;
							else
								if (West == West::None) return 25606;
								else if (West == West::Low) return 25607;
								else return 25608;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25609;
								else if (West == West::Low) return 25610;
								else return 25611;
							else
								if (West == West::None) return 25612;
								else if (West == West::Low) return 25613;
								else return 25614;
						else
							if (Waterlogged)
								if (West == West::None) return 25615;
								else if (West == West::Low) return 25616;
								else return 25617;
							else
								if (West == West::None) return 25618;
								else if (West == West::Low) return 25619;
								else return 25620;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25621;
								else if (West == West::Low) return 25622;
								else return 25623;
							else
								if (West == West::None) return 25624;
								else if (West == West::Low) return 25625;
								else return 25626;
						else
							if (Waterlogged)
								if (West == West::None) return 25627;
								else if (West == West::Low) return 25628;
								else return 25629;
							else
								if (West == West::None) return 25630;
								else if (West == West::Low) return 25631;
								else return 25632;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25633;
								else if (West == West::Low) return 25634;
								else return 25635;
							else
								if (West == West::None) return 25636;
								else if (West == West::Low) return 25637;
								else return 25638;
						else
							if (Waterlogged)
								if (West == West::None) return 25639;
								else if (West == West::Low) return 25640;
								else return 25641;
							else
								if (West == West::None) return 25642;
								else if (West == West::Low) return 25643;
								else return 25644;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25645;
								else if (West == West::Low) return 25646;
								else return 25647;
							else
								if (West == West::None) return 25648;
								else if (West == West::Low) return 25649;
								else return 25650;
						else
							if (Waterlogged)
								if (West == West::None) return 25651;
								else if (West == West::Low) return 25652;
								else return 25653;
							else
								if (West == West::None) return 25654;
								else if (West == West::Low) return 25655;
								else return 25656;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25657;
								else if (West == West::Low) return 25658;
								else return 25659;
							else
								if (West == West::None) return 25660;
								else if (West == West::Low) return 25661;
								else return 25662;
						else
							if (Waterlogged)
								if (West == West::None) return 25663;
								else if (West == West::Low) return 25664;
								else return 25665;
							else
								if (West == West::None) return 25666;
								else if (West == West::Low) return 25667;
								else return 25668;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25669;
								else if (West == West::Low) return 25670;
								else return 25671;
							else
								if (West == West::None) return 25672;
								else if (West == West::Low) return 25673;
								else return 25674;
						else
							if (Waterlogged)
								if (West == West::None) return 25675;
								else if (West == West::Low) return 25676;
								else return 25677;
							else
								if (West == West::None) return 25678;
								else if (West == West::Low) return 25679;
								else return 25680;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25681;
								else if (West == West::Low) return 25682;
								else return 25683;
							else
								if (West == West::None) return 25684;
								else if (West == West::Low) return 25685;
								else return 25686;
						else
							if (Waterlogged)
								if (West == West::None) return 25687;
								else if (West == West::Low) return 25688;
								else return 25689;
							else
								if (West == West::None) return 25690;
								else if (West == West::Low) return 25691;
								else return 25692;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25693;
								else if (West == West::Low) return 25694;
								else return 25695;
							else
								if (West == West::None) return 25696;
								else if (West == West::Low) return 25697;
								else return 25698;
						else
							if (Waterlogged)
								if (West == West::None) return 25699;
								else if (West == West::Low) return 25700;
								else return 25701;
							else
								if (West == West::None) return 25702;
								else if (West == West::Low) return 25703;
								else return 25704;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25705;
								else if (West == West::Low) return 25706;
								else return 25707;
							else
								if (West == West::None) return 25708;
								else if (West == West::Low) return 25709;
								else return 25710;
						else
							if (Waterlogged)
								if (West == West::None) return 25711;
								else if (West == West::Low) return 25712;
								else return 25713;
							else
								if (West == West::None) return 25714;
								else if (West == West::Low) return 25715;
								else return 25716;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 25717;
								else if (West == West::Low) return 25718;
								else return 25719;
							else
								if (West == West::None) return 25720;
								else if (West == West::Low) return 25721;
								else return 25722;
						else
							if (Waterlogged)
								if (West == West::None) return 25723;
								else if (West == West::Low) return 25724;
								else return 25725;
							else
								if (West == West::None) return 25726;
								else if (West == West::Low) return 25727;
								else return 25728;
		}
		BlockState PolishedDeepslateWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace PolishedDiorite
	{
		constexpr BlockState PolishedDiorite()
		{
			return 5;
		}
	}
	namespace PolishedDioriteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedDioriteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14100;
				else return 14101;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14102;
				else return 14103;
			else
				if (Waterlogged) return 14104;
				else return 14105;
		}
		BlockState PolishedDioriteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedDioriteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedDioriteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13202;
						else return 13203;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13204;
						else return 13205;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13206;
						else return 13207;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13208;
						else return 13209;
					else
						if (Waterlogged) return 13210;
						else return 13211;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13212;
						else return 13213;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13214;
						else return 13215;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13216;
						else return 13217;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13218;
						else return 13219;
					else
						if (Waterlogged) return 13220;
						else return 13221;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13222;
						else return 13223;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13224;
						else return 13225;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13226;
						else return 13227;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13228;
						else return 13229;
					else
						if (Waterlogged) return 13230;
						else return 13231;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13232;
						else return 13233;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13234;
						else return 13235;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13236;
						else return 13237;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13238;
						else return 13239;
					else
						if (Waterlogged) return 13240;
						else return 13241;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13242;
						else return 13243;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13244;
						else return 13245;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13246;
						else return 13247;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13248;
						else return 13249;
					else
						if (Waterlogged) return 13250;
						else return 13251;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13252;
						else return 13253;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13254;
						else return 13255;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13256;
						else return 13257;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13258;
						else return 13259;
					else
						if (Waterlogged) return 13260;
						else return 13261;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13262;
						else return 13263;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13264;
						else return 13265;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13266;
						else return 13267;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13268;
						else return 13269;
					else
						if (Waterlogged) return 13270;
						else return 13271;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13272;
						else return 13273;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13274;
						else return 13275;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13276;
						else return 13277;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13278;
						else return 13279;
					else
						if (Waterlogged) return 13280;
						else return 13281;
		}
		BlockState PolishedDioriteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedGranite
	{
		constexpr BlockState PolishedGranite()
		{
			return 3;
		}
	}
	namespace PolishedGraniteSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedGraniteSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14082;
				else return 14083;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14084;
				else return 14085;
			else
				if (Waterlogged) return 14086;
				else return 14087;
		}
		BlockState PolishedGraniteSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedGraniteStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedGraniteStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12962;
						else return 12963;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12964;
						else return 12965;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12966;
						else return 12967;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12968;
						else return 12969;
					else
						if (Waterlogged) return 12970;
						else return 12971;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12972;
						else return 12973;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12974;
						else return 12975;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12976;
						else return 12977;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12978;
						else return 12979;
					else
						if (Waterlogged) return 12980;
						else return 12981;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12982;
						else return 12983;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12984;
						else return 12985;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12986;
						else return 12987;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12988;
						else return 12989;
					else
						if (Waterlogged) return 12990;
						else return 12991;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12992;
						else return 12993;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12994;
						else return 12995;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12996;
						else return 12997;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12998;
						else return 12999;
					else
						if (Waterlogged) return 13000;
						else return 13001;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13002;
						else return 13003;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13004;
						else return 13005;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13006;
						else return 13007;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13008;
						else return 13009;
					else
						if (Waterlogged) return 13010;
						else return 13011;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13012;
						else return 13013;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13014;
						else return 13015;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13016;
						else return 13017;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13018;
						else return 13019;
					else
						if (Waterlogged) return 13020;
						else return 13021;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13022;
						else return 13023;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13024;
						else return 13025;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13026;
						else return 13027;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13028;
						else return 13029;
					else
						if (Waterlogged) return 13030;
						else return 13031;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13032;
						else return 13033;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13034;
						else return 13035;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13036;
						else return 13037;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13038;
						else return 13039;
					else
						if (Waterlogged) return 13040;
						else return 13041;
		}
		BlockState PolishedGraniteStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuff
	{
		constexpr BlockState PolishedTuff()
		{
			return 21492;
		}
	}
	namespace PolishedTuffSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PolishedTuffSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 21493;
				else return 21494;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 21495;
				else return 21496;
			else
				if (Waterlogged) return 21497;
				else return 21498;
		}
		BlockState PolishedTuffSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuffStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PolishedTuffStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21499;
						else return 21500;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21501;
						else return 21502;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21503;
						else return 21504;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21505;
						else return 21506;
					else
						if (Waterlogged) return 21507;
						else return 21508;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21509;
						else return 21510;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21511;
						else return 21512;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21513;
						else return 21514;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21515;
						else return 21516;
					else
						if (Waterlogged) return 21517;
						else return 21518;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21519;
						else return 21520;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21521;
						else return 21522;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21523;
						else return 21524;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21525;
						else return 21526;
					else
						if (Waterlogged) return 21527;
						else return 21528;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21529;
						else return 21530;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21531;
						else return 21532;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21533;
						else return 21534;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21535;
						else return 21536;
					else
						if (Waterlogged) return 21537;
						else return 21538;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21539;
						else return 21540;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21541;
						else return 21542;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21543;
						else return 21544;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21545;
						else return 21546;
					else
						if (Waterlogged) return 21547;
						else return 21548;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21549;
						else return 21550;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21551;
						else return 21552;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21553;
						else return 21554;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21555;
						else return 21556;
					else
						if (Waterlogged) return 21557;
						else return 21558;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21559;
						else return 21560;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21561;
						else return 21562;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21563;
						else return 21564;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21565;
						else return 21566;
					else
						if (Waterlogged) return 21567;
						else return 21568;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21569;
						else return 21570;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21571;
						else return 21572;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21573;
						else return 21574;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21575;
						else return 21576;
					else
						if (Waterlogged) return 21577;
						else return 21578;
		}
		BlockState PolishedTuffStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PolishedTuffWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PolishedTuffWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21579;
								else if (West == West::Low) return 21580;
								else return 21581;
							else
								if (West == West::None) return 21582;
								else if (West == West::Low) return 21583;
								else return 21584;
						else
							if (Waterlogged)
								if (West == West::None) return 21585;
								else if (West == West::Low) return 21586;
								else return 21587;
							else
								if (West == West::None) return 21588;
								else if (West == West::Low) return 21589;
								else return 21590;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21591;
								else if (West == West::Low) return 21592;
								else return 21593;
							else
								if (West == West::None) return 21594;
								else if (West == West::Low) return 21595;
								else return 21596;
						else
							if (Waterlogged)
								if (West == West::None) return 21597;
								else if (West == West::Low) return 21598;
								else return 21599;
							else
								if (West == West::None) return 21600;
								else if (West == West::Low) return 21601;
								else return 21602;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21603;
								else if (West == West::Low) return 21604;
								else return 21605;
							else
								if (West == West::None) return 21606;
								else if (West == West::Low) return 21607;
								else return 21608;
						else
							if (Waterlogged)
								if (West == West::None) return 21609;
								else if (West == West::Low) return 21610;
								else return 21611;
							else
								if (West == West::None) return 21612;
								else if (West == West::Low) return 21613;
								else return 21614;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21615;
								else if (West == West::Low) return 21616;
								else return 21617;
							else
								if (West == West::None) return 21618;
								else if (West == West::Low) return 21619;
								else return 21620;
						else
							if (Waterlogged)
								if (West == West::None) return 21621;
								else if (West == West::Low) return 21622;
								else return 21623;
							else
								if (West == West::None) return 21624;
								else if (West == West::Low) return 21625;
								else return 21626;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21627;
								else if (West == West::Low) return 21628;
								else return 21629;
							else
								if (West == West::None) return 21630;
								else if (West == West::Low) return 21631;
								else return 21632;
						else
							if (Waterlogged)
								if (West == West::None) return 21633;
								else if (West == West::Low) return 21634;
								else return 21635;
							else
								if (West == West::None) return 21636;
								else if (West == West::Low) return 21637;
								else return 21638;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21639;
								else if (West == West::Low) return 21640;
								else return 21641;
							else
								if (West == West::None) return 21642;
								else if (West == West::Low) return 21643;
								else return 21644;
						else
							if (Waterlogged)
								if (West == West::None) return 21645;
								else if (West == West::Low) return 21646;
								else return 21647;
							else
								if (West == West::None) return 21648;
								else if (West == West::Low) return 21649;
								else return 21650;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21651;
								else if (West == West::Low) return 21652;
								else return 21653;
							else
								if (West == West::None) return 21654;
								else if (West == West::Low) return 21655;
								else return 21656;
						else
							if (Waterlogged)
								if (West == West::None) return 21657;
								else if (West == West::Low) return 21658;
								else return 21659;
							else
								if (West == West::None) return 21660;
								else if (West == West::Low) return 21661;
								else return 21662;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21663;
								else if (West == West::Low) return 21664;
								else return 21665;
							else
								if (West == West::None) return 21666;
								else if (West == West::Low) return 21667;
								else return 21668;
						else
							if (Waterlogged)
								if (West == West::None) return 21669;
								else if (West == West::Low) return 21670;
								else return 21671;
							else
								if (West == West::None) return 21672;
								else if (West == West::Low) return 21673;
								else return 21674;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21675;
								else if (West == West::Low) return 21676;
								else return 21677;
							else
								if (West == West::None) return 21678;
								else if (West == West::Low) return 21679;
								else return 21680;
						else
							if (Waterlogged)
								if (West == West::None) return 21681;
								else if (West == West::Low) return 21682;
								else return 21683;
							else
								if (West == West::None) return 21684;
								else if (West == West::Low) return 21685;
								else return 21686;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21687;
								else if (West == West::Low) return 21688;
								else return 21689;
							else
								if (West == West::None) return 21690;
								else if (West == West::Low) return 21691;
								else return 21692;
						else
							if (Waterlogged)
								if (West == West::None) return 21693;
								else if (West == West::Low) return 21694;
								else return 21695;
							else
								if (West == West::None) return 21696;
								else if (West == West::Low) return 21697;
								else return 21698;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21699;
								else if (West == West::Low) return 21700;
								else return 21701;
							else
								if (West == West::None) return 21702;
								else if (West == West::Low) return 21703;
								else return 21704;
						else
							if (Waterlogged)
								if (West == West::None) return 21705;
								else if (West == West::Low) return 21706;
								else return 21707;
							else
								if (West == West::None) return 21708;
								else if (West == West::Low) return 21709;
								else return 21710;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21711;
								else if (West == West::Low) return 21712;
								else return 21713;
							else
								if (West == West::None) return 21714;
								else if (West == West::Low) return 21715;
								else return 21716;
						else
							if (Waterlogged)
								if (West == West::None) return 21717;
								else if (West == West::Low) return 21718;
								else return 21719;
							else
								if (West == West::None) return 21720;
								else if (West == West::Low) return 21721;
								else return 21722;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21723;
								else if (West == West::Low) return 21724;
								else return 21725;
							else
								if (West == West::None) return 21726;
								else if (West == West::Low) return 21727;
								else return 21728;
						else
							if (Waterlogged)
								if (West == West::None) return 21729;
								else if (West == West::Low) return 21730;
								else return 21731;
							else
								if (West == West::None) return 21732;
								else if (West == West::Low) return 21733;
								else return 21734;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21735;
								else if (West == West::Low) return 21736;
								else return 21737;
							else
								if (West == West::None) return 21738;
								else if (West == West::Low) return 21739;
								else return 21740;
						else
							if (Waterlogged)
								if (West == West::None) return 21741;
								else if (West == West::Low) return 21742;
								else return 21743;
							else
								if (West == West::None) return 21744;
								else if (West == West::Low) return 21745;
								else return 21746;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21747;
								else if (West == West::Low) return 21748;
								else return 21749;
							else
								if (West == West::None) return 21750;
								else if (West == West::Low) return 21751;
								else return 21752;
						else
							if (Waterlogged)
								if (West == West::None) return 21753;
								else if (West == West::Low) return 21754;
								else return 21755;
							else
								if (West == West::None) return 21756;
								else if (West == West::Low) return 21757;
								else return 21758;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21759;
								else if (West == West::Low) return 21760;
								else return 21761;
							else
								if (West == West::None) return 21762;
								else if (West == West::Low) return 21763;
								else return 21764;
						else
							if (Waterlogged)
								if (West == West::None) return 21765;
								else if (West == West::Low) return 21766;
								else return 21767;
							else
								if (West == West::None) return 21768;
								else if (West == West::Low) return 21769;
								else return 21770;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21771;
								else if (West == West::Low) return 21772;
								else return 21773;
							else
								if (West == West::None) return 21774;
								else if (West == West::Low) return 21775;
								else return 21776;
						else
							if (Waterlogged)
								if (West == West::None) return 21777;
								else if (West == West::Low) return 21778;
								else return 21779;
							else
								if (West == West::None) return 21780;
								else if (West == West::Low) return 21781;
								else return 21782;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21783;
								else if (West == West::Low) return 21784;
								else return 21785;
							else
								if (West == West::None) return 21786;
								else if (West == West::Low) return 21787;
								else return 21788;
						else
							if (Waterlogged)
								if (West == West::None) return 21789;
								else if (West == West::Low) return 21790;
								else return 21791;
							else
								if (West == West::None) return 21792;
								else if (West == West::Low) return 21793;
								else return 21794;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21795;
								else if (West == West::Low) return 21796;
								else return 21797;
							else
								if (West == West::None) return 21798;
								else if (West == West::Low) return 21799;
								else return 21800;
						else
							if (Waterlogged)
								if (West == West::None) return 21801;
								else if (West == West::Low) return 21802;
								else return 21803;
							else
								if (West == West::None) return 21804;
								else if (West == West::Low) return 21805;
								else return 21806;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21807;
								else if (West == West::Low) return 21808;
								else return 21809;
							else
								if (West == West::None) return 21810;
								else if (West == West::Low) return 21811;
								else return 21812;
						else
							if (Waterlogged)
								if (West == West::None) return 21813;
								else if (West == West::Low) return 21814;
								else return 21815;
							else
								if (West == West::None) return 21816;
								else if (West == West::Low) return 21817;
								else return 21818;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21819;
								else if (West == West::Low) return 21820;
								else return 21821;
							else
								if (West == West::None) return 21822;
								else if (West == West::Low) return 21823;
								else return 21824;
						else
							if (Waterlogged)
								if (West == West::None) return 21825;
								else if (West == West::Low) return 21826;
								else return 21827;
							else
								if (West == West::None) return 21828;
								else if (West == West::Low) return 21829;
								else return 21830;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21831;
								else if (West == West::Low) return 21832;
								else return 21833;
							else
								if (West == West::None) return 21834;
								else if (West == West::Low) return 21835;
								else return 21836;
						else
							if (Waterlogged)
								if (West == West::None) return 21837;
								else if (West == West::Low) return 21838;
								else return 21839;
							else
								if (West == West::None) return 21840;
								else if (West == West::Low) return 21841;
								else return 21842;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21843;
								else if (West == West::Low) return 21844;
								else return 21845;
							else
								if (West == West::None) return 21846;
								else if (West == West::Low) return 21847;
								else return 21848;
						else
							if (Waterlogged)
								if (West == West::None) return 21849;
								else if (West == West::Low) return 21850;
								else return 21851;
							else
								if (West == West::None) return 21852;
								else if (West == West::Low) return 21853;
								else return 21854;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21855;
								else if (West == West::Low) return 21856;
								else return 21857;
							else
								if (West == West::None) return 21858;
								else if (West == West::Low) return 21859;
								else return 21860;
						else
							if (Waterlogged)
								if (West == West::None) return 21861;
								else if (West == West::Low) return 21862;
								else return 21863;
							else
								if (West == West::None) return 21864;
								else if (West == West::Low) return 21865;
								else return 21866;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21867;
								else if (West == West::Low) return 21868;
								else return 21869;
							else
								if (West == West::None) return 21870;
								else if (West == West::Low) return 21871;
								else return 21872;
						else
							if (Waterlogged)
								if (West == West::None) return 21873;
								else if (West == West::Low) return 21874;
								else return 21875;
							else
								if (West == West::None) return 21876;
								else if (West == West::Low) return 21877;
								else return 21878;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21879;
								else if (West == West::Low) return 21880;
								else return 21881;
							else
								if (West == West::None) return 21882;
								else if (West == West::Low) return 21883;
								else return 21884;
						else
							if (Waterlogged)
								if (West == West::None) return 21885;
								else if (West == West::Low) return 21886;
								else return 21887;
							else
								if (West == West::None) return 21888;
								else if (West == West::Low) return 21889;
								else return 21890;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21891;
								else if (West == West::Low) return 21892;
								else return 21893;
							else
								if (West == West::None) return 21894;
								else if (West == West::Low) return 21895;
								else return 21896;
						else
							if (Waterlogged)
								if (West == West::None) return 21897;
								else if (West == West::Low) return 21898;
								else return 21899;
							else
								if (West == West::None) return 21900;
								else if (West == West::Low) return 21901;
								else return 21902;
		}
		BlockState PolishedTuffWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Poppy
	{
		constexpr BlockState Poppy()
		{
			return 2077;
		}
	}
	namespace Potatoes
	{
		constexpr BlockState Potatoes(const int Age)
		{
			if (Age == 0) return 8603;
			else if (Age == 1) return 8604;
			else if (Age == 2) return 8605;
			else if (Age == 3) return 8606;
			else if (Age == 4) return 8607;
			else if (Age == 5) return 8608;
			else if (Age == 6) return 8609;
			else return 8610;
		}
		BlockState Potatoes();
		int Age(BlockState Block);
	}
	namespace PottedAcaciaSapling
	{
		constexpr BlockState PottedAcaciaSapling()
		{
			return 8573;
		}
	}
	namespace PottedAllium
	{
		constexpr BlockState PottedAllium()
		{
			return 8581;
		}
	}
	namespace PottedAzaleaBush
	{
		constexpr BlockState PottedAzaleaBush()
		{
			return 26561;
		}
	}
	namespace PottedAzureBluet
	{
		constexpr BlockState PottedAzureBluet()
		{
			return 8582;
		}
	}
	namespace PottedBamboo
	{
		constexpr BlockState PottedBamboo()
		{
			return 12957;
		}
	}
	namespace PottedBirchSapling
	{
		constexpr BlockState PottedBirchSapling()
		{
			return 8571;
		}
	}
	namespace PottedBlueOrchid
	{
		constexpr BlockState PottedBlueOrchid()
		{
			return 8580;
		}
	}
	namespace PottedBrownMushroom
	{
		constexpr BlockState PottedBrownMushroom()
		{
			return 8592;
		}
	}
	namespace PottedCactus
	{
		constexpr BlockState PottedCactus()
		{
			return 8594;
		}
	}
	namespace PottedCherrySapling
	{
		constexpr BlockState PottedCherrySapling()
		{
			return 8574;
		}
	}
	namespace PottedCornflower
	{
		constexpr BlockState PottedCornflower()
		{
			return 8588;
		}
	}
	namespace PottedCrimsonFungus
	{
		constexpr BlockState PottedCrimsonFungus()
		{
			return 19455;
		}
	}
	namespace PottedCrimsonRoots
	{
		constexpr BlockState PottedCrimsonRoots()
		{
			return 19457;
		}
	}
	namespace PottedDandelion
	{
		constexpr BlockState PottedDandelion()
		{
			return 8578;
		}
	}
	namespace PottedDarkOakSapling
	{
		constexpr BlockState PottedDarkOakSapling()
		{
			return 8575;
		}
	}
	namespace PottedDeadBush
	{
		constexpr BlockState PottedDeadBush()
		{
			return 8593;
		}
	}
	namespace PottedFern
	{
		constexpr BlockState PottedFern()
		{
			return 8577;
		}
	}
	namespace PottedFloweringAzaleaBush
	{
		constexpr BlockState PottedFloweringAzaleaBush()
		{
			return 26562;
		}
	}
	namespace PottedJungleSapling
	{
		constexpr BlockState PottedJungleSapling()
		{
			return 8572;
		}
	}
	namespace PottedLilyOfTheValley
	{
		constexpr BlockState PottedLilyOfTheValley()
		{
			return 8589;
		}
	}
	namespace PottedMangrovePropagule
	{
		constexpr BlockState PottedMangrovePropagule()
		{
			return 8576;
		}
	}
	namespace PottedOakSapling
	{
		constexpr BlockState PottedOakSapling()
		{
			return 8569;
		}
	}
	namespace PottedOrangeTulip
	{
		constexpr BlockState PottedOrangeTulip()
		{
			return 8584;
		}
	}
	namespace PottedOxeyeDaisy
	{
		constexpr BlockState PottedOxeyeDaisy()
		{
			return 8587;
		}
	}
	namespace PottedPinkTulip
	{
		constexpr BlockState PottedPinkTulip()
		{
			return 8586;
		}
	}
	namespace PottedPoppy
	{
		constexpr BlockState PottedPoppy()
		{
			return 8579;
		}
	}
	namespace PottedRedMushroom
	{
		constexpr BlockState PottedRedMushroom()
		{
			return 8591;
		}
	}
	namespace PottedRedTulip
	{
		constexpr BlockState PottedRedTulip()
		{
			return 8583;
		}
	}
	namespace PottedSpruceSapling
	{
		constexpr BlockState PottedSpruceSapling()
		{
			return 8570;
		}
	}
	namespace PottedTorchflower
	{
		constexpr BlockState PottedTorchflower()
		{
			return 8568;
		}
	}
	namespace PottedWarpedFungus
	{
		constexpr BlockState PottedWarpedFungus()
		{
			return 19456;
		}
	}
	namespace PottedWarpedRoots
	{
		constexpr BlockState PottedWarpedRoots()
		{
			return 19458;
		}
	}
	namespace PottedWhiteTulip
	{
		constexpr BlockState PottedWhiteTulip()
		{
			return 8585;
		}
	}
	namespace PottedWitherRose
	{
		constexpr BlockState PottedWitherRose()
		{
			return 8590;
		}
	}
	namespace PowderSnow
	{
		constexpr BlockState PowderSnow()
		{
			return 22318;
		}
	}
	namespace PowderSnowCauldron
	{
		constexpr BlockState PowderSnowCauldron(const int Level)
		{
			if (Level == 1) return 7403;
			else if (Level == 2) return 7404;
			else return 7405;
		}
		BlockState PowderSnowCauldron();
		int Level(BlockState Block);
	}
	namespace PoweredRail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
		};
		constexpr BlockState PoweredRail(const bool Powered, const enum Shape Shape, const bool Waterlogged)
		{
			if (Powered)
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1944;
					else return 1945;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 1946;
					else return 1947;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 1948;
					else return 1949;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 1950;
					else return 1951;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 1952;
					else return 1953;
				else
					if (Waterlogged) return 1954;
					else return 1955;
			else
				if (Shape == Shape::NorthSouth)
					if (Waterlogged) return 1956;
					else return 1957;
				else if (Shape == Shape::EastWest)
					if (Waterlogged) return 1958;
					else return 1959;
				else if (Shape == Shape::AscendingEast)
					if (Waterlogged) return 1960;
					else return 1961;
				else if (Shape == Shape::AscendingWest)
					if (Waterlogged) return 1962;
					else return 1963;
				else if (Shape == Shape::AscendingNorth)
					if (Waterlogged) return 1964;
					else return 1965;
				else
					if (Waterlogged) return 1966;
					else return 1967;
		}
		BlockState PoweredRail();
		bool Powered(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Prismarine
	{
		constexpr BlockState Prismarine()
		{
			return 10463;
		}
	}
	namespace PrismarineBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PrismarineBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 10712;
				else return 10713;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 10714;
				else return 10715;
			else
				if (Waterlogged) return 10716;
				else return 10717;
		}
		BlockState PrismarineBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PrismarineBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10546;
						else return 10547;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10548;
						else return 10549;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10550;
						else return 10551;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10552;
						else return 10553;
					else
						if (Waterlogged) return 10554;
						else return 10555;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10556;
						else return 10557;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10558;
						else return 10559;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10560;
						else return 10561;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10562;
						else return 10563;
					else
						if (Waterlogged) return 10564;
						else return 10565;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10566;
						else return 10567;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10568;
						else return 10569;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10570;
						else return 10571;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10572;
						else return 10573;
					else
						if (Waterlogged) return 10574;
						else return 10575;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10576;
						else return 10577;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10578;
						else return 10579;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10580;
						else return 10581;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10582;
						else return 10583;
					else
						if (Waterlogged) return 10584;
						else return 10585;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10586;
						else return 10587;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10588;
						else return 10589;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10590;
						else return 10591;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10592;
						else return 10593;
					else
						if (Waterlogged) return 10594;
						else return 10595;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10596;
						else return 10597;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10598;
						else return 10599;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10600;
						else return 10601;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10602;
						else return 10603;
					else
						if (Waterlogged) return 10604;
						else return 10605;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10606;
						else return 10607;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10608;
						else return 10609;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10610;
						else return 10611;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10612;
						else return 10613;
					else
						if (Waterlogged) return 10614;
						else return 10615;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10616;
						else return 10617;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10618;
						else return 10619;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10620;
						else return 10621;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10622;
						else return 10623;
					else
						if (Waterlogged) return 10624;
						else return 10625;
		}
		BlockState PrismarineBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineBricks
	{
		constexpr BlockState PrismarineBricks()
		{
			return 10464;
		}
	}
	namespace PrismarineSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PrismarineSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 10706;
				else return 10707;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 10708;
				else return 10709;
			else
				if (Waterlogged) return 10710;
				else return 10711;
		}
		BlockState PrismarineSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PrismarineStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10466;
						else return 10467;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10468;
						else return 10469;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10470;
						else return 10471;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10472;
						else return 10473;
					else
						if (Waterlogged) return 10474;
						else return 10475;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10476;
						else return 10477;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10478;
						else return 10479;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10480;
						else return 10481;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10482;
						else return 10483;
					else
						if (Waterlogged) return 10484;
						else return 10485;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10486;
						else return 10487;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10488;
						else return 10489;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10490;
						else return 10491;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10492;
						else return 10493;
					else
						if (Waterlogged) return 10494;
						else return 10495;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10496;
						else return 10497;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10498;
						else return 10499;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10500;
						else return 10501;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10502;
						else return 10503;
					else
						if (Waterlogged) return 10504;
						else return 10505;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10506;
						else return 10507;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10508;
						else return 10509;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10510;
						else return 10511;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10512;
						else return 10513;
					else
						if (Waterlogged) return 10514;
						else return 10515;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10516;
						else return 10517;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10518;
						else return 10519;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10520;
						else return 10521;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10522;
						else return 10523;
					else
						if (Waterlogged) return 10524;
						else return 10525;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10526;
						else return 10527;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10528;
						else return 10529;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10530;
						else return 10531;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10532;
						else return 10533;
					else
						if (Waterlogged) return 10534;
						else return 10535;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 10536;
						else return 10537;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 10538;
						else return 10539;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 10540;
						else return 10541;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 10542;
						else return 10543;
					else
						if (Waterlogged) return 10544;
						else return 10545;
		}
		BlockState PrismarineStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PrismarineWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState PrismarineWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14484;
								else if (West == West::Low) return 14485;
								else return 14486;
							else
								if (West == West::None) return 14487;
								else if (West == West::Low) return 14488;
								else return 14489;
						else
							if (Waterlogged)
								if (West == West::None) return 14490;
								else if (West == West::Low) return 14491;
								else return 14492;
							else
								if (West == West::None) return 14493;
								else if (West == West::Low) return 14494;
								else return 14495;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14496;
								else if (West == West::Low) return 14497;
								else return 14498;
							else
								if (West == West::None) return 14499;
								else if (West == West::Low) return 14500;
								else return 14501;
						else
							if (Waterlogged)
								if (West == West::None) return 14502;
								else if (West == West::Low) return 14503;
								else return 14504;
							else
								if (West == West::None) return 14505;
								else if (West == West::Low) return 14506;
								else return 14507;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14508;
								else if (West == West::Low) return 14509;
								else return 14510;
							else
								if (West == West::None) return 14511;
								else if (West == West::Low) return 14512;
								else return 14513;
						else
							if (Waterlogged)
								if (West == West::None) return 14514;
								else if (West == West::Low) return 14515;
								else return 14516;
							else
								if (West == West::None) return 14517;
								else if (West == West::Low) return 14518;
								else return 14519;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14520;
								else if (West == West::Low) return 14521;
								else return 14522;
							else
								if (West == West::None) return 14523;
								else if (West == West::Low) return 14524;
								else return 14525;
						else
							if (Waterlogged)
								if (West == West::None) return 14526;
								else if (West == West::Low) return 14527;
								else return 14528;
							else
								if (West == West::None) return 14529;
								else if (West == West::Low) return 14530;
								else return 14531;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14532;
								else if (West == West::Low) return 14533;
								else return 14534;
							else
								if (West == West::None) return 14535;
								else if (West == West::Low) return 14536;
								else return 14537;
						else
							if (Waterlogged)
								if (West == West::None) return 14538;
								else if (West == West::Low) return 14539;
								else return 14540;
							else
								if (West == West::None) return 14541;
								else if (West == West::Low) return 14542;
								else return 14543;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14544;
								else if (West == West::Low) return 14545;
								else return 14546;
							else
								if (West == West::None) return 14547;
								else if (West == West::Low) return 14548;
								else return 14549;
						else
							if (Waterlogged)
								if (West == West::None) return 14550;
								else if (West == West::Low) return 14551;
								else return 14552;
							else
								if (West == West::None) return 14553;
								else if (West == West::Low) return 14554;
								else return 14555;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14556;
								else if (West == West::Low) return 14557;
								else return 14558;
							else
								if (West == West::None) return 14559;
								else if (West == West::Low) return 14560;
								else return 14561;
						else
							if (Waterlogged)
								if (West == West::None) return 14562;
								else if (West == West::Low) return 14563;
								else return 14564;
							else
								if (West == West::None) return 14565;
								else if (West == West::Low) return 14566;
								else return 14567;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14568;
								else if (West == West::Low) return 14569;
								else return 14570;
							else
								if (West == West::None) return 14571;
								else if (West == West::Low) return 14572;
								else return 14573;
						else
							if (Waterlogged)
								if (West == West::None) return 14574;
								else if (West == West::Low) return 14575;
								else return 14576;
							else
								if (West == West::None) return 14577;
								else if (West == West::Low) return 14578;
								else return 14579;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14580;
								else if (West == West::Low) return 14581;
								else return 14582;
							else
								if (West == West::None) return 14583;
								else if (West == West::Low) return 14584;
								else return 14585;
						else
							if (Waterlogged)
								if (West == West::None) return 14586;
								else if (West == West::Low) return 14587;
								else return 14588;
							else
								if (West == West::None) return 14589;
								else if (West == West::Low) return 14590;
								else return 14591;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14592;
								else if (West == West::Low) return 14593;
								else return 14594;
							else
								if (West == West::None) return 14595;
								else if (West == West::Low) return 14596;
								else return 14597;
						else
							if (Waterlogged)
								if (West == West::None) return 14598;
								else if (West == West::Low) return 14599;
								else return 14600;
							else
								if (West == West::None) return 14601;
								else if (West == West::Low) return 14602;
								else return 14603;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14604;
								else if (West == West::Low) return 14605;
								else return 14606;
							else
								if (West == West::None) return 14607;
								else if (West == West::Low) return 14608;
								else return 14609;
						else
							if (Waterlogged)
								if (West == West::None) return 14610;
								else if (West == West::Low) return 14611;
								else return 14612;
							else
								if (West == West::None) return 14613;
								else if (West == West::Low) return 14614;
								else return 14615;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14616;
								else if (West == West::Low) return 14617;
								else return 14618;
							else
								if (West == West::None) return 14619;
								else if (West == West::Low) return 14620;
								else return 14621;
						else
							if (Waterlogged)
								if (West == West::None) return 14622;
								else if (West == West::Low) return 14623;
								else return 14624;
							else
								if (West == West::None) return 14625;
								else if (West == West::Low) return 14626;
								else return 14627;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14628;
								else if (West == West::Low) return 14629;
								else return 14630;
							else
								if (West == West::None) return 14631;
								else if (West == West::Low) return 14632;
								else return 14633;
						else
							if (Waterlogged)
								if (West == West::None) return 14634;
								else if (West == West::Low) return 14635;
								else return 14636;
							else
								if (West == West::None) return 14637;
								else if (West == West::Low) return 14638;
								else return 14639;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14640;
								else if (West == West::Low) return 14641;
								else return 14642;
							else
								if (West == West::None) return 14643;
								else if (West == West::Low) return 14644;
								else return 14645;
						else
							if (Waterlogged)
								if (West == West::None) return 14646;
								else if (West == West::Low) return 14647;
								else return 14648;
							else
								if (West == West::None) return 14649;
								else if (West == West::Low) return 14650;
								else return 14651;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14652;
								else if (West == West::Low) return 14653;
								else return 14654;
							else
								if (West == West::None) return 14655;
								else if (West == West::Low) return 14656;
								else return 14657;
						else
							if (Waterlogged)
								if (West == West::None) return 14658;
								else if (West == West::Low) return 14659;
								else return 14660;
							else
								if (West == West::None) return 14661;
								else if (West == West::Low) return 14662;
								else return 14663;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14664;
								else if (West == West::Low) return 14665;
								else return 14666;
							else
								if (West == West::None) return 14667;
								else if (West == West::Low) return 14668;
								else return 14669;
						else
							if (Waterlogged)
								if (West == West::None) return 14670;
								else if (West == West::Low) return 14671;
								else return 14672;
							else
								if (West == West::None) return 14673;
								else if (West == West::Low) return 14674;
								else return 14675;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14676;
								else if (West == West::Low) return 14677;
								else return 14678;
							else
								if (West == West::None) return 14679;
								else if (West == West::Low) return 14680;
								else return 14681;
						else
							if (Waterlogged)
								if (West == West::None) return 14682;
								else if (West == West::Low) return 14683;
								else return 14684;
							else
								if (West == West::None) return 14685;
								else if (West == West::Low) return 14686;
								else return 14687;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14688;
								else if (West == West::Low) return 14689;
								else return 14690;
							else
								if (West == West::None) return 14691;
								else if (West == West::Low) return 14692;
								else return 14693;
						else
							if (Waterlogged)
								if (West == West::None) return 14694;
								else if (West == West::Low) return 14695;
								else return 14696;
							else
								if (West == West::None) return 14697;
								else if (West == West::Low) return 14698;
								else return 14699;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14700;
								else if (West == West::Low) return 14701;
								else return 14702;
							else
								if (West == West::None) return 14703;
								else if (West == West::Low) return 14704;
								else return 14705;
						else
							if (Waterlogged)
								if (West == West::None) return 14706;
								else if (West == West::Low) return 14707;
								else return 14708;
							else
								if (West == West::None) return 14709;
								else if (West == West::Low) return 14710;
								else return 14711;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14712;
								else if (West == West::Low) return 14713;
								else return 14714;
							else
								if (West == West::None) return 14715;
								else if (West == West::Low) return 14716;
								else return 14717;
						else
							if (Waterlogged)
								if (West == West::None) return 14718;
								else if (West == West::Low) return 14719;
								else return 14720;
							else
								if (West == West::None) return 14721;
								else if (West == West::Low) return 14722;
								else return 14723;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14724;
								else if (West == West::Low) return 14725;
								else return 14726;
							else
								if (West == West::None) return 14727;
								else if (West == West::Low) return 14728;
								else return 14729;
						else
							if (Waterlogged)
								if (West == West::None) return 14730;
								else if (West == West::Low) return 14731;
								else return 14732;
							else
								if (West == West::None) return 14733;
								else if (West == West::Low) return 14734;
								else return 14735;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14736;
								else if (West == West::Low) return 14737;
								else return 14738;
							else
								if (West == West::None) return 14739;
								else if (West == West::Low) return 14740;
								else return 14741;
						else
							if (Waterlogged)
								if (West == West::None) return 14742;
								else if (West == West::Low) return 14743;
								else return 14744;
							else
								if (West == West::None) return 14745;
								else if (West == West::Low) return 14746;
								else return 14747;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14748;
								else if (West == West::Low) return 14749;
								else return 14750;
							else
								if (West == West::None) return 14751;
								else if (West == West::Low) return 14752;
								else return 14753;
						else
							if (Waterlogged)
								if (West == West::None) return 14754;
								else if (West == West::Low) return 14755;
								else return 14756;
							else
								if (West == West::None) return 14757;
								else if (West == West::Low) return 14758;
								else return 14759;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14760;
								else if (West == West::Low) return 14761;
								else return 14762;
							else
								if (West == West::None) return 14763;
								else if (West == West::Low) return 14764;
								else return 14765;
						else
							if (Waterlogged)
								if (West == West::None) return 14766;
								else if (West == West::Low) return 14767;
								else return 14768;
							else
								if (West == West::None) return 14769;
								else if (West == West::Low) return 14770;
								else return 14771;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14772;
								else if (West == West::Low) return 14773;
								else return 14774;
							else
								if (West == West::None) return 14775;
								else if (West == West::Low) return 14776;
								else return 14777;
						else
							if (Waterlogged)
								if (West == West::None) return 14778;
								else if (West == West::Low) return 14779;
								else return 14780;
							else
								if (West == West::None) return 14781;
								else if (West == West::Low) return 14782;
								else return 14783;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14784;
								else if (West == West::Low) return 14785;
								else return 14786;
							else
								if (West == West::None) return 14787;
								else if (West == West::Low) return 14788;
								else return 14789;
						else
							if (Waterlogged)
								if (West == West::None) return 14790;
								else if (West == West::Low) return 14791;
								else return 14792;
							else
								if (West == West::None) return 14793;
								else if (West == West::Low) return 14794;
								else return 14795;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14796;
								else if (West == West::Low) return 14797;
								else return 14798;
							else
								if (West == West::None) return 14799;
								else if (West == West::Low) return 14800;
								else return 14801;
						else
							if (Waterlogged)
								if (West == West::None) return 14802;
								else if (West == West::Low) return 14803;
								else return 14804;
							else
								if (West == West::None) return 14805;
								else if (West == West::Low) return 14806;
								else return 14807;
		}
		BlockState PrismarineWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Pumpkin
	{
		constexpr BlockState Pumpkin()
		{
			return 6811;
		}
	}
	namespace PumpkinStem
	{
		constexpr BlockState PumpkinStem(const int Age)
		{
			if (Age == 0) return 6821;
			else if (Age == 1) return 6822;
			else if (Age == 2) return 6823;
			else if (Age == 3) return 6824;
			else if (Age == 4) return 6825;
			else if (Age == 5) return 6826;
			else if (Age == 6) return 6827;
			else return 6828;
		}
		BlockState PumpkinStem();
		int Age(BlockState Block);
	}
	namespace PurpleBanner
	{
		constexpr BlockState PurpleBanner(const int Rotation)
		{
			if (Rotation == 0) return 10919;
			else if (Rotation == 1) return 10920;
			else if (Rotation == 2) return 10921;
			else if (Rotation == 3) return 10922;
			else if (Rotation == 4) return 10923;
			else if (Rotation == 5) return 10924;
			else if (Rotation == 6) return 10925;
			else if (Rotation == 7) return 10926;
			else if (Rotation == 8) return 10927;
			else if (Rotation == 9) return 10928;
			else if (Rotation == 10) return 10929;
			else if (Rotation == 11) return 10930;
			else if (Rotation == 12) return 10931;
			else if (Rotation == 13) return 10932;
			else if (Rotation == 14) return 10933;
			else return 10934;
		}
		BlockState PurpleBanner();
		int Rotation(BlockState Block);
	}
	namespace PurpleBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState PurpleBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1848;
					else return 1849;
				else
					if (Part == Part::Head) return 1850;
					else return 1851;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1852;
					else return 1853;
				else
					if (Part == Part::Head) return 1854;
					else return 1855;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1856;
					else return 1857;
				else
					if (Part == Part::Head) return 1858;
					else return 1859;
			else
				if (Occupied)
					if (Part == Part::Head) return 1860;
					else return 1861;
				else
					if (Part == Part::Head) return 1862;
					else return 1863;
		}
		BlockState PurpleBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace PurpleCandle
	{
		constexpr BlockState PurpleCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20901;
					else return 20902;
				else
					if (Waterlogged) return 20903;
					else return 20904;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20905;
					else return 20906;
				else
					if (Waterlogged) return 20907;
					else return 20908;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20909;
					else return 20910;
				else
					if (Waterlogged) return 20911;
					else return 20912;
			else
				if (Lit)
					if (Waterlogged) return 20913;
					else return 20914;
				else
					if (Waterlogged) return 20915;
					else return 20916;
		}
		BlockState PurpleCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PurpleCandleCake
	{
		constexpr BlockState PurpleCandleCake(const bool Lit)
		{
			if (Lit) return 21019;
			else return 21020;
		}
		BlockState PurpleCandleCake();
		bool Lit(BlockState Block);
	}
	namespace PurpleCarpet
	{
		constexpr BlockState PurpleCarpet()
		{
			return 10738;
		}
	}
	namespace PurpleConcrete
	{
		constexpr BlockState PurpleConcrete()
		{
			return 12738;
		}
	}
	namespace PurpleConcretePowder
	{
		constexpr BlockState PurpleConcretePowder()
		{
			return 12754;
		}
	}
	namespace PurpleGlazedTerracotta
	{
		constexpr BlockState PurpleGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12704;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12705;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12706;
			else return 12707;
		}
		BlockState PurpleGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleShulkerBox
	{
		constexpr BlockState PurpleShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12628;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12629;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12630;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12631;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12632;
			else return 12633;
		}
		BlockState PurpleShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleStainedGlass
	{
		constexpr BlockState PurpleStainedGlass()
		{
			return 5955;
		}
	}
	namespace PurpleStainedGlassPane
	{
		constexpr BlockState PurpleStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9692;
							else return 9693;
						else
							if (West) return 9694;
							else return 9695;
					else
						if (Waterlogged)
							if (West) return 9696;
							else return 9697;
						else
							if (West) return 9698;
							else return 9699;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9700;
							else return 9701;
						else
							if (West) return 9702;
							else return 9703;
					else
						if (Waterlogged)
							if (West) return 9704;
							else return 9705;
						else
							if (West) return 9706;
							else return 9707;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9708;
							else return 9709;
						else
							if (West) return 9710;
							else return 9711;
					else
						if (Waterlogged)
							if (West) return 9712;
							else return 9713;
						else
							if (West) return 9714;
							else return 9715;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9716;
							else return 9717;
						else
							if (West) return 9718;
							else return 9719;
					else
						if (Waterlogged)
							if (West) return 9720;
							else return 9721;
						else
							if (West) return 9722;
							else return 9723;
		}
		BlockState PurpleStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace PurpleTerracotta
	{
		constexpr BlockState PurpleTerracotta()
		{
			return 9366;
		}
	}
	namespace PurpleWallBanner
	{
		constexpr BlockState PurpleWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11055;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11056;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11057;
			else return 11058;
		}
		BlockState PurpleWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace PurpleWool
	{
		constexpr BlockState PurpleWool()
		{
			return 2057;
		}
	}
	namespace PurpurBlock
	{
		constexpr BlockState PurpurBlock()
		{
			return 12410;
		}
	}
	namespace PurpurPillar
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState PurpurPillar(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 12411;
			else if (Axis == Axis::Y) return 12412;
			else return 12413;
		}
		BlockState PurpurPillar();
		enum Axis Axis(BlockState Block);
	}
	namespace PurpurSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState PurpurSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11300;
				else return 11301;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11302;
				else return 11303;
			else
				if (Waterlogged) return 11304;
				else return 11305;
		}
		BlockState PurpurSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace PurpurStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState PurpurStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12414;
						else return 12415;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12416;
						else return 12417;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12418;
						else return 12419;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12420;
						else return 12421;
					else
						if (Waterlogged) return 12422;
						else return 12423;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12424;
						else return 12425;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12426;
						else return 12427;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12428;
						else return 12429;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12430;
						else return 12431;
					else
						if (Waterlogged) return 12432;
						else return 12433;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12434;
						else return 12435;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12436;
						else return 12437;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12438;
						else return 12439;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12440;
						else return 12441;
					else
						if (Waterlogged) return 12442;
						else return 12443;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12444;
						else return 12445;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12446;
						else return 12447;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12448;
						else return 12449;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12450;
						else return 12451;
					else
						if (Waterlogged) return 12452;
						else return 12453;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12454;
						else return 12455;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12456;
						else return 12457;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12458;
						else return 12459;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12460;
						else return 12461;
					else
						if (Waterlogged) return 12462;
						else return 12463;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12464;
						else return 12465;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12466;
						else return 12467;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12468;
						else return 12469;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12470;
						else return 12471;
					else
						if (Waterlogged) return 12472;
						else return 12473;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12474;
						else return 12475;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12476;
						else return 12477;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12478;
						else return 12479;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12480;
						else return 12481;
					else
						if (Waterlogged) return 12482;
						else return 12483;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 12484;
						else return 12485;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 12486;
						else return 12487;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 12488;
						else return 12489;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 12490;
						else return 12491;
					else
						if (Waterlogged) return 12492;
						else return 12493;
		}
		BlockState PurpurStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace QuartzBlock
	{
		constexpr BlockState QuartzBlock()
		{
			return 9235;
		}
	}
	namespace QuartzBricks
	{
		constexpr BlockState QuartzBricks()
		{
			return 20724;
		}
	}
	namespace QuartzPillar
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState QuartzPillar(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 9237;
			else if (Axis == Axis::Y) return 9238;
			else return 9239;
		}
		BlockState QuartzPillar();
		enum Axis Axis(BlockState Block);
	}
	namespace QuartzSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState QuartzSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11282;
				else return 11283;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11284;
				else return 11285;
			else
				if (Waterlogged) return 11286;
				else return 11287;
		}
		BlockState QuartzSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace QuartzStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState QuartzStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9240;
						else return 9241;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9242;
						else return 9243;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9244;
						else return 9245;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9246;
						else return 9247;
					else
						if (Waterlogged) return 9248;
						else return 9249;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9250;
						else return 9251;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9252;
						else return 9253;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9254;
						else return 9255;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9256;
						else return 9257;
					else
						if (Waterlogged) return 9258;
						else return 9259;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9260;
						else return 9261;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9262;
						else return 9263;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9264;
						else return 9265;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9266;
						else return 9267;
					else
						if (Waterlogged) return 9268;
						else return 9269;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9270;
						else return 9271;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9272;
						else return 9273;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9274;
						else return 9275;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9276;
						else return 9277;
					else
						if (Waterlogged) return 9278;
						else return 9279;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9280;
						else return 9281;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9282;
						else return 9283;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9284;
						else return 9285;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9286;
						else return 9287;
					else
						if (Waterlogged) return 9288;
						else return 9289;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9290;
						else return 9291;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9292;
						else return 9293;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9294;
						else return 9295;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9296;
						else return 9297;
					else
						if (Waterlogged) return 9298;
						else return 9299;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9300;
						else return 9301;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9302;
						else return 9303;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9304;
						else return 9305;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9306;
						else return 9307;
					else
						if (Waterlogged) return 9308;
						else return 9309;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 9310;
						else return 9311;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 9312;
						else return 9313;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 9314;
						else return 9315;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 9316;
						else return 9317;
					else
						if (Waterlogged) return 9318;
						else return 9319;
		}
		BlockState QuartzStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Rail
	{
		enum class Shape
		{
			NorthSouth,
			EastWest,
			AscendingEast,
			AscendingWest,
			AscendingNorth,
			AscendingSouth,
			SouthEast,
			SouthWest,
			NorthWest,
			NorthEast,
		};
		constexpr BlockState Rail(const enum Shape Shape, const bool Waterlogged)
		{
			if (Shape == Shape::NorthSouth)
				if (Waterlogged) return 4662;
				else return 4663;
			else if (Shape == Shape::EastWest)
				if (Waterlogged) return 4664;
				else return 4665;
			else if (Shape == Shape::AscendingEast)
				if (Waterlogged) return 4666;
				else return 4667;
			else if (Shape == Shape::AscendingWest)
				if (Waterlogged) return 4668;
				else return 4669;
			else if (Shape == Shape::AscendingNorth)
				if (Waterlogged) return 4670;
				else return 4671;
			else if (Shape == Shape::AscendingSouth)
				if (Waterlogged) return 4672;
				else return 4673;
			else if (Shape == Shape::SouthEast)
				if (Waterlogged) return 4674;
				else return 4675;
			else if (Shape == Shape::SouthWest)
				if (Waterlogged) return 4676;
				else return 4677;
			else if (Shape == Shape::NorthWest)
				if (Waterlogged) return 4678;
				else return 4679;
			else
				if (Waterlogged) return 4680;
				else return 4681;
		}
		BlockState Rail();
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RawCopperBlock
	{
		constexpr BlockState RawCopperBlock()
		{
			return 26559;
		}
	}
	namespace RawGoldBlock
	{
		constexpr BlockState RawGoldBlock()
		{
			return 26560;
		}
	}
	namespace RawIronBlock
	{
		constexpr BlockState RawIronBlock()
		{
			return 26558;
		}
	}
	namespace RedBanner
	{
		constexpr BlockState RedBanner(const int Rotation)
		{
			if (Rotation == 0) return 10983;
			else if (Rotation == 1) return 10984;
			else if (Rotation == 2) return 10985;
			else if (Rotation == 3) return 10986;
			else if (Rotation == 4) return 10987;
			else if (Rotation == 5) return 10988;
			else if (Rotation == 6) return 10989;
			else if (Rotation == 7) return 10990;
			else if (Rotation == 8) return 10991;
			else if (Rotation == 9) return 10992;
			else if (Rotation == 10) return 10993;
			else if (Rotation == 11) return 10994;
			else if (Rotation == 12) return 10995;
			else if (Rotation == 13) return 10996;
			else if (Rotation == 14) return 10997;
			else return 10998;
		}
		BlockState RedBanner();
		int Rotation(BlockState Block);
	}
	namespace RedBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState RedBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1912;
					else return 1913;
				else
					if (Part == Part::Head) return 1914;
					else return 1915;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1916;
					else return 1917;
				else
					if (Part == Part::Head) return 1918;
					else return 1919;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1920;
					else return 1921;
				else
					if (Part == Part::Head) return 1922;
					else return 1923;
			else
				if (Occupied)
					if (Part == Part::Head) return 1924;
					else return 1925;
				else
					if (Part == Part::Head) return 1926;
					else return 1927;
		}
		BlockState RedBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace RedCandle
	{
		constexpr BlockState RedCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20965;
					else return 20966;
				else
					if (Waterlogged) return 20967;
					else return 20968;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20969;
					else return 20970;
				else
					if (Waterlogged) return 20971;
					else return 20972;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20973;
					else return 20974;
				else
					if (Waterlogged) return 20975;
					else return 20976;
			else
				if (Lit)
					if (Waterlogged) return 20977;
					else return 20978;
				else
					if (Waterlogged) return 20979;
					else return 20980;
		}
		BlockState RedCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedCandleCake
	{
		constexpr BlockState RedCandleCake(const bool Lit)
		{
			if (Lit) return 21027;
			else return 21028;
		}
		BlockState RedCandleCake();
		bool Lit(BlockState Block);
	}
	namespace RedCarpet
	{
		constexpr BlockState RedCarpet()
		{
			return 10742;
		}
	}
	namespace RedConcrete
	{
		constexpr BlockState RedConcrete()
		{
			return 12742;
		}
	}
	namespace RedConcretePowder
	{
		constexpr BlockState RedConcretePowder()
		{
			return 12758;
		}
	}
	namespace RedGlazedTerracotta
	{
		constexpr BlockState RedGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12720;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12721;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12722;
			else return 12723;
		}
		BlockState RedGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedMushroom
	{
		constexpr BlockState RedMushroom()
		{
			return 2090;
		}
	}
	namespace RedMushroomBlock
	{
		constexpr BlockState RedMushroomBlock(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6613;
								else return 6614;
							else
								if (West) return 6615;
								else return 6616;
						else
							if (Up)
								if (West) return 6617;
								else return 6618;
							else
								if (West) return 6619;
								else return 6620;
					else
						if (South)
							if (Up)
								if (West) return 6621;
								else return 6622;
							else
								if (West) return 6623;
								else return 6624;
						else
							if (Up)
								if (West) return 6625;
								else return 6626;
							else
								if (West) return 6627;
								else return 6628;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6629;
								else return 6630;
							else
								if (West) return 6631;
								else return 6632;
						else
							if (Up)
								if (West) return 6633;
								else return 6634;
							else
								if (West) return 6635;
								else return 6636;
					else
						if (South)
							if (Up)
								if (West) return 6637;
								else return 6638;
							else
								if (West) return 6639;
								else return 6640;
						else
							if (Up)
								if (West) return 6641;
								else return 6642;
							else
								if (West) return 6643;
								else return 6644;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (West) return 6645;
								else return 6646;
							else
								if (West) return 6647;
								else return 6648;
						else
							if (Up)
								if (West) return 6649;
								else return 6650;
							else
								if (West) return 6651;
								else return 6652;
					else
						if (South)
							if (Up)
								if (West) return 6653;
								else return 6654;
							else
								if (West) return 6655;
								else return 6656;
						else
							if (Up)
								if (West) return 6657;
								else return 6658;
							else
								if (West) return 6659;
								else return 6660;
				else
					if (North)
						if (South)
							if (Up)
								if (West) return 6661;
								else return 6662;
							else
								if (West) return 6663;
								else return 6664;
						else
							if (Up)
								if (West) return 6665;
								else return 6666;
							else
								if (West) return 6667;
								else return 6668;
					else
						if (South)
							if (Up)
								if (West) return 6669;
								else return 6670;
							else
								if (West) return 6671;
								else return 6672;
						else
							if (Up)
								if (West) return 6673;
								else return 6674;
							else
								if (West) return 6675;
								else return 6676;
		}
		BlockState RedMushroomBlock();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace RedNetherBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState RedNetherBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14142;
				else return 14143;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14144;
				else return 14145;
			else
				if (Waterlogged) return 14146;
				else return 14147;
		}
		BlockState RedNetherBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedNetherBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState RedNetherBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13842;
						else return 13843;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13844;
						else return 13845;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13846;
						else return 13847;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13848;
						else return 13849;
					else
						if (Waterlogged) return 13850;
						else return 13851;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13852;
						else return 13853;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13854;
						else return 13855;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13856;
						else return 13857;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13858;
						else return 13859;
					else
						if (Waterlogged) return 13860;
						else return 13861;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13862;
						else return 13863;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13864;
						else return 13865;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13866;
						else return 13867;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13868;
						else return 13869;
					else
						if (Waterlogged) return 13870;
						else return 13871;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13872;
						else return 13873;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13874;
						else return 13875;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13876;
						else return 13877;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13878;
						else return 13879;
					else
						if (Waterlogged) return 13880;
						else return 13881;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13882;
						else return 13883;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13884;
						else return 13885;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13886;
						else return 13887;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13888;
						else return 13889;
					else
						if (Waterlogged) return 13890;
						else return 13891;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13892;
						else return 13893;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13894;
						else return 13895;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13896;
						else return 13897;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13898;
						else return 13899;
					else
						if (Waterlogged) return 13900;
						else return 13901;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13902;
						else return 13903;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13904;
						else return 13905;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13906;
						else return 13907;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13908;
						else return 13909;
					else
						if (Waterlogged) return 13910;
						else return 13911;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13912;
						else return 13913;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13914;
						else return 13915;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13916;
						else return 13917;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13918;
						else return 13919;
					else
						if (Waterlogged) return 13920;
						else return 13921;
		}
		BlockState RedNetherBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedNetherBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState RedNetherBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17076;
								else if (West == West::Low) return 17077;
								else return 17078;
							else
								if (West == West::None) return 17079;
								else if (West == West::Low) return 17080;
								else return 17081;
						else
							if (Waterlogged)
								if (West == West::None) return 17082;
								else if (West == West::Low) return 17083;
								else return 17084;
							else
								if (West == West::None) return 17085;
								else if (West == West::Low) return 17086;
								else return 17087;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17088;
								else if (West == West::Low) return 17089;
								else return 17090;
							else
								if (West == West::None) return 17091;
								else if (West == West::Low) return 17092;
								else return 17093;
						else
							if (Waterlogged)
								if (West == West::None) return 17094;
								else if (West == West::Low) return 17095;
								else return 17096;
							else
								if (West == West::None) return 17097;
								else if (West == West::Low) return 17098;
								else return 17099;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17100;
								else if (West == West::Low) return 17101;
								else return 17102;
							else
								if (West == West::None) return 17103;
								else if (West == West::Low) return 17104;
								else return 17105;
						else
							if (Waterlogged)
								if (West == West::None) return 17106;
								else if (West == West::Low) return 17107;
								else return 17108;
							else
								if (West == West::None) return 17109;
								else if (West == West::Low) return 17110;
								else return 17111;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17112;
								else if (West == West::Low) return 17113;
								else return 17114;
							else
								if (West == West::None) return 17115;
								else if (West == West::Low) return 17116;
								else return 17117;
						else
							if (Waterlogged)
								if (West == West::None) return 17118;
								else if (West == West::Low) return 17119;
								else return 17120;
							else
								if (West == West::None) return 17121;
								else if (West == West::Low) return 17122;
								else return 17123;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17124;
								else if (West == West::Low) return 17125;
								else return 17126;
							else
								if (West == West::None) return 17127;
								else if (West == West::Low) return 17128;
								else return 17129;
						else
							if (Waterlogged)
								if (West == West::None) return 17130;
								else if (West == West::Low) return 17131;
								else return 17132;
							else
								if (West == West::None) return 17133;
								else if (West == West::Low) return 17134;
								else return 17135;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17136;
								else if (West == West::Low) return 17137;
								else return 17138;
							else
								if (West == West::None) return 17139;
								else if (West == West::Low) return 17140;
								else return 17141;
						else
							if (Waterlogged)
								if (West == West::None) return 17142;
								else if (West == West::Low) return 17143;
								else return 17144;
							else
								if (West == West::None) return 17145;
								else if (West == West::Low) return 17146;
								else return 17147;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17148;
								else if (West == West::Low) return 17149;
								else return 17150;
							else
								if (West == West::None) return 17151;
								else if (West == West::Low) return 17152;
								else return 17153;
						else
							if (Waterlogged)
								if (West == West::None) return 17154;
								else if (West == West::Low) return 17155;
								else return 17156;
							else
								if (West == West::None) return 17157;
								else if (West == West::Low) return 17158;
								else return 17159;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17160;
								else if (West == West::Low) return 17161;
								else return 17162;
							else
								if (West == West::None) return 17163;
								else if (West == West::Low) return 17164;
								else return 17165;
						else
							if (Waterlogged)
								if (West == West::None) return 17166;
								else if (West == West::Low) return 17167;
								else return 17168;
							else
								if (West == West::None) return 17169;
								else if (West == West::Low) return 17170;
								else return 17171;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17172;
								else if (West == West::Low) return 17173;
								else return 17174;
							else
								if (West == West::None) return 17175;
								else if (West == West::Low) return 17176;
								else return 17177;
						else
							if (Waterlogged)
								if (West == West::None) return 17178;
								else if (West == West::Low) return 17179;
								else return 17180;
							else
								if (West == West::None) return 17181;
								else if (West == West::Low) return 17182;
								else return 17183;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17184;
								else if (West == West::Low) return 17185;
								else return 17186;
							else
								if (West == West::None) return 17187;
								else if (West == West::Low) return 17188;
								else return 17189;
						else
							if (Waterlogged)
								if (West == West::None) return 17190;
								else if (West == West::Low) return 17191;
								else return 17192;
							else
								if (West == West::None) return 17193;
								else if (West == West::Low) return 17194;
								else return 17195;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17196;
								else if (West == West::Low) return 17197;
								else return 17198;
							else
								if (West == West::None) return 17199;
								else if (West == West::Low) return 17200;
								else return 17201;
						else
							if (Waterlogged)
								if (West == West::None) return 17202;
								else if (West == West::Low) return 17203;
								else return 17204;
							else
								if (West == West::None) return 17205;
								else if (West == West::Low) return 17206;
								else return 17207;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17208;
								else if (West == West::Low) return 17209;
								else return 17210;
							else
								if (West == West::None) return 17211;
								else if (West == West::Low) return 17212;
								else return 17213;
						else
							if (Waterlogged)
								if (West == West::None) return 17214;
								else if (West == West::Low) return 17215;
								else return 17216;
							else
								if (West == West::None) return 17217;
								else if (West == West::Low) return 17218;
								else return 17219;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17220;
								else if (West == West::Low) return 17221;
								else return 17222;
							else
								if (West == West::None) return 17223;
								else if (West == West::Low) return 17224;
								else return 17225;
						else
							if (Waterlogged)
								if (West == West::None) return 17226;
								else if (West == West::Low) return 17227;
								else return 17228;
							else
								if (West == West::None) return 17229;
								else if (West == West::Low) return 17230;
								else return 17231;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17232;
								else if (West == West::Low) return 17233;
								else return 17234;
							else
								if (West == West::None) return 17235;
								else if (West == West::Low) return 17236;
								else return 17237;
						else
							if (Waterlogged)
								if (West == West::None) return 17238;
								else if (West == West::Low) return 17239;
								else return 17240;
							else
								if (West == West::None) return 17241;
								else if (West == West::Low) return 17242;
								else return 17243;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17244;
								else if (West == West::Low) return 17245;
								else return 17246;
							else
								if (West == West::None) return 17247;
								else if (West == West::Low) return 17248;
								else return 17249;
						else
							if (Waterlogged)
								if (West == West::None) return 17250;
								else if (West == West::Low) return 17251;
								else return 17252;
							else
								if (West == West::None) return 17253;
								else if (West == West::Low) return 17254;
								else return 17255;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17256;
								else if (West == West::Low) return 17257;
								else return 17258;
							else
								if (West == West::None) return 17259;
								else if (West == West::Low) return 17260;
								else return 17261;
						else
							if (Waterlogged)
								if (West == West::None) return 17262;
								else if (West == West::Low) return 17263;
								else return 17264;
							else
								if (West == West::None) return 17265;
								else if (West == West::Low) return 17266;
								else return 17267;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17268;
								else if (West == West::Low) return 17269;
								else return 17270;
							else
								if (West == West::None) return 17271;
								else if (West == West::Low) return 17272;
								else return 17273;
						else
							if (Waterlogged)
								if (West == West::None) return 17274;
								else if (West == West::Low) return 17275;
								else return 17276;
							else
								if (West == West::None) return 17277;
								else if (West == West::Low) return 17278;
								else return 17279;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17280;
								else if (West == West::Low) return 17281;
								else return 17282;
							else
								if (West == West::None) return 17283;
								else if (West == West::Low) return 17284;
								else return 17285;
						else
							if (Waterlogged)
								if (West == West::None) return 17286;
								else if (West == West::Low) return 17287;
								else return 17288;
							else
								if (West == West::None) return 17289;
								else if (West == West::Low) return 17290;
								else return 17291;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17292;
								else if (West == West::Low) return 17293;
								else return 17294;
							else
								if (West == West::None) return 17295;
								else if (West == West::Low) return 17296;
								else return 17297;
						else
							if (Waterlogged)
								if (West == West::None) return 17298;
								else if (West == West::Low) return 17299;
								else return 17300;
							else
								if (West == West::None) return 17301;
								else if (West == West::Low) return 17302;
								else return 17303;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17304;
								else if (West == West::Low) return 17305;
								else return 17306;
							else
								if (West == West::None) return 17307;
								else if (West == West::Low) return 17308;
								else return 17309;
						else
							if (Waterlogged)
								if (West == West::None) return 17310;
								else if (West == West::Low) return 17311;
								else return 17312;
							else
								if (West == West::None) return 17313;
								else if (West == West::Low) return 17314;
								else return 17315;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17316;
								else if (West == West::Low) return 17317;
								else return 17318;
							else
								if (West == West::None) return 17319;
								else if (West == West::Low) return 17320;
								else return 17321;
						else
							if (Waterlogged)
								if (West == West::None) return 17322;
								else if (West == West::Low) return 17323;
								else return 17324;
							else
								if (West == West::None) return 17325;
								else if (West == West::Low) return 17326;
								else return 17327;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17328;
								else if (West == West::Low) return 17329;
								else return 17330;
							else
								if (West == West::None) return 17331;
								else if (West == West::Low) return 17332;
								else return 17333;
						else
							if (Waterlogged)
								if (West == West::None) return 17334;
								else if (West == West::Low) return 17335;
								else return 17336;
							else
								if (West == West::None) return 17337;
								else if (West == West::Low) return 17338;
								else return 17339;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17340;
								else if (West == West::Low) return 17341;
								else return 17342;
							else
								if (West == West::None) return 17343;
								else if (West == West::Low) return 17344;
								else return 17345;
						else
							if (Waterlogged)
								if (West == West::None) return 17346;
								else if (West == West::Low) return 17347;
								else return 17348;
							else
								if (West == West::None) return 17349;
								else if (West == West::Low) return 17350;
								else return 17351;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17352;
								else if (West == West::Low) return 17353;
								else return 17354;
							else
								if (West == West::None) return 17355;
								else if (West == West::Low) return 17356;
								else return 17357;
						else
							if (Waterlogged)
								if (West == West::None) return 17358;
								else if (West == West::Low) return 17359;
								else return 17360;
							else
								if (West == West::None) return 17361;
								else if (West == West::Low) return 17362;
								else return 17363;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17364;
								else if (West == West::Low) return 17365;
								else return 17366;
							else
								if (West == West::None) return 17367;
								else if (West == West::Low) return 17368;
								else return 17369;
						else
							if (Waterlogged)
								if (West == West::None) return 17370;
								else if (West == West::Low) return 17371;
								else return 17372;
							else
								if (West == West::None) return 17373;
								else if (West == West::Low) return 17374;
								else return 17375;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17376;
								else if (West == West::Low) return 17377;
								else return 17378;
							else
								if (West == West::None) return 17379;
								else if (West == West::Low) return 17380;
								else return 17381;
						else
							if (Waterlogged)
								if (West == West::None) return 17382;
								else if (West == West::Low) return 17383;
								else return 17384;
							else
								if (West == West::None) return 17385;
								else if (West == West::Low) return 17386;
								else return 17387;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17388;
								else if (West == West::Low) return 17389;
								else return 17390;
							else
								if (West == West::None) return 17391;
								else if (West == West::Low) return 17392;
								else return 17393;
						else
							if (Waterlogged)
								if (West == West::None) return 17394;
								else if (West == West::Low) return 17395;
								else return 17396;
							else
								if (West == West::None) return 17397;
								else if (West == West::Low) return 17398;
								else return 17399;
		}
		BlockState RedNetherBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace RedNetherBricks
	{
		constexpr BlockState RedNetherBricks()
		{
			return 12545;
		}
	}
	namespace RedSand
	{
		constexpr BlockState RedSand()
		{
			return 117;
		}
	}
	namespace RedSandstone
	{
		constexpr BlockState RedSandstone()
		{
			return 11079;
		}
	}
	namespace RedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState RedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11288;
				else return 11289;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11290;
				else return 11291;
			else
				if (Waterlogged) return 11292;
				else return 11293;
		}
		BlockState RedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState RedSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11082;
						else return 11083;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11084;
						else return 11085;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11086;
						else return 11087;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11088;
						else return 11089;
					else
						if (Waterlogged) return 11090;
						else return 11091;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11092;
						else return 11093;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11094;
						else return 11095;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11096;
						else return 11097;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11098;
						else return 11099;
					else
						if (Waterlogged) return 11100;
						else return 11101;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11102;
						else return 11103;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11104;
						else return 11105;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11106;
						else return 11107;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11108;
						else return 11109;
					else
						if (Waterlogged) return 11110;
						else return 11111;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11112;
						else return 11113;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11114;
						else return 11115;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11116;
						else return 11117;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11118;
						else return 11119;
					else
						if (Waterlogged) return 11120;
						else return 11121;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11122;
						else return 11123;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11124;
						else return 11125;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11126;
						else return 11127;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11128;
						else return 11129;
					else
						if (Waterlogged) return 11130;
						else return 11131;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11132;
						else return 11133;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11134;
						else return 11135;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11136;
						else return 11137;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11138;
						else return 11139;
					else
						if (Waterlogged) return 11140;
						else return 11141;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11142;
						else return 11143;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11144;
						else return 11145;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11146;
						else return 11147;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11148;
						else return 11149;
					else
						if (Waterlogged) return 11150;
						else return 11151;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 11152;
						else return 11153;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 11154;
						else return 11155;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 11156;
						else return 11157;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 11158;
						else return 11159;
					else
						if (Waterlogged) return 11160;
						else return 11161;
		}
		BlockState RedSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace RedSandstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState RedSandstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14808;
								else if (West == West::Low) return 14809;
								else return 14810;
							else
								if (West == West::None) return 14811;
								else if (West == West::Low) return 14812;
								else return 14813;
						else
							if (Waterlogged)
								if (West == West::None) return 14814;
								else if (West == West::Low) return 14815;
								else return 14816;
							else
								if (West == West::None) return 14817;
								else if (West == West::Low) return 14818;
								else return 14819;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14820;
								else if (West == West::Low) return 14821;
								else return 14822;
							else
								if (West == West::None) return 14823;
								else if (West == West::Low) return 14824;
								else return 14825;
						else
							if (Waterlogged)
								if (West == West::None) return 14826;
								else if (West == West::Low) return 14827;
								else return 14828;
							else
								if (West == West::None) return 14829;
								else if (West == West::Low) return 14830;
								else return 14831;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14832;
								else if (West == West::Low) return 14833;
								else return 14834;
							else
								if (West == West::None) return 14835;
								else if (West == West::Low) return 14836;
								else return 14837;
						else
							if (Waterlogged)
								if (West == West::None) return 14838;
								else if (West == West::Low) return 14839;
								else return 14840;
							else
								if (West == West::None) return 14841;
								else if (West == West::Low) return 14842;
								else return 14843;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14844;
								else if (West == West::Low) return 14845;
								else return 14846;
							else
								if (West == West::None) return 14847;
								else if (West == West::Low) return 14848;
								else return 14849;
						else
							if (Waterlogged)
								if (West == West::None) return 14850;
								else if (West == West::Low) return 14851;
								else return 14852;
							else
								if (West == West::None) return 14853;
								else if (West == West::Low) return 14854;
								else return 14855;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14856;
								else if (West == West::Low) return 14857;
								else return 14858;
							else
								if (West == West::None) return 14859;
								else if (West == West::Low) return 14860;
								else return 14861;
						else
							if (Waterlogged)
								if (West == West::None) return 14862;
								else if (West == West::Low) return 14863;
								else return 14864;
							else
								if (West == West::None) return 14865;
								else if (West == West::Low) return 14866;
								else return 14867;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14868;
								else if (West == West::Low) return 14869;
								else return 14870;
							else
								if (West == West::None) return 14871;
								else if (West == West::Low) return 14872;
								else return 14873;
						else
							if (Waterlogged)
								if (West == West::None) return 14874;
								else if (West == West::Low) return 14875;
								else return 14876;
							else
								if (West == West::None) return 14877;
								else if (West == West::Low) return 14878;
								else return 14879;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14880;
								else if (West == West::Low) return 14881;
								else return 14882;
							else
								if (West == West::None) return 14883;
								else if (West == West::Low) return 14884;
								else return 14885;
						else
							if (Waterlogged)
								if (West == West::None) return 14886;
								else if (West == West::Low) return 14887;
								else return 14888;
							else
								if (West == West::None) return 14889;
								else if (West == West::Low) return 14890;
								else return 14891;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14892;
								else if (West == West::Low) return 14893;
								else return 14894;
							else
								if (West == West::None) return 14895;
								else if (West == West::Low) return 14896;
								else return 14897;
						else
							if (Waterlogged)
								if (West == West::None) return 14898;
								else if (West == West::Low) return 14899;
								else return 14900;
							else
								if (West == West::None) return 14901;
								else if (West == West::Low) return 14902;
								else return 14903;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14904;
								else if (West == West::Low) return 14905;
								else return 14906;
							else
								if (West == West::None) return 14907;
								else if (West == West::Low) return 14908;
								else return 14909;
						else
							if (Waterlogged)
								if (West == West::None) return 14910;
								else if (West == West::Low) return 14911;
								else return 14912;
							else
								if (West == West::None) return 14913;
								else if (West == West::Low) return 14914;
								else return 14915;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14916;
								else if (West == West::Low) return 14917;
								else return 14918;
							else
								if (West == West::None) return 14919;
								else if (West == West::Low) return 14920;
								else return 14921;
						else
							if (Waterlogged)
								if (West == West::None) return 14922;
								else if (West == West::Low) return 14923;
								else return 14924;
							else
								if (West == West::None) return 14925;
								else if (West == West::Low) return 14926;
								else return 14927;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14928;
								else if (West == West::Low) return 14929;
								else return 14930;
							else
								if (West == West::None) return 14931;
								else if (West == West::Low) return 14932;
								else return 14933;
						else
							if (Waterlogged)
								if (West == West::None) return 14934;
								else if (West == West::Low) return 14935;
								else return 14936;
							else
								if (West == West::None) return 14937;
								else if (West == West::Low) return 14938;
								else return 14939;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14940;
								else if (West == West::Low) return 14941;
								else return 14942;
							else
								if (West == West::None) return 14943;
								else if (West == West::Low) return 14944;
								else return 14945;
						else
							if (Waterlogged)
								if (West == West::None) return 14946;
								else if (West == West::Low) return 14947;
								else return 14948;
							else
								if (West == West::None) return 14949;
								else if (West == West::Low) return 14950;
								else return 14951;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14952;
								else if (West == West::Low) return 14953;
								else return 14954;
							else
								if (West == West::None) return 14955;
								else if (West == West::Low) return 14956;
								else return 14957;
						else
							if (Waterlogged)
								if (West == West::None) return 14958;
								else if (West == West::Low) return 14959;
								else return 14960;
							else
								if (West == West::None) return 14961;
								else if (West == West::Low) return 14962;
								else return 14963;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14964;
								else if (West == West::Low) return 14965;
								else return 14966;
							else
								if (West == West::None) return 14967;
								else if (West == West::Low) return 14968;
								else return 14969;
						else
							if (Waterlogged)
								if (West == West::None) return 14970;
								else if (West == West::Low) return 14971;
								else return 14972;
							else
								if (West == West::None) return 14973;
								else if (West == West::Low) return 14974;
								else return 14975;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14976;
								else if (West == West::Low) return 14977;
								else return 14978;
							else
								if (West == West::None) return 14979;
								else if (West == West::Low) return 14980;
								else return 14981;
						else
							if (Waterlogged)
								if (West == West::None) return 14982;
								else if (West == West::Low) return 14983;
								else return 14984;
							else
								if (West == West::None) return 14985;
								else if (West == West::Low) return 14986;
								else return 14987;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 14988;
								else if (West == West::Low) return 14989;
								else return 14990;
							else
								if (West == West::None) return 14991;
								else if (West == West::Low) return 14992;
								else return 14993;
						else
							if (Waterlogged)
								if (West == West::None) return 14994;
								else if (West == West::Low) return 14995;
								else return 14996;
							else
								if (West == West::None) return 14997;
								else if (West == West::Low) return 14998;
								else return 14999;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15000;
								else if (West == West::Low) return 15001;
								else return 15002;
							else
								if (West == West::None) return 15003;
								else if (West == West::Low) return 15004;
								else return 15005;
						else
							if (Waterlogged)
								if (West == West::None) return 15006;
								else if (West == West::Low) return 15007;
								else return 15008;
							else
								if (West == West::None) return 15009;
								else if (West == West::Low) return 15010;
								else return 15011;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15012;
								else if (West == West::Low) return 15013;
								else return 15014;
							else
								if (West == West::None) return 15015;
								else if (West == West::Low) return 15016;
								else return 15017;
						else
							if (Waterlogged)
								if (West == West::None) return 15018;
								else if (West == West::Low) return 15019;
								else return 15020;
							else
								if (West == West::None) return 15021;
								else if (West == West::Low) return 15022;
								else return 15023;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15024;
								else if (West == West::Low) return 15025;
								else return 15026;
							else
								if (West == West::None) return 15027;
								else if (West == West::Low) return 15028;
								else return 15029;
						else
							if (Waterlogged)
								if (West == West::None) return 15030;
								else if (West == West::Low) return 15031;
								else return 15032;
							else
								if (West == West::None) return 15033;
								else if (West == West::Low) return 15034;
								else return 15035;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15036;
								else if (West == West::Low) return 15037;
								else return 15038;
							else
								if (West == West::None) return 15039;
								else if (West == West::Low) return 15040;
								else return 15041;
						else
							if (Waterlogged)
								if (West == West::None) return 15042;
								else if (West == West::Low) return 15043;
								else return 15044;
							else
								if (West == West::None) return 15045;
								else if (West == West::Low) return 15046;
								else return 15047;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15048;
								else if (West == West::Low) return 15049;
								else return 15050;
							else
								if (West == West::None) return 15051;
								else if (West == West::Low) return 15052;
								else return 15053;
						else
							if (Waterlogged)
								if (West == West::None) return 15054;
								else if (West == West::Low) return 15055;
								else return 15056;
							else
								if (West == West::None) return 15057;
								else if (West == West::Low) return 15058;
								else return 15059;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15060;
								else if (West == West::Low) return 15061;
								else return 15062;
							else
								if (West == West::None) return 15063;
								else if (West == West::Low) return 15064;
								else return 15065;
						else
							if (Waterlogged)
								if (West == West::None) return 15066;
								else if (West == West::Low) return 15067;
								else return 15068;
							else
								if (West == West::None) return 15069;
								else if (West == West::Low) return 15070;
								else return 15071;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15072;
								else if (West == West::Low) return 15073;
								else return 15074;
							else
								if (West == West::None) return 15075;
								else if (West == West::Low) return 15076;
								else return 15077;
						else
							if (Waterlogged)
								if (West == West::None) return 15078;
								else if (West == West::Low) return 15079;
								else return 15080;
							else
								if (West == West::None) return 15081;
								else if (West == West::Low) return 15082;
								else return 15083;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15084;
								else if (West == West::Low) return 15085;
								else return 15086;
							else
								if (West == West::None) return 15087;
								else if (West == West::Low) return 15088;
								else return 15089;
						else
							if (Waterlogged)
								if (West == West::None) return 15090;
								else if (West == West::Low) return 15091;
								else return 15092;
							else
								if (West == West::None) return 15093;
								else if (West == West::Low) return 15094;
								else return 15095;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15096;
								else if (West == West::Low) return 15097;
								else return 15098;
							else
								if (West == West::None) return 15099;
								else if (West == West::Low) return 15100;
								else return 15101;
						else
							if (Waterlogged)
								if (West == West::None) return 15102;
								else if (West == West::Low) return 15103;
								else return 15104;
							else
								if (West == West::None) return 15105;
								else if (West == West::Low) return 15106;
								else return 15107;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15108;
								else if (West == West::Low) return 15109;
								else return 15110;
							else
								if (West == West::None) return 15111;
								else if (West == West::Low) return 15112;
								else return 15113;
						else
							if (Waterlogged)
								if (West == West::None) return 15114;
								else if (West == West::Low) return 15115;
								else return 15116;
							else
								if (West == West::None) return 15117;
								else if (West == West::Low) return 15118;
								else return 15119;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15120;
								else if (West == West::Low) return 15121;
								else return 15122;
							else
								if (West == West::None) return 15123;
								else if (West == West::Low) return 15124;
								else return 15125;
						else
							if (Waterlogged)
								if (West == West::None) return 15126;
								else if (West == West::Low) return 15127;
								else return 15128;
							else
								if (West == West::None) return 15129;
								else if (West == West::Low) return 15130;
								else return 15131;
		}
		BlockState RedSandstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace RedShulkerBox
	{
		constexpr BlockState RedShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12652;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12653;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12654;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12655;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12656;
			else return 12657;
		}
		BlockState RedShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedStainedGlass
	{
		constexpr BlockState RedStainedGlass()
		{
			return 5959;
		}
	}
	namespace RedStainedGlassPane
	{
		constexpr BlockState RedStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9820;
							else return 9821;
						else
							if (West) return 9822;
							else return 9823;
					else
						if (Waterlogged)
							if (West) return 9824;
							else return 9825;
						else
							if (West) return 9826;
							else return 9827;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9828;
							else return 9829;
						else
							if (West) return 9830;
							else return 9831;
					else
						if (Waterlogged)
							if (West) return 9832;
							else return 9833;
						else
							if (West) return 9834;
							else return 9835;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9836;
							else return 9837;
						else
							if (West) return 9838;
							else return 9839;
					else
						if (Waterlogged)
							if (West) return 9840;
							else return 9841;
						else
							if (West) return 9842;
							else return 9843;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9844;
							else return 9845;
						else
							if (West) return 9846;
							else return 9847;
					else
						if (Waterlogged)
							if (West) return 9848;
							else return 9849;
						else
							if (West) return 9850;
							else return 9851;
		}
		BlockState RedStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace RedTerracotta
	{
		constexpr BlockState RedTerracotta()
		{
			return 9370;
		}
	}
	namespace RedTulip
	{
		constexpr BlockState RedTulip()
		{
			return 2081;
		}
	}
	namespace RedWallBanner
	{
		constexpr BlockState RedWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11071;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11072;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11073;
			else return 11074;
		}
		BlockState RedWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace RedWool
	{
		constexpr BlockState RedWool()
		{
			return 2061;
		}
	}
	namespace RedstoneBlock
	{
		constexpr BlockState RedstoneBlock()
		{
			return 9223;
		}
	}
	namespace RedstoneLamp
	{
		constexpr BlockState RedstoneLamp(const bool Lit)
		{
			if (Lit) return 7417;
			else return 7418;
		}
		BlockState RedstoneLamp();
		bool Lit(BlockState Block);
	}
	namespace RedstoneOre
	{
		constexpr BlockState RedstoneOre(const bool Lit)
		{
			if (Lit) return 5734;
			else return 5735;
		}
		BlockState RedstoneOre();
		bool Lit(BlockState Block);
	}
	namespace RedstoneTorch
	{
		constexpr BlockState RedstoneTorch(const bool Lit)
		{
			if (Lit) return 5738;
			else return 5739;
		}
		BlockState RedstoneTorch();
		bool Lit(BlockState Block);
	}
	namespace RedstoneWallTorch
	{
		constexpr BlockState RedstoneWallTorch(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 5740;
				else return 5741;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 5742;
				else return 5743;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 5744;
				else return 5745;
			else
				if (Lit) return 5746;
				else return 5747;
		}
		BlockState RedstoneWallTorch();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace RedstoneWire
	{
		enum class East
		{
			Up,
			Side,
			None,
		};
		enum class North
		{
			Up,
			Side,
			None,
		};
		enum class South
		{
			Up,
			Side,
			None,
		};
		enum class West
		{
			Up,
			Side,
			None,
		};
		constexpr BlockState RedstoneWire(const enum East East, const enum North North, const int Power, const enum South South, const enum West West)
		{
			if (East == East::Up)
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 2978;
							else if (West == West::Side) return 2979;
							else return 2980;
						else if (South == South::Side)
							if (West == West::Up) return 2981;
							else if (West == West::Side) return 2982;
							else return 2983;
						else
							if (West == West::Up) return 2984;
							else if (West == West::Side) return 2985;
							else return 2986;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 2987;
							else if (West == West::Side) return 2988;
							else return 2989;
						else if (South == South::Side)
							if (West == West::Up) return 2990;
							else if (West == West::Side) return 2991;
							else return 2992;
						else
							if (West == West::Up) return 2993;
							else if (West == West::Side) return 2994;
							else return 2995;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 2996;
							else if (West == West::Side) return 2997;
							else return 2998;
						else if (South == South::Side)
							if (West == West::Up) return 2999;
							else if (West == West::Side) return 3000;
							else return 3001;
						else
							if (West == West::Up) return 3002;
							else if (West == West::Side) return 3003;
							else return 3004;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3005;
							else if (West == West::Side) return 3006;
							else return 3007;
						else if (South == South::Side)
							if (West == West::Up) return 3008;
							else if (West == West::Side) return 3009;
							else return 3010;
						else
							if (West == West::Up) return 3011;
							else if (West == West::Side) return 3012;
							else return 3013;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3014;
							else if (West == West::Side) return 3015;
							else return 3016;
						else if (South == South::Side)
							if (West == West::Up) return 3017;
							else if (West == West::Side) return 3018;
							else return 3019;
						else
							if (West == West::Up) return 3020;
							else if (West == West::Side) return 3021;
							else return 3022;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3023;
							else if (West == West::Side) return 3024;
							else return 3025;
						else if (South == South::Side)
							if (West == West::Up) return 3026;
							else if (West == West::Side) return 3027;
							else return 3028;
						else
							if (West == West::Up) return 3029;
							else if (West == West::Side) return 3030;
							else return 3031;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3032;
							else if (West == West::Side) return 3033;
							else return 3034;
						else if (South == South::Side)
							if (West == West::Up) return 3035;
							else if (West == West::Side) return 3036;
							else return 3037;
						else
							if (West == West::Up) return 3038;
							else if (West == West::Side) return 3039;
							else return 3040;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3041;
							else if (West == West::Side) return 3042;
							else return 3043;
						else if (South == South::Side)
							if (West == West::Up) return 3044;
							else if (West == West::Side) return 3045;
							else return 3046;
						else
							if (West == West::Up) return 3047;
							else if (West == West::Side) return 3048;
							else return 3049;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3050;
							else if (West == West::Side) return 3051;
							else return 3052;
						else if (South == South::Side)
							if (West == West::Up) return 3053;
							else if (West == West::Side) return 3054;
							else return 3055;
						else
							if (West == West::Up) return 3056;
							else if (West == West::Side) return 3057;
							else return 3058;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3059;
							else if (West == West::Side) return 3060;
							else return 3061;
						else if (South == South::Side)
							if (West == West::Up) return 3062;
							else if (West == West::Side) return 3063;
							else return 3064;
						else
							if (West == West::Up) return 3065;
							else if (West == West::Side) return 3066;
							else return 3067;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3068;
							else if (West == West::Side) return 3069;
							else return 3070;
						else if (South == South::Side)
							if (West == West::Up) return 3071;
							else if (West == West::Side) return 3072;
							else return 3073;
						else
							if (West == West::Up) return 3074;
							else if (West == West::Side) return 3075;
							else return 3076;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3077;
							else if (West == West::Side) return 3078;
							else return 3079;
						else if (South == South::Side)
							if (West == West::Up) return 3080;
							else if (West == West::Side) return 3081;
							else return 3082;
						else
							if (West == West::Up) return 3083;
							else if (West == West::Side) return 3084;
							else return 3085;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3086;
							else if (West == West::Side) return 3087;
							else return 3088;
						else if (South == South::Side)
							if (West == West::Up) return 3089;
							else if (West == West::Side) return 3090;
							else return 3091;
						else
							if (West == West::Up) return 3092;
							else if (West == West::Side) return 3093;
							else return 3094;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3095;
							else if (West == West::Side) return 3096;
							else return 3097;
						else if (South == South::Side)
							if (West == West::Up) return 3098;
							else if (West == West::Side) return 3099;
							else return 3100;
						else
							if (West == West::Up) return 3101;
							else if (West == West::Side) return 3102;
							else return 3103;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3104;
							else if (West == West::Side) return 3105;
							else return 3106;
						else if (South == South::Side)
							if (West == West::Up) return 3107;
							else if (West == West::Side) return 3108;
							else return 3109;
						else
							if (West == West::Up) return 3110;
							else if (West == West::Side) return 3111;
							else return 3112;
					else
						if (South == South::Up)
							if (West == West::Up) return 3113;
							else if (West == West::Side) return 3114;
							else return 3115;
						else if (South == South::Side)
							if (West == West::Up) return 3116;
							else if (West == West::Side) return 3117;
							else return 3118;
						else
							if (West == West::Up) return 3119;
							else if (West == West::Side) return 3120;
							else return 3121;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3122;
							else if (West == West::Side) return 3123;
							else return 3124;
						else if (South == South::Side)
							if (West == West::Up) return 3125;
							else if (West == West::Side) return 3126;
							else return 3127;
						else
							if (West == West::Up) return 3128;
							else if (West == West::Side) return 3129;
							else return 3130;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3131;
							else if (West == West::Side) return 3132;
							else return 3133;
						else if (South == South::Side)
							if (West == West::Up) return 3134;
							else if (West == West::Side) return 3135;
							else return 3136;
						else
							if (West == West::Up) return 3137;
							else if (West == West::Side) return 3138;
							else return 3139;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3140;
							else if (West == West::Side) return 3141;
							else return 3142;
						else if (South == South::Side)
							if (West == West::Up) return 3143;
							else if (West == West::Side) return 3144;
							else return 3145;
						else
							if (West == West::Up) return 3146;
							else if (West == West::Side) return 3147;
							else return 3148;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3149;
							else if (West == West::Side) return 3150;
							else return 3151;
						else if (South == South::Side)
							if (West == West::Up) return 3152;
							else if (West == West::Side) return 3153;
							else return 3154;
						else
							if (West == West::Up) return 3155;
							else if (West == West::Side) return 3156;
							else return 3157;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3158;
							else if (West == West::Side) return 3159;
							else return 3160;
						else if (South == South::Side)
							if (West == West::Up) return 3161;
							else if (West == West::Side) return 3162;
							else return 3163;
						else
							if (West == West::Up) return 3164;
							else if (West == West::Side) return 3165;
							else return 3166;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3167;
							else if (West == West::Side) return 3168;
							else return 3169;
						else if (South == South::Side)
							if (West == West::Up) return 3170;
							else if (West == West::Side) return 3171;
							else return 3172;
						else
							if (West == West::Up) return 3173;
							else if (West == West::Side) return 3174;
							else return 3175;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3176;
							else if (West == West::Side) return 3177;
							else return 3178;
						else if (South == South::Side)
							if (West == West::Up) return 3179;
							else if (West == West::Side) return 3180;
							else return 3181;
						else
							if (West == West::Up) return 3182;
							else if (West == West::Side) return 3183;
							else return 3184;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3185;
							else if (West == West::Side) return 3186;
							else return 3187;
						else if (South == South::Side)
							if (West == West::Up) return 3188;
							else if (West == West::Side) return 3189;
							else return 3190;
						else
							if (West == West::Up) return 3191;
							else if (West == West::Side) return 3192;
							else return 3193;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3194;
							else if (West == West::Side) return 3195;
							else return 3196;
						else if (South == South::Side)
							if (West == West::Up) return 3197;
							else if (West == West::Side) return 3198;
							else return 3199;
						else
							if (West == West::Up) return 3200;
							else if (West == West::Side) return 3201;
							else return 3202;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3203;
							else if (West == West::Side) return 3204;
							else return 3205;
						else if (South == South::Side)
							if (West == West::Up) return 3206;
							else if (West == West::Side) return 3207;
							else return 3208;
						else
							if (West == West::Up) return 3209;
							else if (West == West::Side) return 3210;
							else return 3211;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3212;
							else if (West == West::Side) return 3213;
							else return 3214;
						else if (South == South::Side)
							if (West == West::Up) return 3215;
							else if (West == West::Side) return 3216;
							else return 3217;
						else
							if (West == West::Up) return 3218;
							else if (West == West::Side) return 3219;
							else return 3220;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3221;
							else if (West == West::Side) return 3222;
							else return 3223;
						else if (South == South::Side)
							if (West == West::Up) return 3224;
							else if (West == West::Side) return 3225;
							else return 3226;
						else
							if (West == West::Up) return 3227;
							else if (West == West::Side) return 3228;
							else return 3229;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3230;
							else if (West == West::Side) return 3231;
							else return 3232;
						else if (South == South::Side)
							if (West == West::Up) return 3233;
							else if (West == West::Side) return 3234;
							else return 3235;
						else
							if (West == West::Up) return 3236;
							else if (West == West::Side) return 3237;
							else return 3238;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3239;
							else if (West == West::Side) return 3240;
							else return 3241;
						else if (South == South::Side)
							if (West == West::Up) return 3242;
							else if (West == West::Side) return 3243;
							else return 3244;
						else
							if (West == West::Up) return 3245;
							else if (West == West::Side) return 3246;
							else return 3247;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3248;
							else if (West == West::Side) return 3249;
							else return 3250;
						else if (South == South::Side)
							if (West == West::Up) return 3251;
							else if (West == West::Side) return 3252;
							else return 3253;
						else
							if (West == West::Up) return 3254;
							else if (West == West::Side) return 3255;
							else return 3256;
					else
						if (South == South::Up)
							if (West == West::Up) return 3257;
							else if (West == West::Side) return 3258;
							else return 3259;
						else if (South == South::Side)
							if (West == West::Up) return 3260;
							else if (West == West::Side) return 3261;
							else return 3262;
						else
							if (West == West::Up) return 3263;
							else if (West == West::Side) return 3264;
							else return 3265;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3266;
							else if (West == West::Side) return 3267;
							else return 3268;
						else if (South == South::Side)
							if (West == West::Up) return 3269;
							else if (West == West::Side) return 3270;
							else return 3271;
						else
							if (West == West::Up) return 3272;
							else if (West == West::Side) return 3273;
							else return 3274;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3275;
							else if (West == West::Side) return 3276;
							else return 3277;
						else if (South == South::Side)
							if (West == West::Up) return 3278;
							else if (West == West::Side) return 3279;
							else return 3280;
						else
							if (West == West::Up) return 3281;
							else if (West == West::Side) return 3282;
							else return 3283;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3284;
							else if (West == West::Side) return 3285;
							else return 3286;
						else if (South == South::Side)
							if (West == West::Up) return 3287;
							else if (West == West::Side) return 3288;
							else return 3289;
						else
							if (West == West::Up) return 3290;
							else if (West == West::Side) return 3291;
							else return 3292;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3293;
							else if (West == West::Side) return 3294;
							else return 3295;
						else if (South == South::Side)
							if (West == West::Up) return 3296;
							else if (West == West::Side) return 3297;
							else return 3298;
						else
							if (West == West::Up) return 3299;
							else if (West == West::Side) return 3300;
							else return 3301;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3302;
							else if (West == West::Side) return 3303;
							else return 3304;
						else if (South == South::Side)
							if (West == West::Up) return 3305;
							else if (West == West::Side) return 3306;
							else return 3307;
						else
							if (West == West::Up) return 3308;
							else if (West == West::Side) return 3309;
							else return 3310;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3311;
							else if (West == West::Side) return 3312;
							else return 3313;
						else if (South == South::Side)
							if (West == West::Up) return 3314;
							else if (West == West::Side) return 3315;
							else return 3316;
						else
							if (West == West::Up) return 3317;
							else if (West == West::Side) return 3318;
							else return 3319;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3320;
							else if (West == West::Side) return 3321;
							else return 3322;
						else if (South == South::Side)
							if (West == West::Up) return 3323;
							else if (West == West::Side) return 3324;
							else return 3325;
						else
							if (West == West::Up) return 3326;
							else if (West == West::Side) return 3327;
							else return 3328;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3329;
							else if (West == West::Side) return 3330;
							else return 3331;
						else if (South == South::Side)
							if (West == West::Up) return 3332;
							else if (West == West::Side) return 3333;
							else return 3334;
						else
							if (West == West::Up) return 3335;
							else if (West == West::Side) return 3336;
							else return 3337;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3338;
							else if (West == West::Side) return 3339;
							else return 3340;
						else if (South == South::Side)
							if (West == West::Up) return 3341;
							else if (West == West::Side) return 3342;
							else return 3343;
						else
							if (West == West::Up) return 3344;
							else if (West == West::Side) return 3345;
							else return 3346;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3347;
							else if (West == West::Side) return 3348;
							else return 3349;
						else if (South == South::Side)
							if (West == West::Up) return 3350;
							else if (West == West::Side) return 3351;
							else return 3352;
						else
							if (West == West::Up) return 3353;
							else if (West == West::Side) return 3354;
							else return 3355;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3356;
							else if (West == West::Side) return 3357;
							else return 3358;
						else if (South == South::Side)
							if (West == West::Up) return 3359;
							else if (West == West::Side) return 3360;
							else return 3361;
						else
							if (West == West::Up) return 3362;
							else if (West == West::Side) return 3363;
							else return 3364;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3365;
							else if (West == West::Side) return 3366;
							else return 3367;
						else if (South == South::Side)
							if (West == West::Up) return 3368;
							else if (West == West::Side) return 3369;
							else return 3370;
						else
							if (West == West::Up) return 3371;
							else if (West == West::Side) return 3372;
							else return 3373;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3374;
							else if (West == West::Side) return 3375;
							else return 3376;
						else if (South == South::Side)
							if (West == West::Up) return 3377;
							else if (West == West::Side) return 3378;
							else return 3379;
						else
							if (West == West::Up) return 3380;
							else if (West == West::Side) return 3381;
							else return 3382;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3383;
							else if (West == West::Side) return 3384;
							else return 3385;
						else if (South == South::Side)
							if (West == West::Up) return 3386;
							else if (West == West::Side) return 3387;
							else return 3388;
						else
							if (West == West::Up) return 3389;
							else if (West == West::Side) return 3390;
							else return 3391;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3392;
							else if (West == West::Side) return 3393;
							else return 3394;
						else if (South == South::Side)
							if (West == West::Up) return 3395;
							else if (West == West::Side) return 3396;
							else return 3397;
						else
							if (West == West::Up) return 3398;
							else if (West == West::Side) return 3399;
							else return 3400;
					else
						if (South == South::Up)
							if (West == West::Up) return 3401;
							else if (West == West::Side) return 3402;
							else return 3403;
						else if (South == South::Side)
							if (West == West::Up) return 3404;
							else if (West == West::Side) return 3405;
							else return 3406;
						else
							if (West == West::Up) return 3407;
							else if (West == West::Side) return 3408;
							else return 3409;
			else if (East == East::Side)
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3410;
							else if (West == West::Side) return 3411;
							else return 3412;
						else if (South == South::Side)
							if (West == West::Up) return 3413;
							else if (West == West::Side) return 3414;
							else return 3415;
						else
							if (West == West::Up) return 3416;
							else if (West == West::Side) return 3417;
							else return 3418;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3419;
							else if (West == West::Side) return 3420;
							else return 3421;
						else if (South == South::Side)
							if (West == West::Up) return 3422;
							else if (West == West::Side) return 3423;
							else return 3424;
						else
							if (West == West::Up) return 3425;
							else if (West == West::Side) return 3426;
							else return 3427;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3428;
							else if (West == West::Side) return 3429;
							else return 3430;
						else if (South == South::Side)
							if (West == West::Up) return 3431;
							else if (West == West::Side) return 3432;
							else return 3433;
						else
							if (West == West::Up) return 3434;
							else if (West == West::Side) return 3435;
							else return 3436;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3437;
							else if (West == West::Side) return 3438;
							else return 3439;
						else if (South == South::Side)
							if (West == West::Up) return 3440;
							else if (West == West::Side) return 3441;
							else return 3442;
						else
							if (West == West::Up) return 3443;
							else if (West == West::Side) return 3444;
							else return 3445;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3446;
							else if (West == West::Side) return 3447;
							else return 3448;
						else if (South == South::Side)
							if (West == West::Up) return 3449;
							else if (West == West::Side) return 3450;
							else return 3451;
						else
							if (West == West::Up) return 3452;
							else if (West == West::Side) return 3453;
							else return 3454;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3455;
							else if (West == West::Side) return 3456;
							else return 3457;
						else if (South == South::Side)
							if (West == West::Up) return 3458;
							else if (West == West::Side) return 3459;
							else return 3460;
						else
							if (West == West::Up) return 3461;
							else if (West == West::Side) return 3462;
							else return 3463;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3464;
							else if (West == West::Side) return 3465;
							else return 3466;
						else if (South == South::Side)
							if (West == West::Up) return 3467;
							else if (West == West::Side) return 3468;
							else return 3469;
						else
							if (West == West::Up) return 3470;
							else if (West == West::Side) return 3471;
							else return 3472;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3473;
							else if (West == West::Side) return 3474;
							else return 3475;
						else if (South == South::Side)
							if (West == West::Up) return 3476;
							else if (West == West::Side) return 3477;
							else return 3478;
						else
							if (West == West::Up) return 3479;
							else if (West == West::Side) return 3480;
							else return 3481;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3482;
							else if (West == West::Side) return 3483;
							else return 3484;
						else if (South == South::Side)
							if (West == West::Up) return 3485;
							else if (West == West::Side) return 3486;
							else return 3487;
						else
							if (West == West::Up) return 3488;
							else if (West == West::Side) return 3489;
							else return 3490;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3491;
							else if (West == West::Side) return 3492;
							else return 3493;
						else if (South == South::Side)
							if (West == West::Up) return 3494;
							else if (West == West::Side) return 3495;
							else return 3496;
						else
							if (West == West::Up) return 3497;
							else if (West == West::Side) return 3498;
							else return 3499;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3500;
							else if (West == West::Side) return 3501;
							else return 3502;
						else if (South == South::Side)
							if (West == West::Up) return 3503;
							else if (West == West::Side) return 3504;
							else return 3505;
						else
							if (West == West::Up) return 3506;
							else if (West == West::Side) return 3507;
							else return 3508;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3509;
							else if (West == West::Side) return 3510;
							else return 3511;
						else if (South == South::Side)
							if (West == West::Up) return 3512;
							else if (West == West::Side) return 3513;
							else return 3514;
						else
							if (West == West::Up) return 3515;
							else if (West == West::Side) return 3516;
							else return 3517;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3518;
							else if (West == West::Side) return 3519;
							else return 3520;
						else if (South == South::Side)
							if (West == West::Up) return 3521;
							else if (West == West::Side) return 3522;
							else return 3523;
						else
							if (West == West::Up) return 3524;
							else if (West == West::Side) return 3525;
							else return 3526;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3527;
							else if (West == West::Side) return 3528;
							else return 3529;
						else if (South == South::Side)
							if (West == West::Up) return 3530;
							else if (West == West::Side) return 3531;
							else return 3532;
						else
							if (West == West::Up) return 3533;
							else if (West == West::Side) return 3534;
							else return 3535;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3536;
							else if (West == West::Side) return 3537;
							else return 3538;
						else if (South == South::Side)
							if (West == West::Up) return 3539;
							else if (West == West::Side) return 3540;
							else return 3541;
						else
							if (West == West::Up) return 3542;
							else if (West == West::Side) return 3543;
							else return 3544;
					else
						if (South == South::Up)
							if (West == West::Up) return 3545;
							else if (West == West::Side) return 3546;
							else return 3547;
						else if (South == South::Side)
							if (West == West::Up) return 3548;
							else if (West == West::Side) return 3549;
							else return 3550;
						else
							if (West == West::Up) return 3551;
							else if (West == West::Side) return 3552;
							else return 3553;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3554;
							else if (West == West::Side) return 3555;
							else return 3556;
						else if (South == South::Side)
							if (West == West::Up) return 3557;
							else if (West == West::Side) return 3558;
							else return 3559;
						else
							if (West == West::Up) return 3560;
							else if (West == West::Side) return 3561;
							else return 3562;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3563;
							else if (West == West::Side) return 3564;
							else return 3565;
						else if (South == South::Side)
							if (West == West::Up) return 3566;
							else if (West == West::Side) return 3567;
							else return 3568;
						else
							if (West == West::Up) return 3569;
							else if (West == West::Side) return 3570;
							else return 3571;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3572;
							else if (West == West::Side) return 3573;
							else return 3574;
						else if (South == South::Side)
							if (West == West::Up) return 3575;
							else if (West == West::Side) return 3576;
							else return 3577;
						else
							if (West == West::Up) return 3578;
							else if (West == West::Side) return 3579;
							else return 3580;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3581;
							else if (West == West::Side) return 3582;
							else return 3583;
						else if (South == South::Side)
							if (West == West::Up) return 3584;
							else if (West == West::Side) return 3585;
							else return 3586;
						else
							if (West == West::Up) return 3587;
							else if (West == West::Side) return 3588;
							else return 3589;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3590;
							else if (West == West::Side) return 3591;
							else return 3592;
						else if (South == South::Side)
							if (West == West::Up) return 3593;
							else if (West == West::Side) return 3594;
							else return 3595;
						else
							if (West == West::Up) return 3596;
							else if (West == West::Side) return 3597;
							else return 3598;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3599;
							else if (West == West::Side) return 3600;
							else return 3601;
						else if (South == South::Side)
							if (West == West::Up) return 3602;
							else if (West == West::Side) return 3603;
							else return 3604;
						else
							if (West == West::Up) return 3605;
							else if (West == West::Side) return 3606;
							else return 3607;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3608;
							else if (West == West::Side) return 3609;
							else return 3610;
						else if (South == South::Side)
							if (West == West::Up) return 3611;
							else if (West == West::Side) return 3612;
							else return 3613;
						else
							if (West == West::Up) return 3614;
							else if (West == West::Side) return 3615;
							else return 3616;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3617;
							else if (West == West::Side) return 3618;
							else return 3619;
						else if (South == South::Side)
							if (West == West::Up) return 3620;
							else if (West == West::Side) return 3621;
							else return 3622;
						else
							if (West == West::Up) return 3623;
							else if (West == West::Side) return 3624;
							else return 3625;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3626;
							else if (West == West::Side) return 3627;
							else return 3628;
						else if (South == South::Side)
							if (West == West::Up) return 3629;
							else if (West == West::Side) return 3630;
							else return 3631;
						else
							if (West == West::Up) return 3632;
							else if (West == West::Side) return 3633;
							else return 3634;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3635;
							else if (West == West::Side) return 3636;
							else return 3637;
						else if (South == South::Side)
							if (West == West::Up) return 3638;
							else if (West == West::Side) return 3639;
							else return 3640;
						else
							if (West == West::Up) return 3641;
							else if (West == West::Side) return 3642;
							else return 3643;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3644;
							else if (West == West::Side) return 3645;
							else return 3646;
						else if (South == South::Side)
							if (West == West::Up) return 3647;
							else if (West == West::Side) return 3648;
							else return 3649;
						else
							if (West == West::Up) return 3650;
							else if (West == West::Side) return 3651;
							else return 3652;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3653;
							else if (West == West::Side) return 3654;
							else return 3655;
						else if (South == South::Side)
							if (West == West::Up) return 3656;
							else if (West == West::Side) return 3657;
							else return 3658;
						else
							if (West == West::Up) return 3659;
							else if (West == West::Side) return 3660;
							else return 3661;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3662;
							else if (West == West::Side) return 3663;
							else return 3664;
						else if (South == South::Side)
							if (West == West::Up) return 3665;
							else if (West == West::Side) return 3666;
							else return 3667;
						else
							if (West == West::Up) return 3668;
							else if (West == West::Side) return 3669;
							else return 3670;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3671;
							else if (West == West::Side) return 3672;
							else return 3673;
						else if (South == South::Side)
							if (West == West::Up) return 3674;
							else if (West == West::Side) return 3675;
							else return 3676;
						else
							if (West == West::Up) return 3677;
							else if (West == West::Side) return 3678;
							else return 3679;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3680;
							else if (West == West::Side) return 3681;
							else return 3682;
						else if (South == South::Side)
							if (West == West::Up) return 3683;
							else if (West == West::Side) return 3684;
							else return 3685;
						else
							if (West == West::Up) return 3686;
							else if (West == West::Side) return 3687;
							else return 3688;
					else
						if (South == South::Up)
							if (West == West::Up) return 3689;
							else if (West == West::Side) return 3690;
							else return 3691;
						else if (South == South::Side)
							if (West == West::Up) return 3692;
							else if (West == West::Side) return 3693;
							else return 3694;
						else
							if (West == West::Up) return 3695;
							else if (West == West::Side) return 3696;
							else return 3697;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3698;
							else if (West == West::Side) return 3699;
							else return 3700;
						else if (South == South::Side)
							if (West == West::Up) return 3701;
							else if (West == West::Side) return 3702;
							else return 3703;
						else
							if (West == West::Up) return 3704;
							else if (West == West::Side) return 3705;
							else return 3706;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3707;
							else if (West == West::Side) return 3708;
							else return 3709;
						else if (South == South::Side)
							if (West == West::Up) return 3710;
							else if (West == West::Side) return 3711;
							else return 3712;
						else
							if (West == West::Up) return 3713;
							else if (West == West::Side) return 3714;
							else return 3715;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3716;
							else if (West == West::Side) return 3717;
							else return 3718;
						else if (South == South::Side)
							if (West == West::Up) return 3719;
							else if (West == West::Side) return 3720;
							else return 3721;
						else
							if (West == West::Up) return 3722;
							else if (West == West::Side) return 3723;
							else return 3724;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3725;
							else if (West == West::Side) return 3726;
							else return 3727;
						else if (South == South::Side)
							if (West == West::Up) return 3728;
							else if (West == West::Side) return 3729;
							else return 3730;
						else
							if (West == West::Up) return 3731;
							else if (West == West::Side) return 3732;
							else return 3733;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3734;
							else if (West == West::Side) return 3735;
							else return 3736;
						else if (South == South::Side)
							if (West == West::Up) return 3737;
							else if (West == West::Side) return 3738;
							else return 3739;
						else
							if (West == West::Up) return 3740;
							else if (West == West::Side) return 3741;
							else return 3742;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3743;
							else if (West == West::Side) return 3744;
							else return 3745;
						else if (South == South::Side)
							if (West == West::Up) return 3746;
							else if (West == West::Side) return 3747;
							else return 3748;
						else
							if (West == West::Up) return 3749;
							else if (West == West::Side) return 3750;
							else return 3751;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3752;
							else if (West == West::Side) return 3753;
							else return 3754;
						else if (South == South::Side)
							if (West == West::Up) return 3755;
							else if (West == West::Side) return 3756;
							else return 3757;
						else
							if (West == West::Up) return 3758;
							else if (West == West::Side) return 3759;
							else return 3760;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3761;
							else if (West == West::Side) return 3762;
							else return 3763;
						else if (South == South::Side)
							if (West == West::Up) return 3764;
							else if (West == West::Side) return 3765;
							else return 3766;
						else
							if (West == West::Up) return 3767;
							else if (West == West::Side) return 3768;
							else return 3769;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3770;
							else if (West == West::Side) return 3771;
							else return 3772;
						else if (South == South::Side)
							if (West == West::Up) return 3773;
							else if (West == West::Side) return 3774;
							else return 3775;
						else
							if (West == West::Up) return 3776;
							else if (West == West::Side) return 3777;
							else return 3778;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3779;
							else if (West == West::Side) return 3780;
							else return 3781;
						else if (South == South::Side)
							if (West == West::Up) return 3782;
							else if (West == West::Side) return 3783;
							else return 3784;
						else
							if (West == West::Up) return 3785;
							else if (West == West::Side) return 3786;
							else return 3787;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3788;
							else if (West == West::Side) return 3789;
							else return 3790;
						else if (South == South::Side)
							if (West == West::Up) return 3791;
							else if (West == West::Side) return 3792;
							else return 3793;
						else
							if (West == West::Up) return 3794;
							else if (West == West::Side) return 3795;
							else return 3796;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3797;
							else if (West == West::Side) return 3798;
							else return 3799;
						else if (South == South::Side)
							if (West == West::Up) return 3800;
							else if (West == West::Side) return 3801;
							else return 3802;
						else
							if (West == West::Up) return 3803;
							else if (West == West::Side) return 3804;
							else return 3805;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3806;
							else if (West == West::Side) return 3807;
							else return 3808;
						else if (South == South::Side)
							if (West == West::Up) return 3809;
							else if (West == West::Side) return 3810;
							else return 3811;
						else
							if (West == West::Up) return 3812;
							else if (West == West::Side) return 3813;
							else return 3814;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3815;
							else if (West == West::Side) return 3816;
							else return 3817;
						else if (South == South::Side)
							if (West == West::Up) return 3818;
							else if (West == West::Side) return 3819;
							else return 3820;
						else
							if (West == West::Up) return 3821;
							else if (West == West::Side) return 3822;
							else return 3823;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3824;
							else if (West == West::Side) return 3825;
							else return 3826;
						else if (South == South::Side)
							if (West == West::Up) return 3827;
							else if (West == West::Side) return 3828;
							else return 3829;
						else
							if (West == West::Up) return 3830;
							else if (West == West::Side) return 3831;
							else return 3832;
					else
						if (South == South::Up)
							if (West == West::Up) return 3833;
							else if (West == West::Side) return 3834;
							else return 3835;
						else if (South == South::Side)
							if (West == West::Up) return 3836;
							else if (West == West::Side) return 3837;
							else return 3838;
						else
							if (West == West::Up) return 3839;
							else if (West == West::Side) return 3840;
							else return 3841;
			else
				if (North == North::Up)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3842;
							else if (West == West::Side) return 3843;
							else return 3844;
						else if (South == South::Side)
							if (West == West::Up) return 3845;
							else if (West == West::Side) return 3846;
							else return 3847;
						else
							if (West == West::Up) return 3848;
							else if (West == West::Side) return 3849;
							else return 3850;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3851;
							else if (West == West::Side) return 3852;
							else return 3853;
						else if (South == South::Side)
							if (West == West::Up) return 3854;
							else if (West == West::Side) return 3855;
							else return 3856;
						else
							if (West == West::Up) return 3857;
							else if (West == West::Side) return 3858;
							else return 3859;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 3860;
							else if (West == West::Side) return 3861;
							else return 3862;
						else if (South == South::Side)
							if (West == West::Up) return 3863;
							else if (West == West::Side) return 3864;
							else return 3865;
						else
							if (West == West::Up) return 3866;
							else if (West == West::Side) return 3867;
							else return 3868;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 3869;
							else if (West == West::Side) return 3870;
							else return 3871;
						else if (South == South::Side)
							if (West == West::Up) return 3872;
							else if (West == West::Side) return 3873;
							else return 3874;
						else
							if (West == West::Up) return 3875;
							else if (West == West::Side) return 3876;
							else return 3877;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 3878;
							else if (West == West::Side) return 3879;
							else return 3880;
						else if (South == South::Side)
							if (West == West::Up) return 3881;
							else if (West == West::Side) return 3882;
							else return 3883;
						else
							if (West == West::Up) return 3884;
							else if (West == West::Side) return 3885;
							else return 3886;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 3887;
							else if (West == West::Side) return 3888;
							else return 3889;
						else if (South == South::Side)
							if (West == West::Up) return 3890;
							else if (West == West::Side) return 3891;
							else return 3892;
						else
							if (West == West::Up) return 3893;
							else if (West == West::Side) return 3894;
							else return 3895;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 3896;
							else if (West == West::Side) return 3897;
							else return 3898;
						else if (South == South::Side)
							if (West == West::Up) return 3899;
							else if (West == West::Side) return 3900;
							else return 3901;
						else
							if (West == West::Up) return 3902;
							else if (West == West::Side) return 3903;
							else return 3904;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 3905;
							else if (West == West::Side) return 3906;
							else return 3907;
						else if (South == South::Side)
							if (West == West::Up) return 3908;
							else if (West == West::Side) return 3909;
							else return 3910;
						else
							if (West == West::Up) return 3911;
							else if (West == West::Side) return 3912;
							else return 3913;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 3914;
							else if (West == West::Side) return 3915;
							else return 3916;
						else if (South == South::Side)
							if (West == West::Up) return 3917;
							else if (West == West::Side) return 3918;
							else return 3919;
						else
							if (West == West::Up) return 3920;
							else if (West == West::Side) return 3921;
							else return 3922;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 3923;
							else if (West == West::Side) return 3924;
							else return 3925;
						else if (South == South::Side)
							if (West == West::Up) return 3926;
							else if (West == West::Side) return 3927;
							else return 3928;
						else
							if (West == West::Up) return 3929;
							else if (West == West::Side) return 3930;
							else return 3931;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 3932;
							else if (West == West::Side) return 3933;
							else return 3934;
						else if (South == South::Side)
							if (West == West::Up) return 3935;
							else if (West == West::Side) return 3936;
							else return 3937;
						else
							if (West == West::Up) return 3938;
							else if (West == West::Side) return 3939;
							else return 3940;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 3941;
							else if (West == West::Side) return 3942;
							else return 3943;
						else if (South == South::Side)
							if (West == West::Up) return 3944;
							else if (West == West::Side) return 3945;
							else return 3946;
						else
							if (West == West::Up) return 3947;
							else if (West == West::Side) return 3948;
							else return 3949;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 3950;
							else if (West == West::Side) return 3951;
							else return 3952;
						else if (South == South::Side)
							if (West == West::Up) return 3953;
							else if (West == West::Side) return 3954;
							else return 3955;
						else
							if (West == West::Up) return 3956;
							else if (West == West::Side) return 3957;
							else return 3958;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 3959;
							else if (West == West::Side) return 3960;
							else return 3961;
						else if (South == South::Side)
							if (West == West::Up) return 3962;
							else if (West == West::Side) return 3963;
							else return 3964;
						else
							if (West == West::Up) return 3965;
							else if (West == West::Side) return 3966;
							else return 3967;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 3968;
							else if (West == West::Side) return 3969;
							else return 3970;
						else if (South == South::Side)
							if (West == West::Up) return 3971;
							else if (West == West::Side) return 3972;
							else return 3973;
						else
							if (West == West::Up) return 3974;
							else if (West == West::Side) return 3975;
							else return 3976;
					else
						if (South == South::Up)
							if (West == West::Up) return 3977;
							else if (West == West::Side) return 3978;
							else return 3979;
						else if (South == South::Side)
							if (West == West::Up) return 3980;
							else if (West == West::Side) return 3981;
							else return 3982;
						else
							if (West == West::Up) return 3983;
							else if (West == West::Side) return 3984;
							else return 3985;
				else if (North == North::Side)
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 3986;
							else if (West == West::Side) return 3987;
							else return 3988;
						else if (South == South::Side)
							if (West == West::Up) return 3989;
							else if (West == West::Side) return 3990;
							else return 3991;
						else
							if (West == West::Up) return 3992;
							else if (West == West::Side) return 3993;
							else return 3994;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 3995;
							else if (West == West::Side) return 3996;
							else return 3997;
						else if (South == South::Side)
							if (West == West::Up) return 3998;
							else if (West == West::Side) return 3999;
							else return 4000;
						else
							if (West == West::Up) return 4001;
							else if (West == West::Side) return 4002;
							else return 4003;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 4004;
							else if (West == West::Side) return 4005;
							else return 4006;
						else if (South == South::Side)
							if (West == West::Up) return 4007;
							else if (West == West::Side) return 4008;
							else return 4009;
						else
							if (West == West::Up) return 4010;
							else if (West == West::Side) return 4011;
							else return 4012;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 4013;
							else if (West == West::Side) return 4014;
							else return 4015;
						else if (South == South::Side)
							if (West == West::Up) return 4016;
							else if (West == West::Side) return 4017;
							else return 4018;
						else
							if (West == West::Up) return 4019;
							else if (West == West::Side) return 4020;
							else return 4021;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 4022;
							else if (West == West::Side) return 4023;
							else return 4024;
						else if (South == South::Side)
							if (West == West::Up) return 4025;
							else if (West == West::Side) return 4026;
							else return 4027;
						else
							if (West == West::Up) return 4028;
							else if (West == West::Side) return 4029;
							else return 4030;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 4031;
							else if (West == West::Side) return 4032;
							else return 4033;
						else if (South == South::Side)
							if (West == West::Up) return 4034;
							else if (West == West::Side) return 4035;
							else return 4036;
						else
							if (West == West::Up) return 4037;
							else if (West == West::Side) return 4038;
							else return 4039;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 4040;
							else if (West == West::Side) return 4041;
							else return 4042;
						else if (South == South::Side)
							if (West == West::Up) return 4043;
							else if (West == West::Side) return 4044;
							else return 4045;
						else
							if (West == West::Up) return 4046;
							else if (West == West::Side) return 4047;
							else return 4048;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 4049;
							else if (West == West::Side) return 4050;
							else return 4051;
						else if (South == South::Side)
							if (West == West::Up) return 4052;
							else if (West == West::Side) return 4053;
							else return 4054;
						else
							if (West == West::Up) return 4055;
							else if (West == West::Side) return 4056;
							else return 4057;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 4058;
							else if (West == West::Side) return 4059;
							else return 4060;
						else if (South == South::Side)
							if (West == West::Up) return 4061;
							else if (West == West::Side) return 4062;
							else return 4063;
						else
							if (West == West::Up) return 4064;
							else if (West == West::Side) return 4065;
							else return 4066;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 4067;
							else if (West == West::Side) return 4068;
							else return 4069;
						else if (South == South::Side)
							if (West == West::Up) return 4070;
							else if (West == West::Side) return 4071;
							else return 4072;
						else
							if (West == West::Up) return 4073;
							else if (West == West::Side) return 4074;
							else return 4075;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 4076;
							else if (West == West::Side) return 4077;
							else return 4078;
						else if (South == South::Side)
							if (West == West::Up) return 4079;
							else if (West == West::Side) return 4080;
							else return 4081;
						else
							if (West == West::Up) return 4082;
							else if (West == West::Side) return 4083;
							else return 4084;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 4085;
							else if (West == West::Side) return 4086;
							else return 4087;
						else if (South == South::Side)
							if (West == West::Up) return 4088;
							else if (West == West::Side) return 4089;
							else return 4090;
						else
							if (West == West::Up) return 4091;
							else if (West == West::Side) return 4092;
							else return 4093;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 4094;
							else if (West == West::Side) return 4095;
							else return 4096;
						else if (South == South::Side)
							if (West == West::Up) return 4097;
							else if (West == West::Side) return 4098;
							else return 4099;
						else
							if (West == West::Up) return 4100;
							else if (West == West::Side) return 4101;
							else return 4102;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 4103;
							else if (West == West::Side) return 4104;
							else return 4105;
						else if (South == South::Side)
							if (West == West::Up) return 4106;
							else if (West == West::Side) return 4107;
							else return 4108;
						else
							if (West == West::Up) return 4109;
							else if (West == West::Side) return 4110;
							else return 4111;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 4112;
							else if (West == West::Side) return 4113;
							else return 4114;
						else if (South == South::Side)
							if (West == West::Up) return 4115;
							else if (West == West::Side) return 4116;
							else return 4117;
						else
							if (West == West::Up) return 4118;
							else if (West == West::Side) return 4119;
							else return 4120;
					else
						if (South == South::Up)
							if (West == West::Up) return 4121;
							else if (West == West::Side) return 4122;
							else return 4123;
						else if (South == South::Side)
							if (West == West::Up) return 4124;
							else if (West == West::Side) return 4125;
							else return 4126;
						else
							if (West == West::Up) return 4127;
							else if (West == West::Side) return 4128;
							else return 4129;
				else
					if (Power == 0)
						if (South == South::Up)
							if (West == West::Up) return 4130;
							else if (West == West::Side) return 4131;
							else return 4132;
						else if (South == South::Side)
							if (West == West::Up) return 4133;
							else if (West == West::Side) return 4134;
							else return 4135;
						else
							if (West == West::Up) return 4136;
							else if (West == West::Side) return 4137;
							else return 4138;
					else if (Power == 1)
						if (South == South::Up)
							if (West == West::Up) return 4139;
							else if (West == West::Side) return 4140;
							else return 4141;
						else if (South == South::Side)
							if (West == West::Up) return 4142;
							else if (West == West::Side) return 4143;
							else return 4144;
						else
							if (West == West::Up) return 4145;
							else if (West == West::Side) return 4146;
							else return 4147;
					else if (Power == 2)
						if (South == South::Up)
							if (West == West::Up) return 4148;
							else if (West == West::Side) return 4149;
							else return 4150;
						else if (South == South::Side)
							if (West == West::Up) return 4151;
							else if (West == West::Side) return 4152;
							else return 4153;
						else
							if (West == West::Up) return 4154;
							else if (West == West::Side) return 4155;
							else return 4156;
					else if (Power == 3)
						if (South == South::Up)
							if (West == West::Up) return 4157;
							else if (West == West::Side) return 4158;
							else return 4159;
						else if (South == South::Side)
							if (West == West::Up) return 4160;
							else if (West == West::Side) return 4161;
							else return 4162;
						else
							if (West == West::Up) return 4163;
							else if (West == West::Side) return 4164;
							else return 4165;
					else if (Power == 4)
						if (South == South::Up)
							if (West == West::Up) return 4166;
							else if (West == West::Side) return 4167;
							else return 4168;
						else if (South == South::Side)
							if (West == West::Up) return 4169;
							else if (West == West::Side) return 4170;
							else return 4171;
						else
							if (West == West::Up) return 4172;
							else if (West == West::Side) return 4173;
							else return 4174;
					else if (Power == 5)
						if (South == South::Up)
							if (West == West::Up) return 4175;
							else if (West == West::Side) return 4176;
							else return 4177;
						else if (South == South::Side)
							if (West == West::Up) return 4178;
							else if (West == West::Side) return 4179;
							else return 4180;
						else
							if (West == West::Up) return 4181;
							else if (West == West::Side) return 4182;
							else return 4183;
					else if (Power == 6)
						if (South == South::Up)
							if (West == West::Up) return 4184;
							else if (West == West::Side) return 4185;
							else return 4186;
						else if (South == South::Side)
							if (West == West::Up) return 4187;
							else if (West == West::Side) return 4188;
							else return 4189;
						else
							if (West == West::Up) return 4190;
							else if (West == West::Side) return 4191;
							else return 4192;
					else if (Power == 7)
						if (South == South::Up)
							if (West == West::Up) return 4193;
							else if (West == West::Side) return 4194;
							else return 4195;
						else if (South == South::Side)
							if (West == West::Up) return 4196;
							else if (West == West::Side) return 4197;
							else return 4198;
						else
							if (West == West::Up) return 4199;
							else if (West == West::Side) return 4200;
							else return 4201;
					else if (Power == 8)
						if (South == South::Up)
							if (West == West::Up) return 4202;
							else if (West == West::Side) return 4203;
							else return 4204;
						else if (South == South::Side)
							if (West == West::Up) return 4205;
							else if (West == West::Side) return 4206;
							else return 4207;
						else
							if (West == West::Up) return 4208;
							else if (West == West::Side) return 4209;
							else return 4210;
					else if (Power == 9)
						if (South == South::Up)
							if (West == West::Up) return 4211;
							else if (West == West::Side) return 4212;
							else return 4213;
						else if (South == South::Side)
							if (West == West::Up) return 4214;
							else if (West == West::Side) return 4215;
							else return 4216;
						else
							if (West == West::Up) return 4217;
							else if (West == West::Side) return 4218;
							else return 4219;
					else if (Power == 10)
						if (South == South::Up)
							if (West == West::Up) return 4220;
							else if (West == West::Side) return 4221;
							else return 4222;
						else if (South == South::Side)
							if (West == West::Up) return 4223;
							else if (West == West::Side) return 4224;
							else return 4225;
						else
							if (West == West::Up) return 4226;
							else if (West == West::Side) return 4227;
							else return 4228;
					else if (Power == 11)
						if (South == South::Up)
							if (West == West::Up) return 4229;
							else if (West == West::Side) return 4230;
							else return 4231;
						else if (South == South::Side)
							if (West == West::Up) return 4232;
							else if (West == West::Side) return 4233;
							else return 4234;
						else
							if (West == West::Up) return 4235;
							else if (West == West::Side) return 4236;
							else return 4237;
					else if (Power == 12)
						if (South == South::Up)
							if (West == West::Up) return 4238;
							else if (West == West::Side) return 4239;
							else return 4240;
						else if (South == South::Side)
							if (West == West::Up) return 4241;
							else if (West == West::Side) return 4242;
							else return 4243;
						else
							if (West == West::Up) return 4244;
							else if (West == West::Side) return 4245;
							else return 4246;
					else if (Power == 13)
						if (South == South::Up)
							if (West == West::Up) return 4247;
							else if (West == West::Side) return 4248;
							else return 4249;
						else if (South == South::Side)
							if (West == West::Up) return 4250;
							else if (West == West::Side) return 4251;
							else return 4252;
						else
							if (West == West::Up) return 4253;
							else if (West == West::Side) return 4254;
							else return 4255;
					else if (Power == 14)
						if (South == South::Up)
							if (West == West::Up) return 4256;
							else if (West == West::Side) return 4257;
							else return 4258;
						else if (South == South::Side)
							if (West == West::Up) return 4259;
							else if (West == West::Side) return 4260;
							else return 4261;
						else
							if (West == West::Up) return 4262;
							else if (West == West::Side) return 4263;
							else return 4264;
					else
						if (South == South::Up)
							if (West == West::Up) return 4265;
							else if (West == West::Side) return 4266;
							else return 4267;
						else if (South == South::Side)
							if (West == West::Up) return 4268;
							else if (West == West::Side) return 4269;
							else return 4270;
						else
							if (West == West::Up) return 4271;
							else if (West == West::Side) return 4272;
							else return 4273;
		}
		BlockState RedstoneWire();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		int Power(BlockState Block);
		enum South South(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace ReinforcedDeepslate
	{
		constexpr BlockState ReinforcedDeepslate()
		{
			return 26573;
		}
	}
	namespace Repeater
	{
		constexpr BlockState Repeater(const int Delay, const eBlockFace Facing, const bool Locked, const bool Powered)
		{
			if (Delay == 1)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 5881;
						else return 5882;
					else
						if (Powered) return 5883;
						else return 5884;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 5885;
						else return 5886;
					else
						if (Powered) return 5887;
						else return 5888;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 5889;
						else return 5890;
					else
						if (Powered) return 5891;
						else return 5892;
				else
					if (Locked)
						if (Powered) return 5893;
						else return 5894;
					else
						if (Powered) return 5895;
						else return 5896;
			else if (Delay == 2)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 5897;
						else return 5898;
					else
						if (Powered) return 5899;
						else return 5900;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 5901;
						else return 5902;
					else
						if (Powered) return 5903;
						else return 5904;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 5905;
						else return 5906;
					else
						if (Powered) return 5907;
						else return 5908;
				else
					if (Locked)
						if (Powered) return 5909;
						else return 5910;
					else
						if (Powered) return 5911;
						else return 5912;
			else if (Delay == 3)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 5913;
						else return 5914;
					else
						if (Powered) return 5915;
						else return 5916;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 5917;
						else return 5918;
					else
						if (Powered) return 5919;
						else return 5920;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 5921;
						else return 5922;
					else
						if (Powered) return 5923;
						else return 5924;
				else
					if (Locked)
						if (Powered) return 5925;
						else return 5926;
					else
						if (Powered) return 5927;
						else return 5928;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Locked)
						if (Powered) return 5929;
						else return 5930;
					else
						if (Powered) return 5931;
						else return 5932;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Locked)
						if (Powered) return 5933;
						else return 5934;
					else
						if (Powered) return 5935;
						else return 5936;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Locked)
						if (Powered) return 5937;
						else return 5938;
					else
						if (Powered) return 5939;
						else return 5940;
				else
					if (Locked)
						if (Powered) return 5941;
						else return 5942;
					else
						if (Powered) return 5943;
						else return 5944;
		}
		BlockState Repeater();
		int Delay(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Locked(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace RepeatingCommandBlock
	{
		constexpr BlockState RepeatingCommandBlock(const bool Conditional, const eBlockFace Facing)
		{
			if (Conditional)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12515;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12516;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12517;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12518;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12519;
				else return 12520;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12521;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12522;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12523;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12524;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12525;
				else return 12526;
		}
		BlockState RepeatingCommandBlock();
		bool Conditional(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace RespawnAnchor
	{
		constexpr BlockState RespawnAnchor(const int Charges)
		{
			if (Charges == 0) return 19450;
			else if (Charges == 1) return 19451;
			else if (Charges == 2) return 19452;
			else if (Charges == 3) return 19453;
			else return 19454;
		}
		BlockState RespawnAnchor();
		int Charges(BlockState Block);
	}
	namespace RootedDirt
	{
		constexpr BlockState RootedDirt()
		{
			return 24902;
		}
	}
	namespace RoseBush
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState RoseBush(const enum Half Half)
		{
			if (Half == Half::Upper) return 10751;
			else return 10752;
		}
		BlockState RoseBush();
		enum Half Half(BlockState Block);
	}
	namespace Sand
	{
		constexpr BlockState Sand()
		{
			return 112;
		}
	}
	namespace Sandstone
	{
		constexpr BlockState Sandstone()
		{
			return 535;
		}
	}
	namespace SandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11234;
				else return 11235;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11236;
				else return 11237;
			else
				if (Waterlogged) return 11238;
				else return 11239;
		}
		BlockState SandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7431;
						else return 7432;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7433;
						else return 7434;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7435;
						else return 7436;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7437;
						else return 7438;
					else
						if (Waterlogged) return 7439;
						else return 7440;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7441;
						else return 7442;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7443;
						else return 7444;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7445;
						else return 7446;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7447;
						else return 7448;
					else
						if (Waterlogged) return 7449;
						else return 7450;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7451;
						else return 7452;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7453;
						else return 7454;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7455;
						else return 7456;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7457;
						else return 7458;
					else
						if (Waterlogged) return 7459;
						else return 7460;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7461;
						else return 7462;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7463;
						else return 7464;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7465;
						else return 7466;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7467;
						else return 7468;
					else
						if (Waterlogged) return 7469;
						else return 7470;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7471;
						else return 7472;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7473;
						else return 7474;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7475;
						else return 7476;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7477;
						else return 7478;
					else
						if (Waterlogged) return 7479;
						else return 7480;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7481;
						else return 7482;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7483;
						else return 7484;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7485;
						else return 7486;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7487;
						else return 7488;
					else
						if (Waterlogged) return 7489;
						else return 7490;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7491;
						else return 7492;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7493;
						else return 7494;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7495;
						else return 7496;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7497;
						else return 7498;
					else
						if (Waterlogged) return 7499;
						else return 7500;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7501;
						else return 7502;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7503;
						else return 7504;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7505;
						else return 7506;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7507;
						else return 7508;
					else
						if (Waterlogged) return 7509;
						else return 7510;
		}
		BlockState SandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SandstoneWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState SandstoneWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17400;
								else if (West == West::Low) return 17401;
								else return 17402;
							else
								if (West == West::None) return 17403;
								else if (West == West::Low) return 17404;
								else return 17405;
						else
							if (Waterlogged)
								if (West == West::None) return 17406;
								else if (West == West::Low) return 17407;
								else return 17408;
							else
								if (West == West::None) return 17409;
								else if (West == West::Low) return 17410;
								else return 17411;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17412;
								else if (West == West::Low) return 17413;
								else return 17414;
							else
								if (West == West::None) return 17415;
								else if (West == West::Low) return 17416;
								else return 17417;
						else
							if (Waterlogged)
								if (West == West::None) return 17418;
								else if (West == West::Low) return 17419;
								else return 17420;
							else
								if (West == West::None) return 17421;
								else if (West == West::Low) return 17422;
								else return 17423;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17424;
								else if (West == West::Low) return 17425;
								else return 17426;
							else
								if (West == West::None) return 17427;
								else if (West == West::Low) return 17428;
								else return 17429;
						else
							if (Waterlogged)
								if (West == West::None) return 17430;
								else if (West == West::Low) return 17431;
								else return 17432;
							else
								if (West == West::None) return 17433;
								else if (West == West::Low) return 17434;
								else return 17435;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17436;
								else if (West == West::Low) return 17437;
								else return 17438;
							else
								if (West == West::None) return 17439;
								else if (West == West::Low) return 17440;
								else return 17441;
						else
							if (Waterlogged)
								if (West == West::None) return 17442;
								else if (West == West::Low) return 17443;
								else return 17444;
							else
								if (West == West::None) return 17445;
								else if (West == West::Low) return 17446;
								else return 17447;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17448;
								else if (West == West::Low) return 17449;
								else return 17450;
							else
								if (West == West::None) return 17451;
								else if (West == West::Low) return 17452;
								else return 17453;
						else
							if (Waterlogged)
								if (West == West::None) return 17454;
								else if (West == West::Low) return 17455;
								else return 17456;
							else
								if (West == West::None) return 17457;
								else if (West == West::Low) return 17458;
								else return 17459;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17460;
								else if (West == West::Low) return 17461;
								else return 17462;
							else
								if (West == West::None) return 17463;
								else if (West == West::Low) return 17464;
								else return 17465;
						else
							if (Waterlogged)
								if (West == West::None) return 17466;
								else if (West == West::Low) return 17467;
								else return 17468;
							else
								if (West == West::None) return 17469;
								else if (West == West::Low) return 17470;
								else return 17471;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17472;
								else if (West == West::Low) return 17473;
								else return 17474;
							else
								if (West == West::None) return 17475;
								else if (West == West::Low) return 17476;
								else return 17477;
						else
							if (Waterlogged)
								if (West == West::None) return 17478;
								else if (West == West::Low) return 17479;
								else return 17480;
							else
								if (West == West::None) return 17481;
								else if (West == West::Low) return 17482;
								else return 17483;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17484;
								else if (West == West::Low) return 17485;
								else return 17486;
							else
								if (West == West::None) return 17487;
								else if (West == West::Low) return 17488;
								else return 17489;
						else
							if (Waterlogged)
								if (West == West::None) return 17490;
								else if (West == West::Low) return 17491;
								else return 17492;
							else
								if (West == West::None) return 17493;
								else if (West == West::Low) return 17494;
								else return 17495;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17496;
								else if (West == West::Low) return 17497;
								else return 17498;
							else
								if (West == West::None) return 17499;
								else if (West == West::Low) return 17500;
								else return 17501;
						else
							if (Waterlogged)
								if (West == West::None) return 17502;
								else if (West == West::Low) return 17503;
								else return 17504;
							else
								if (West == West::None) return 17505;
								else if (West == West::Low) return 17506;
								else return 17507;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17508;
								else if (West == West::Low) return 17509;
								else return 17510;
							else
								if (West == West::None) return 17511;
								else if (West == West::Low) return 17512;
								else return 17513;
						else
							if (Waterlogged)
								if (West == West::None) return 17514;
								else if (West == West::Low) return 17515;
								else return 17516;
							else
								if (West == West::None) return 17517;
								else if (West == West::Low) return 17518;
								else return 17519;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17520;
								else if (West == West::Low) return 17521;
								else return 17522;
							else
								if (West == West::None) return 17523;
								else if (West == West::Low) return 17524;
								else return 17525;
						else
							if (Waterlogged)
								if (West == West::None) return 17526;
								else if (West == West::Low) return 17527;
								else return 17528;
							else
								if (West == West::None) return 17529;
								else if (West == West::Low) return 17530;
								else return 17531;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17532;
								else if (West == West::Low) return 17533;
								else return 17534;
							else
								if (West == West::None) return 17535;
								else if (West == West::Low) return 17536;
								else return 17537;
						else
							if (Waterlogged)
								if (West == West::None) return 17538;
								else if (West == West::Low) return 17539;
								else return 17540;
							else
								if (West == West::None) return 17541;
								else if (West == West::Low) return 17542;
								else return 17543;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17544;
								else if (West == West::Low) return 17545;
								else return 17546;
							else
								if (West == West::None) return 17547;
								else if (West == West::Low) return 17548;
								else return 17549;
						else
							if (Waterlogged)
								if (West == West::None) return 17550;
								else if (West == West::Low) return 17551;
								else return 17552;
							else
								if (West == West::None) return 17553;
								else if (West == West::Low) return 17554;
								else return 17555;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17556;
								else if (West == West::Low) return 17557;
								else return 17558;
							else
								if (West == West::None) return 17559;
								else if (West == West::Low) return 17560;
								else return 17561;
						else
							if (Waterlogged)
								if (West == West::None) return 17562;
								else if (West == West::Low) return 17563;
								else return 17564;
							else
								if (West == West::None) return 17565;
								else if (West == West::Low) return 17566;
								else return 17567;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17568;
								else if (West == West::Low) return 17569;
								else return 17570;
							else
								if (West == West::None) return 17571;
								else if (West == West::Low) return 17572;
								else return 17573;
						else
							if (Waterlogged)
								if (West == West::None) return 17574;
								else if (West == West::Low) return 17575;
								else return 17576;
							else
								if (West == West::None) return 17577;
								else if (West == West::Low) return 17578;
								else return 17579;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17580;
								else if (West == West::Low) return 17581;
								else return 17582;
							else
								if (West == West::None) return 17583;
								else if (West == West::Low) return 17584;
								else return 17585;
						else
							if (Waterlogged)
								if (West == West::None) return 17586;
								else if (West == West::Low) return 17587;
								else return 17588;
							else
								if (West == West::None) return 17589;
								else if (West == West::Low) return 17590;
								else return 17591;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17592;
								else if (West == West::Low) return 17593;
								else return 17594;
							else
								if (West == West::None) return 17595;
								else if (West == West::Low) return 17596;
								else return 17597;
						else
							if (Waterlogged)
								if (West == West::None) return 17598;
								else if (West == West::Low) return 17599;
								else return 17600;
							else
								if (West == West::None) return 17601;
								else if (West == West::Low) return 17602;
								else return 17603;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17604;
								else if (West == West::Low) return 17605;
								else return 17606;
							else
								if (West == West::None) return 17607;
								else if (West == West::Low) return 17608;
								else return 17609;
						else
							if (Waterlogged)
								if (West == West::None) return 17610;
								else if (West == West::Low) return 17611;
								else return 17612;
							else
								if (West == West::None) return 17613;
								else if (West == West::Low) return 17614;
								else return 17615;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17616;
								else if (West == West::Low) return 17617;
								else return 17618;
							else
								if (West == West::None) return 17619;
								else if (West == West::Low) return 17620;
								else return 17621;
						else
							if (Waterlogged)
								if (West == West::None) return 17622;
								else if (West == West::Low) return 17623;
								else return 17624;
							else
								if (West == West::None) return 17625;
								else if (West == West::Low) return 17626;
								else return 17627;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17628;
								else if (West == West::Low) return 17629;
								else return 17630;
							else
								if (West == West::None) return 17631;
								else if (West == West::Low) return 17632;
								else return 17633;
						else
							if (Waterlogged)
								if (West == West::None) return 17634;
								else if (West == West::Low) return 17635;
								else return 17636;
							else
								if (West == West::None) return 17637;
								else if (West == West::Low) return 17638;
								else return 17639;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17640;
								else if (West == West::Low) return 17641;
								else return 17642;
							else
								if (West == West::None) return 17643;
								else if (West == West::Low) return 17644;
								else return 17645;
						else
							if (Waterlogged)
								if (West == West::None) return 17646;
								else if (West == West::Low) return 17647;
								else return 17648;
							else
								if (West == West::None) return 17649;
								else if (West == West::Low) return 17650;
								else return 17651;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17652;
								else if (West == West::Low) return 17653;
								else return 17654;
							else
								if (West == West::None) return 17655;
								else if (West == West::Low) return 17656;
								else return 17657;
						else
							if (Waterlogged)
								if (West == West::None) return 17658;
								else if (West == West::Low) return 17659;
								else return 17660;
							else
								if (West == West::None) return 17661;
								else if (West == West::Low) return 17662;
								else return 17663;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17664;
								else if (West == West::Low) return 17665;
								else return 17666;
							else
								if (West == West::None) return 17667;
								else if (West == West::Low) return 17668;
								else return 17669;
						else
							if (Waterlogged)
								if (West == West::None) return 17670;
								else if (West == West::Low) return 17671;
								else return 17672;
							else
								if (West == West::None) return 17673;
								else if (West == West::Low) return 17674;
								else return 17675;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17676;
								else if (West == West::Low) return 17677;
								else return 17678;
							else
								if (West == West::None) return 17679;
								else if (West == West::Low) return 17680;
								else return 17681;
						else
							if (Waterlogged)
								if (West == West::None) return 17682;
								else if (West == West::Low) return 17683;
								else return 17684;
							else
								if (West == West::None) return 17685;
								else if (West == West::Low) return 17686;
								else return 17687;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17688;
								else if (West == West::Low) return 17689;
								else return 17690;
							else
								if (West == West::None) return 17691;
								else if (West == West::Low) return 17692;
								else return 17693;
						else
							if (Waterlogged)
								if (West == West::None) return 17694;
								else if (West == West::Low) return 17695;
								else return 17696;
							else
								if (West == West::None) return 17697;
								else if (West == West::Low) return 17698;
								else return 17699;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17700;
								else if (West == West::Low) return 17701;
								else return 17702;
							else
								if (West == West::None) return 17703;
								else if (West == West::Low) return 17704;
								else return 17705;
						else
							if (Waterlogged)
								if (West == West::None) return 17706;
								else if (West == West::Low) return 17707;
								else return 17708;
							else
								if (West == West::None) return 17709;
								else if (West == West::Low) return 17710;
								else return 17711;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 17712;
								else if (West == West::Low) return 17713;
								else return 17714;
							else
								if (West == West::None) return 17715;
								else if (West == West::Low) return 17716;
								else return 17717;
						else
							if (Waterlogged)
								if (West == West::None) return 17718;
								else if (West == West::Low) return 17719;
								else return 17720;
							else
								if (West == West::None) return 17721;
								else if (West == West::Low) return 17722;
								else return 17723;
		}
		BlockState SandstoneWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace Scaffolding
	{
		constexpr BlockState Scaffolding(const bool Bottom, const int Distance, const bool Waterlogged)
		{
			if (Bottom)
				if (Distance == 0)
					if (Waterlogged) return 18372;
					else return 18373;
				else if (Distance == 1)
					if (Waterlogged) return 18374;
					else return 18375;
				else if (Distance == 2)
					if (Waterlogged) return 18376;
					else return 18377;
				else if (Distance == 3)
					if (Waterlogged) return 18378;
					else return 18379;
				else if (Distance == 4)
					if (Waterlogged) return 18380;
					else return 18381;
				else if (Distance == 5)
					if (Waterlogged) return 18382;
					else return 18383;
				else if (Distance == 6)
					if (Waterlogged) return 18384;
					else return 18385;
				else
					if (Waterlogged) return 18386;
					else return 18387;
			else
				if (Distance == 0)
					if (Waterlogged) return 18388;
					else return 18389;
				else if (Distance == 1)
					if (Waterlogged) return 18390;
					else return 18391;
				else if (Distance == 2)
					if (Waterlogged) return 18392;
					else return 18393;
				else if (Distance == 3)
					if (Waterlogged) return 18394;
					else return 18395;
				else if (Distance == 4)
					if (Waterlogged) return 18396;
					else return 18397;
				else if (Distance == 5)
					if (Waterlogged) return 18398;
					else return 18399;
				else if (Distance == 6)
					if (Waterlogged) return 18400;
					else return 18401;
				else
					if (Waterlogged) return 18402;
					else return 18403;
		}
		BlockState Scaffolding();
		bool Bottom(BlockState Block);
		int Distance(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Sculk
	{
		constexpr BlockState Sculk()
		{
			return 22799;
		}
	}
	namespace SculkCatalyst
	{
		constexpr BlockState SculkCatalyst(const bool Bloom)
		{
			if (Bloom) return 22928;
			else return 22929;
		}
		BlockState SculkCatalyst();
		bool Bloom(BlockState Block);
	}
	namespace SculkSensor
	{
		enum class SculkSensorPhase
		{
			Inactive,
			Active,
			Cooldown,
		};
		constexpr BlockState SculkSensor(const int Power, const enum SculkSensorPhase SculkSensorPhase, const bool Waterlogged)
		{
			if (Power == 0)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22319;
					else return 22320;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22321;
					else return 22322;
				else
					if (Waterlogged) return 22323;
					else return 22324;
			else if (Power == 1)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22325;
					else return 22326;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22327;
					else return 22328;
				else
					if (Waterlogged) return 22329;
					else return 22330;
			else if (Power == 2)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22331;
					else return 22332;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22333;
					else return 22334;
				else
					if (Waterlogged) return 22335;
					else return 22336;
			else if (Power == 3)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22337;
					else return 22338;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22339;
					else return 22340;
				else
					if (Waterlogged) return 22341;
					else return 22342;
			else if (Power == 4)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22343;
					else return 22344;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22345;
					else return 22346;
				else
					if (Waterlogged) return 22347;
					else return 22348;
			else if (Power == 5)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22349;
					else return 22350;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22351;
					else return 22352;
				else
					if (Waterlogged) return 22353;
					else return 22354;
			else if (Power == 6)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22355;
					else return 22356;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22357;
					else return 22358;
				else
					if (Waterlogged) return 22359;
					else return 22360;
			else if (Power == 7)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22361;
					else return 22362;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22363;
					else return 22364;
				else
					if (Waterlogged) return 22365;
					else return 22366;
			else if (Power == 8)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22367;
					else return 22368;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22369;
					else return 22370;
				else
					if (Waterlogged) return 22371;
					else return 22372;
			else if (Power == 9)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22373;
					else return 22374;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22375;
					else return 22376;
				else
					if (Waterlogged) return 22377;
					else return 22378;
			else if (Power == 10)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22379;
					else return 22380;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22381;
					else return 22382;
				else
					if (Waterlogged) return 22383;
					else return 22384;
			else if (Power == 11)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22385;
					else return 22386;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22387;
					else return 22388;
				else
					if (Waterlogged) return 22389;
					else return 22390;
			else if (Power == 12)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22391;
					else return 22392;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22393;
					else return 22394;
				else
					if (Waterlogged) return 22395;
					else return 22396;
			else if (Power == 13)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22397;
					else return 22398;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22399;
					else return 22400;
				else
					if (Waterlogged) return 22401;
					else return 22402;
			else if (Power == 14)
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22403;
					else return 22404;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22405;
					else return 22406;
				else
					if (Waterlogged) return 22407;
					else return 22408;
			else
				if (SculkSensorPhase == SculkSensorPhase::Inactive)
					if (Waterlogged) return 22409;
					else return 22410;
				else if (SculkSensorPhase == SculkSensorPhase::Active)
					if (Waterlogged) return 22411;
					else return 22412;
				else
					if (Waterlogged) return 22413;
					else return 22414;
		}
		BlockState SculkSensor();
		int Power(BlockState Block);
		enum SculkSensorPhase SculkSensorPhase(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SculkShrieker
	{
		constexpr BlockState SculkShrieker(const bool CanSummon, const bool Shrieking, const bool Waterlogged)
		{
			if (CanSummon)
				if (Shrieking)
					if (Waterlogged) return 22930;
					else return 22931;
				else
					if (Waterlogged) return 22932;
					else return 22933;
			else
				if (Shrieking)
					if (Waterlogged) return 22934;
					else return 22935;
				else
					if (Waterlogged) return 22936;
					else return 22937;
		}
		BlockState SculkShrieker();
		bool CanSummon(BlockState Block);
		bool Shrieking(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SculkVein
	{
		constexpr BlockState SculkVein(const bool Down, const bool East, const bool North, const bool South, const bool Up, const bool Waterlogged, const bool West)
		{
			if (Down)
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22800;
									else return 22801;
								else
									if (West) return 22802;
									else return 22803;
							else
								if (Waterlogged)
									if (West) return 22804;
									else return 22805;
								else
									if (West) return 22806;
									else return 22807;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22808;
									else return 22809;
								else
									if (West) return 22810;
									else return 22811;
							else
								if (Waterlogged)
									if (West) return 22812;
									else return 22813;
								else
									if (West) return 22814;
									else return 22815;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22816;
									else return 22817;
								else
									if (West) return 22818;
									else return 22819;
							else
								if (Waterlogged)
									if (West) return 22820;
									else return 22821;
								else
									if (West) return 22822;
									else return 22823;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22824;
									else return 22825;
								else
									if (West) return 22826;
									else return 22827;
							else
								if (Waterlogged)
									if (West) return 22828;
									else return 22829;
								else
									if (West) return 22830;
									else return 22831;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22832;
									else return 22833;
								else
									if (West) return 22834;
									else return 22835;
							else
								if (Waterlogged)
									if (West) return 22836;
									else return 22837;
								else
									if (West) return 22838;
									else return 22839;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22840;
									else return 22841;
								else
									if (West) return 22842;
									else return 22843;
							else
								if (Waterlogged)
									if (West) return 22844;
									else return 22845;
								else
									if (West) return 22846;
									else return 22847;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22848;
									else return 22849;
								else
									if (West) return 22850;
									else return 22851;
							else
								if (Waterlogged)
									if (West) return 22852;
									else return 22853;
								else
									if (West) return 22854;
									else return 22855;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22856;
									else return 22857;
								else
									if (West) return 22858;
									else return 22859;
							else
								if (Waterlogged)
									if (West) return 22860;
									else return 22861;
								else
									if (West) return 22862;
									else return 22863;
			else
				if (East)
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22864;
									else return 22865;
								else
									if (West) return 22866;
									else return 22867;
							else
								if (Waterlogged)
									if (West) return 22868;
									else return 22869;
								else
									if (West) return 22870;
									else return 22871;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22872;
									else return 22873;
								else
									if (West) return 22874;
									else return 22875;
							else
								if (Waterlogged)
									if (West) return 22876;
									else return 22877;
								else
									if (West) return 22878;
									else return 22879;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22880;
									else return 22881;
								else
									if (West) return 22882;
									else return 22883;
							else
								if (Waterlogged)
									if (West) return 22884;
									else return 22885;
								else
									if (West) return 22886;
									else return 22887;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22888;
									else return 22889;
								else
									if (West) return 22890;
									else return 22891;
							else
								if (Waterlogged)
									if (West) return 22892;
									else return 22893;
								else
									if (West) return 22894;
									else return 22895;
				else
					if (North)
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22896;
									else return 22897;
								else
									if (West) return 22898;
									else return 22899;
							else
								if (Waterlogged)
									if (West) return 22900;
									else return 22901;
								else
									if (West) return 22902;
									else return 22903;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22904;
									else return 22905;
								else
									if (West) return 22906;
									else return 22907;
							else
								if (Waterlogged)
									if (West) return 22908;
									else return 22909;
								else
									if (West) return 22910;
									else return 22911;
					else
						if (South)
							if (Up)
								if (Waterlogged)
									if (West) return 22912;
									else return 22913;
								else
									if (West) return 22914;
									else return 22915;
							else
								if (Waterlogged)
									if (West) return 22916;
									else return 22917;
								else
									if (West) return 22918;
									else return 22919;
						else
							if (Up)
								if (Waterlogged)
									if (West) return 22920;
									else return 22921;
								else
									if (West) return 22922;
									else return 22923;
							else
								if (Waterlogged)
									if (West) return 22924;
									else return 22925;
								else
									if (West) return 22926;
									else return 22927;
		}
		BlockState SculkVein();
		bool Down(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace SeaLantern
	{
		constexpr BlockState SeaLantern()
		{
			return 10724;
		}
	}
	namespace SeaPickle
	{
		constexpr BlockState SeaPickle(const int Pickles, const bool Waterlogged)
		{
			if (Pickles == 1)
				if (Waterlogged) return 12933;
				else return 12934;
			else if (Pickles == 2)
				if (Waterlogged) return 12935;
				else return 12936;
			else if (Pickles == 3)
				if (Waterlogged) return 12937;
				else return 12938;
			else
				if (Waterlogged) return 12939;
				else return 12940;
		}
		BlockState SeaPickle();
		int Pickles(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Seagrass
	{
		constexpr BlockState Seagrass()
		{
			return 2008;
		}
	}
	namespace ShortGrass
	{
		constexpr BlockState ShortGrass()
		{
			return 2005;
		}
	}
	namespace Shroomlight
	{
		constexpr BlockState Shroomlight()
		{
			return 18610;
		}
	}
	namespace ShulkerBox
	{
		constexpr BlockState ShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12562;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12563;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12564;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12565;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12566;
			else return 12567;
		}
		BlockState ShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace SkeletonSkull
	{
		constexpr BlockState SkeletonSkull(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 8827;
				else if (Rotation == 1) return 8828;
				else if (Rotation == 2) return 8829;
				else if (Rotation == 3) return 8830;
				else if (Rotation == 4) return 8831;
				else if (Rotation == 5) return 8832;
				else if (Rotation == 6) return 8833;
				else if (Rotation == 7) return 8834;
				else if (Rotation == 8) return 8835;
				else if (Rotation == 9) return 8836;
				else if (Rotation == 10) return 8837;
				else if (Rotation == 11) return 8838;
				else if (Rotation == 12) return 8839;
				else if (Rotation == 13) return 8840;
				else if (Rotation == 14) return 8841;
				else return 8842;
			else
				if (Rotation == 0) return 8843;
				else if (Rotation == 1) return 8844;
				else if (Rotation == 2) return 8845;
				else if (Rotation == 3) return 8846;
				else if (Rotation == 4) return 8847;
				else if (Rotation == 5) return 8848;
				else if (Rotation == 6) return 8849;
				else if (Rotation == 7) return 8850;
				else if (Rotation == 8) return 8851;
				else if (Rotation == 9) return 8852;
				else if (Rotation == 10) return 8853;
				else if (Rotation == 11) return 8854;
				else if (Rotation == 12) return 8855;
				else if (Rotation == 13) return 8856;
				else if (Rotation == 14) return 8857;
				else return 8858;
		}
		BlockState SkeletonSkull();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace SkeletonWallSkull
	{
		constexpr BlockState SkeletonWallSkull(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 8859;
				else return 8860;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 8861;
				else return 8862;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 8863;
				else return 8864;
			else
				if (Powered) return 8865;
				else return 8866;
		}
		BlockState SkeletonWallSkull();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SlimeBlock
	{
		constexpr BlockState SlimeBlock()
		{
			return 10364;
		}
	}
	namespace SmallAmethystBud
	{
		constexpr BlockState SmallAmethystBud(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 21069;
				else return 21070;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 21071;
				else return 21072;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 21073;
				else return 21074;
			else if (Facing == eBlockFace::BLOCK_FACE_XP)
				if (Waterlogged) return 21075;
				else return 21076;
			else if (Facing == eBlockFace::BLOCK_FACE_YP)
				if (Waterlogged) return 21077;
				else return 21078;
			else
				if (Waterlogged) return 21079;
				else return 21080;
		}
		BlockState SmallAmethystBud();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmallDripleaf
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState SmallDripleaf(const eBlockFace Facing, const enum Half Half, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Waterlogged) return 24884;
					else return 24885;
				else
					if (Waterlogged) return 24886;
					else return 24887;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Waterlogged) return 24888;
					else return 24889;
				else
					if (Waterlogged) return 24890;
					else return 24891;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Waterlogged) return 24892;
					else return 24893;
				else
					if (Waterlogged) return 24894;
					else return 24895;
			else
				if (Half == Half::Upper)
					if (Waterlogged) return 24896;
					else return 24897;
				else
					if (Waterlogged) return 24898;
					else return 24899;
		}
		BlockState SmallDripleaf();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmithingTable
	{
		constexpr BlockState SmithingTable()
		{
			return 18466;
		}
	}
	namespace Smoker
	{
		constexpr BlockState Smoker(const eBlockFace Facing, const bool Lit)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit) return 18420;
				else return 18421;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit) return 18422;
				else return 18423;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit) return 18424;
				else return 18425;
			else
				if (Lit) return 18426;
				else return 18427;
		}
		BlockState Smoker();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
	}
	namespace SmoothBasalt
	{
		constexpr BlockState SmoothBasalt()
		{
			return 26557;
		}
	}
	namespace SmoothQuartz
	{
		constexpr BlockState SmoothQuartz()
		{
			return 11308;
		}
	}
	namespace SmoothQuartzSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothQuartzSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14124;
				else return 14125;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14126;
				else return 14127;
			else
				if (Waterlogged) return 14128;
				else return 14129;
		}
		BlockState SmoothQuartzSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothQuartzStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothQuartzStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13602;
						else return 13603;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13604;
						else return 13605;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13606;
						else return 13607;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13608;
						else return 13609;
					else
						if (Waterlogged) return 13610;
						else return 13611;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13612;
						else return 13613;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13614;
						else return 13615;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13616;
						else return 13617;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13618;
						else return 13619;
					else
						if (Waterlogged) return 13620;
						else return 13621;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13622;
						else return 13623;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13624;
						else return 13625;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13626;
						else return 13627;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13628;
						else return 13629;
					else
						if (Waterlogged) return 13630;
						else return 13631;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13632;
						else return 13633;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13634;
						else return 13635;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13636;
						else return 13637;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13638;
						else return 13639;
					else
						if (Waterlogged) return 13640;
						else return 13641;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13642;
						else return 13643;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13644;
						else return 13645;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13646;
						else return 13647;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13648;
						else return 13649;
					else
						if (Waterlogged) return 13650;
						else return 13651;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13652;
						else return 13653;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13654;
						else return 13655;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13656;
						else return 13657;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13658;
						else return 13659;
					else
						if (Waterlogged) return 13660;
						else return 13661;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13662;
						else return 13663;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13664;
						else return 13665;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13666;
						else return 13667;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13668;
						else return 13669;
					else
						if (Waterlogged) return 13670;
						else return 13671;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13672;
						else return 13673;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13674;
						else return 13675;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13676;
						else return 13677;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13678;
						else return 13679;
					else
						if (Waterlogged) return 13680;
						else return 13681;
		}
		BlockState SmoothQuartzStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothRedSandstone
	{
		constexpr BlockState SmoothRedSandstone()
		{
			return 11309;
		}
	}
	namespace SmoothRedSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothRedSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14088;
				else return 14089;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14090;
				else return 14091;
			else
				if (Waterlogged) return 14092;
				else return 14093;
		}
		BlockState SmoothRedSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothRedSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothRedSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13042;
						else return 13043;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13044;
						else return 13045;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13046;
						else return 13047;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13048;
						else return 13049;
					else
						if (Waterlogged) return 13050;
						else return 13051;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13052;
						else return 13053;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13054;
						else return 13055;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13056;
						else return 13057;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13058;
						else return 13059;
					else
						if (Waterlogged) return 13060;
						else return 13061;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13062;
						else return 13063;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13064;
						else return 13065;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13066;
						else return 13067;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13068;
						else return 13069;
					else
						if (Waterlogged) return 13070;
						else return 13071;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13072;
						else return 13073;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13074;
						else return 13075;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13076;
						else return 13077;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13078;
						else return 13079;
					else
						if (Waterlogged) return 13080;
						else return 13081;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13082;
						else return 13083;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13084;
						else return 13085;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13086;
						else return 13087;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13088;
						else return 13089;
					else
						if (Waterlogged) return 13090;
						else return 13091;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13092;
						else return 13093;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13094;
						else return 13095;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13096;
						else return 13097;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13098;
						else return 13099;
					else
						if (Waterlogged) return 13100;
						else return 13101;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13102;
						else return 13103;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13104;
						else return 13105;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13106;
						else return 13107;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13108;
						else return 13109;
					else
						if (Waterlogged) return 13110;
						else return 13111;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13112;
						else return 13113;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13114;
						else return 13115;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13116;
						else return 13117;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13118;
						else return 13119;
					else
						if (Waterlogged) return 13120;
						else return 13121;
		}
		BlockState SmoothRedSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothSandstone
	{
		constexpr BlockState SmoothSandstone()
		{
			return 11307;
		}
	}
	namespace SmoothSandstoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothSandstoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 14118;
				else return 14119;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 14120;
				else return 14121;
			else
				if (Waterlogged) return 14122;
				else return 14123;
		}
		BlockState SmoothSandstoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothSandstoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SmoothSandstoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13522;
						else return 13523;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13524;
						else return 13525;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13526;
						else return 13527;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13528;
						else return 13529;
					else
						if (Waterlogged) return 13530;
						else return 13531;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13532;
						else return 13533;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13534;
						else return 13535;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13536;
						else return 13537;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13538;
						else return 13539;
					else
						if (Waterlogged) return 13540;
						else return 13541;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13542;
						else return 13543;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13544;
						else return 13545;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13546;
						else return 13547;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13548;
						else return 13549;
					else
						if (Waterlogged) return 13550;
						else return 13551;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13552;
						else return 13553;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13554;
						else return 13555;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13556;
						else return 13557;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13558;
						else return 13559;
					else
						if (Waterlogged) return 13560;
						else return 13561;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13562;
						else return 13563;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13564;
						else return 13565;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13566;
						else return 13567;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13568;
						else return 13569;
					else
						if (Waterlogged) return 13570;
						else return 13571;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13572;
						else return 13573;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13574;
						else return 13575;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13576;
						else return 13577;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13578;
						else return 13579;
					else
						if (Waterlogged) return 13580;
						else return 13581;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13582;
						else return 13583;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13584;
						else return 13585;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13586;
						else return 13587;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13588;
						else return 13589;
					else
						if (Waterlogged) return 13590;
						else return 13591;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13592;
						else return 13593;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13594;
						else return 13595;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13596;
						else return 13597;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13598;
						else return 13599;
					else
						if (Waterlogged) return 13600;
						else return 13601;
		}
		BlockState SmoothSandstoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SmoothStone
	{
		constexpr BlockState SmoothStone()
		{
			return 11306;
		}
	}
	namespace SmoothStoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SmoothStoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11228;
				else return 11229;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11230;
				else return 11231;
			else
				if (Waterlogged) return 11232;
				else return 11233;
		}
		BlockState SmoothStoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SnifferEgg
	{
		constexpr BlockState SnifferEgg(const int Hatch)
		{
			if (Hatch == 0) return 12800;
			else if (Hatch == 1) return 12801;
			else return 12802;
		}
		BlockState SnifferEgg();
		int Hatch(BlockState Block);
	}
	namespace Snow
	{
		constexpr BlockState Snow(const int Layers)
		{
			if (Layers == 1) return 5772;
			else if (Layers == 2) return 5773;
			else if (Layers == 3) return 5774;
			else if (Layers == 4) return 5775;
			else if (Layers == 5) return 5776;
			else if (Layers == 6) return 5777;
			else if (Layers == 7) return 5778;
			else return 5779;
		}
		BlockState Snow();
		int Layers(BlockState Block);
	}
	namespace SnowBlock
	{
		constexpr BlockState SnowBlock()
		{
			return 5781;
		}
	}
	namespace SoulCampfire
	{
		constexpr BlockState SoulCampfire(const eBlockFace Facing, const bool Lit, const bool SignalFire, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18543;
						else return 18544;
					else
						if (Waterlogged) return 18545;
						else return 18546;
				else
					if (SignalFire)
						if (Waterlogged) return 18547;
						else return 18548;
					else
						if (Waterlogged) return 18549;
						else return 18550;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18551;
						else return 18552;
					else
						if (Waterlogged) return 18553;
						else return 18554;
				else
					if (SignalFire)
						if (Waterlogged) return 18555;
						else return 18556;
					else
						if (Waterlogged) return 18557;
						else return 18558;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18559;
						else return 18560;
					else
						if (Waterlogged) return 18561;
						else return 18562;
				else
					if (SignalFire)
						if (Waterlogged) return 18563;
						else return 18564;
					else
						if (Waterlogged) return 18565;
						else return 18566;
			else
				if (Lit)
					if (SignalFire)
						if (Waterlogged) return 18567;
						else return 18568;
					else
						if (Waterlogged) return 18569;
						else return 18570;
				else
					if (SignalFire)
						if (Waterlogged) return 18571;
						else return 18572;
					else
						if (Waterlogged) return 18573;
						else return 18574;
		}
		BlockState SoulCampfire();
		eBlockFace Facing(BlockState Block);
		bool Lit(BlockState Block);
		bool SignalFire(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SoulFire
	{
		constexpr BlockState SoulFire()
		{
			return 2872;
		}
	}
	namespace SoulLantern
	{
		constexpr BlockState SoulLantern(const bool Hanging, const bool Waterlogged)
		{
			if (Hanging)
				if (Waterlogged) return 18507;
				else return 18508;
			else
				if (Waterlogged) return 18509;
				else return 18510;
		}
		BlockState SoulLantern();
		bool Hanging(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SoulSand
	{
		constexpr BlockState SoulSand()
		{
			return 5850;
		}
	}
	namespace SoulSoil
	{
		constexpr BlockState SoulSoil()
		{
			return 5851;
		}
	}
	namespace SoulTorch
	{
		constexpr BlockState SoulTorch()
		{
			return 5858;
		}
	}
	namespace SoulWallTorch
	{
		constexpr BlockState SoulWallTorch(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 5859;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 5860;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 5861;
			else return 5862;
		}
		BlockState SoulWallTorch();
		eBlockFace Facing(BlockState Block);
	}
	namespace Spawner
	{
		constexpr BlockState Spawner()
		{
			return 2873;
		}
	}
	namespace Sponge
	{
		constexpr BlockState Sponge()
		{
			return 517;
		}
	}
	namespace SporeBlossom
	{
		constexpr BlockState SporeBlossom()
		{
			return 24823;
		}
	}
	namespace SpruceButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState SpruceButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8635;
					else return 8636;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8637;
					else return 8638;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8639;
					else return 8640;
				else
					if (Powered) return 8641;
					else return 8642;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8643;
					else return 8644;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8645;
					else return 8646;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8647;
					else return 8648;
				else
					if (Powered) return 8649;
					else return 8650;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 8651;
					else return 8652;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 8653;
					else return 8654;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 8655;
					else return 8656;
				else
					if (Powered) return 8657;
					else return 8658;
		}
		BlockState SpruceButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState SpruceDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11822;
							else return 11823;
						else
							if (Powered) return 11824;
							else return 11825;
					else
						if (Open)
							if (Powered) return 11826;
							else return 11827;
						else
							if (Powered) return 11828;
							else return 11829;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11830;
							else return 11831;
						else
							if (Powered) return 11832;
							else return 11833;
					else
						if (Open)
							if (Powered) return 11834;
							else return 11835;
						else
							if (Powered) return 11836;
							else return 11837;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11838;
							else return 11839;
						else
							if (Powered) return 11840;
							else return 11841;
					else
						if (Open)
							if (Powered) return 11842;
							else return 11843;
						else
							if (Powered) return 11844;
							else return 11845;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11846;
							else return 11847;
						else
							if (Powered) return 11848;
							else return 11849;
					else
						if (Open)
							if (Powered) return 11850;
							else return 11851;
						else
							if (Powered) return 11852;
							else return 11853;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11854;
							else return 11855;
						else
							if (Powered) return 11856;
							else return 11857;
					else
						if (Open)
							if (Powered) return 11858;
							else return 11859;
						else
							if (Powered) return 11860;
							else return 11861;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11862;
							else return 11863;
						else
							if (Powered) return 11864;
							else return 11865;
					else
						if (Open)
							if (Powered) return 11866;
							else return 11867;
						else
							if (Powered) return 11868;
							else return 11869;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11870;
							else return 11871;
						else
							if (Powered) return 11872;
							else return 11873;
					else
						if (Open)
							if (Powered) return 11874;
							else return 11875;
						else
							if (Powered) return 11876;
							else return 11877;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 11878;
							else return 11879;
						else
							if (Powered) return 11880;
							else return 11881;
					else
						if (Open)
							if (Powered) return 11882;
							else return 11883;
						else
							if (Powered) return 11884;
							else return 11885;
		}
		BlockState SpruceDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceFence
	{
		constexpr BlockState SpruceFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11566;
							else return 11567;
						else
							if (West) return 11568;
							else return 11569;
					else
						if (Waterlogged)
							if (West) return 11570;
							else return 11571;
						else
							if (West) return 11572;
							else return 11573;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11574;
							else return 11575;
						else
							if (West) return 11576;
							else return 11577;
					else
						if (Waterlogged)
							if (West) return 11578;
							else return 11579;
						else
							if (West) return 11580;
							else return 11581;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 11582;
							else return 11583;
						else
							if (West) return 11584;
							else return 11585;
					else
						if (Waterlogged)
							if (West) return 11586;
							else return 11587;
						else
							if (West) return 11588;
							else return 11589;
				else
					if (South)
						if (Waterlogged)
							if (West) return 11590;
							else return 11591;
						else
							if (West) return 11592;
							else return 11593;
					else
						if (Waterlogged)
							if (West) return 11594;
							else return 11595;
						else
							if (West) return 11596;
							else return 11597;
		}
		BlockState SpruceFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace SpruceFenceGate
	{
		constexpr BlockState SpruceFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 11310;
						else return 11311;
					else
						if (Powered) return 11312;
						else return 11313;
				else
					if (Open)
						if (Powered) return 11314;
						else return 11315;
					else
						if (Powered) return 11316;
						else return 11317;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 11318;
						else return 11319;
					else
						if (Powered) return 11320;
						else return 11321;
				else
					if (Open)
						if (Powered) return 11322;
						else return 11323;
					else
						if (Powered) return 11324;
						else return 11325;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 11326;
						else return 11327;
					else
						if (Powered) return 11328;
						else return 11329;
				else
					if (Open)
						if (Powered) return 11330;
						else return 11331;
					else
						if (Powered) return 11332;
						else return 11333;
			else
				if (InWall)
					if (Open)
						if (Powered) return 11334;
						else return 11335;
					else
						if (Powered) return 11336;
						else return 11337;
				else
					if (Open)
						if (Powered) return 11338;
						else return 11339;
					else
						if (Powered) return 11340;
						else return 11341;
		}
		BlockState SpruceFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace SpruceHangingSign
	{
		constexpr BlockState SpruceHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 4898;
					else return 4899;
				else if (Rotation == 1)
					if (Waterlogged) return 4900;
					else return 4901;
				else if (Rotation == 2)
					if (Waterlogged) return 4902;
					else return 4903;
				else if (Rotation == 3)
					if (Waterlogged) return 4904;
					else return 4905;
				else if (Rotation == 4)
					if (Waterlogged) return 4906;
					else return 4907;
				else if (Rotation == 5)
					if (Waterlogged) return 4908;
					else return 4909;
				else if (Rotation == 6)
					if (Waterlogged) return 4910;
					else return 4911;
				else if (Rotation == 7)
					if (Waterlogged) return 4912;
					else return 4913;
				else if (Rotation == 8)
					if (Waterlogged) return 4914;
					else return 4915;
				else if (Rotation == 9)
					if (Waterlogged) return 4916;
					else return 4917;
				else if (Rotation == 10)
					if (Waterlogged) return 4918;
					else return 4919;
				else if (Rotation == 11)
					if (Waterlogged) return 4920;
					else return 4921;
				else if (Rotation == 12)
					if (Waterlogged) return 4922;
					else return 4923;
				else if (Rotation == 13)
					if (Waterlogged) return 4924;
					else return 4925;
				else if (Rotation == 14)
					if (Waterlogged) return 4926;
					else return 4927;
				else
					if (Waterlogged) return 4928;
					else return 4929;
			else
				if (Rotation == 0)
					if (Waterlogged) return 4930;
					else return 4931;
				else if (Rotation == 1)
					if (Waterlogged) return 4932;
					else return 4933;
				else if (Rotation == 2)
					if (Waterlogged) return 4934;
					else return 4935;
				else if (Rotation == 3)
					if (Waterlogged) return 4936;
					else return 4937;
				else if (Rotation == 4)
					if (Waterlogged) return 4938;
					else return 4939;
				else if (Rotation == 5)
					if (Waterlogged) return 4940;
					else return 4941;
				else if (Rotation == 6)
					if (Waterlogged) return 4942;
					else return 4943;
				else if (Rotation == 7)
					if (Waterlogged) return 4944;
					else return 4945;
				else if (Rotation == 8)
					if (Waterlogged) return 4946;
					else return 4947;
				else if (Rotation == 9)
					if (Waterlogged) return 4948;
					else return 4949;
				else if (Rotation == 10)
					if (Waterlogged) return 4950;
					else return 4951;
				else if (Rotation == 11)
					if (Waterlogged) return 4952;
					else return 4953;
				else if (Rotation == 12)
					if (Waterlogged) return 4954;
					else return 4955;
				else if (Rotation == 13)
					if (Waterlogged) return 4956;
					else return 4957;
				else if (Rotation == 14)
					if (Waterlogged) return 4958;
					else return 4959;
				else
					if (Waterlogged) return 4960;
					else return 4961;
		}
		BlockState SpruceHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceLeaves
	{
		constexpr BlockState SpruceLeaves(const int Distance, const bool Persistent, const bool Waterlogged)
		{
			if (Distance == 1)
				if (Persistent)
					if (Waterlogged) return 265;
					else return 266;
				else
					if (Waterlogged) return 267;
					else return 268;
			else if (Distance == 2)
				if (Persistent)
					if (Waterlogged) return 269;
					else return 270;
				else
					if (Waterlogged) return 271;
					else return 272;
			else if (Distance == 3)
				if (Persistent)
					if (Waterlogged) return 273;
					else return 274;
				else
					if (Waterlogged) return 275;
					else return 276;
			else if (Distance == 4)
				if (Persistent)
					if (Waterlogged) return 277;
					else return 278;
				else
					if (Waterlogged) return 279;
					else return 280;
			else if (Distance == 5)
				if (Persistent)
					if (Waterlogged) return 281;
					else return 282;
				else
					if (Waterlogged) return 283;
					else return 284;
			else if (Distance == 6)
				if (Persistent)
					if (Waterlogged) return 285;
					else return 286;
				else
					if (Waterlogged) return 287;
					else return 288;
			else
				if (Persistent)
					if (Waterlogged) return 289;
					else return 290;
				else
					if (Waterlogged) return 291;
					else return 292;
		}
		BlockState SpruceLeaves();
		int Distance(BlockState Block);
		bool Persistent(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState SpruceLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 133;
			else if (Axis == Axis::Y) return 134;
			else return 135;
		}
		BlockState SpruceLog();
		enum Axis Axis(BlockState Block);
	}
	namespace SprucePlanks
	{
		constexpr BlockState SprucePlanks()
		{
			return 16;
		}
	}
	namespace SprucePressurePlate
	{
		constexpr BlockState SprucePressurePlate(const bool Powered)
		{
			if (Powered) return 5718;
			else return 5719;
		}
		BlockState SprucePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace SpruceSapling
	{
		constexpr BlockState SpruceSapling(const int Stage)
		{
			if (Stage == 0) return 27;
			else return 28;
		}
		BlockState SpruceSapling();
		int Stage(BlockState Block);
	}
	namespace SpruceSign
	{
		constexpr BlockState SpruceSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 4334;
				else return 4335;
			else if (Rotation == 1)
				if (Waterlogged) return 4336;
				else return 4337;
			else if (Rotation == 2)
				if (Waterlogged) return 4338;
				else return 4339;
			else if (Rotation == 3)
				if (Waterlogged) return 4340;
				else return 4341;
			else if (Rotation == 4)
				if (Waterlogged) return 4342;
				else return 4343;
			else if (Rotation == 5)
				if (Waterlogged) return 4344;
				else return 4345;
			else if (Rotation == 6)
				if (Waterlogged) return 4346;
				else return 4347;
			else if (Rotation == 7)
				if (Waterlogged) return 4348;
				else return 4349;
			else if (Rotation == 8)
				if (Waterlogged) return 4350;
				else return 4351;
			else if (Rotation == 9)
				if (Waterlogged) return 4352;
				else return 4353;
			else if (Rotation == 10)
				if (Waterlogged) return 4354;
				else return 4355;
			else if (Rotation == 11)
				if (Waterlogged) return 4356;
				else return 4357;
			else if (Rotation == 12)
				if (Waterlogged) return 4358;
				else return 4359;
			else if (Rotation == 13)
				if (Waterlogged) return 4360;
				else return 4361;
			else if (Rotation == 14)
				if (Waterlogged) return 4362;
				else return 4363;
			else
				if (Waterlogged) return 4364;
				else return 4365;
		}
		BlockState SpruceSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState SpruceSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11168;
				else return 11169;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11170;
				else return 11171;
			else
				if (Waterlogged) return 11172;
				else return 11173;
		}
		BlockState SpruceSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState SpruceStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7666;
						else return 7667;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7668;
						else return 7669;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7670;
						else return 7671;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7672;
						else return 7673;
					else
						if (Waterlogged) return 7674;
						else return 7675;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7676;
						else return 7677;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7678;
						else return 7679;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7680;
						else return 7681;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7682;
						else return 7683;
					else
						if (Waterlogged) return 7684;
						else return 7685;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7686;
						else return 7687;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7688;
						else return 7689;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7690;
						else return 7691;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7692;
						else return 7693;
					else
						if (Waterlogged) return 7694;
						else return 7695;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7696;
						else return 7697;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7698;
						else return 7699;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7700;
						else return 7701;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7702;
						else return 7703;
					else
						if (Waterlogged) return 7704;
						else return 7705;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7706;
						else return 7707;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7708;
						else return 7709;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7710;
						else return 7711;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7712;
						else return 7713;
					else
						if (Waterlogged) return 7714;
						else return 7715;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7716;
						else return 7717;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7718;
						else return 7719;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7720;
						else return 7721;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7722;
						else return 7723;
					else
						if (Waterlogged) return 7724;
						else return 7725;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7726;
						else return 7727;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7728;
						else return 7729;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7730;
						else return 7731;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7732;
						else return 7733;
					else
						if (Waterlogged) return 7734;
						else return 7735;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7736;
						else return 7737;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7738;
						else return 7739;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7740;
						else return 7741;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7742;
						else return 7743;
					else
						if (Waterlogged) return 7744;
						else return 7745;
		}
		BlockState SpruceStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState SpruceTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6025;
							else return 6026;
						else
							if (Waterlogged) return 6027;
							else return 6028;
					else
						if (Powered)
							if (Waterlogged) return 6029;
							else return 6030;
						else
							if (Waterlogged) return 6031;
							else return 6032;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6033;
							else return 6034;
						else
							if (Waterlogged) return 6035;
							else return 6036;
					else
						if (Powered)
							if (Waterlogged) return 6037;
							else return 6038;
						else
							if (Waterlogged) return 6039;
							else return 6040;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6041;
							else return 6042;
						else
							if (Waterlogged) return 6043;
							else return 6044;
					else
						if (Powered)
							if (Waterlogged) return 6045;
							else return 6046;
						else
							if (Waterlogged) return 6047;
							else return 6048;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6049;
							else return 6050;
						else
							if (Waterlogged) return 6051;
							else return 6052;
					else
						if (Powered)
							if (Waterlogged) return 6053;
							else return 6054;
						else
							if (Waterlogged) return 6055;
							else return 6056;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6057;
							else return 6058;
						else
							if (Waterlogged) return 6059;
							else return 6060;
					else
						if (Powered)
							if (Waterlogged) return 6061;
							else return 6062;
						else
							if (Waterlogged) return 6063;
							else return 6064;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6065;
							else return 6066;
						else
							if (Waterlogged) return 6067;
							else return 6068;
					else
						if (Powered)
							if (Waterlogged) return 6069;
							else return 6070;
						else
							if (Waterlogged) return 6071;
							else return 6072;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 6073;
							else return 6074;
						else
							if (Waterlogged) return 6075;
							else return 6076;
					else
						if (Powered)
							if (Waterlogged) return 6077;
							else return 6078;
						else
							if (Waterlogged) return 6079;
							else return 6080;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 6081;
							else return 6082;
						else
							if (Waterlogged) return 6083;
							else return 6084;
					else
						if (Powered)
							if (Waterlogged) return 6085;
							else return 6086;
						else
							if (Waterlogged) return 6087;
							else return 6088;
		}
		BlockState SpruceTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWallHangingSign
	{
		constexpr BlockState SpruceWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5546;
				else return 5547;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5548;
				else return 5549;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5550;
				else return 5551;
			else
				if (Waterlogged) return 5552;
				else return 5553;
		}
		BlockState SpruceWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWallSign
	{
		constexpr BlockState SpruceWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 4770;
				else return 4771;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 4772;
				else return 4773;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 4774;
				else return 4775;
			else
				if (Waterlogged) return 4776;
				else return 4777;
		}
		BlockState SpruceWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace SpruceWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState SpruceWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 192;
			else if (Axis == Axis::Y) return 193;
			else return 194;
		}
		BlockState SpruceWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StickyPiston
	{
		constexpr BlockState StickyPiston(const bool Extended, const eBlockFace Facing)
		{
			if (Extended)
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 1992;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 1993;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 1994;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 1995;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 1996;
				else return 1997;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM) return 1998;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 1999;
				else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2000;
				else if (Facing == eBlockFace::BLOCK_FACE_XP) return 2001;
				else if (Facing == eBlockFace::BLOCK_FACE_YP) return 2002;
				else return 2003;
		}
		BlockState StickyPiston();
		bool Extended(BlockState Block);
		eBlockFace Facing(BlockState Block);
	}
	namespace Stone
	{
		constexpr BlockState Stone()
		{
			return 1;
		}
	}
	namespace StoneBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState StoneBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11264;
				else return 11265;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11266;
				else return 11267;
			else
				if (Waterlogged) return 11268;
				else return 11269;
		}
		BlockState StoneBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState StoneBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7109;
						else return 7110;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7111;
						else return 7112;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7113;
						else return 7114;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7115;
						else return 7116;
					else
						if (Waterlogged) return 7117;
						else return 7118;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7119;
						else return 7120;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7121;
						else return 7122;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7123;
						else return 7124;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7125;
						else return 7126;
					else
						if (Waterlogged) return 7127;
						else return 7128;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7129;
						else return 7130;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7131;
						else return 7132;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7133;
						else return 7134;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7135;
						else return 7136;
					else
						if (Waterlogged) return 7137;
						else return 7138;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7139;
						else return 7140;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7141;
						else return 7142;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7143;
						else return 7144;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7145;
						else return 7146;
					else
						if (Waterlogged) return 7147;
						else return 7148;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7149;
						else return 7150;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7151;
						else return 7152;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7153;
						else return 7154;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7155;
						else return 7156;
					else
						if (Waterlogged) return 7157;
						else return 7158;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7159;
						else return 7160;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7161;
						else return 7162;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7163;
						else return 7164;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7165;
						else return 7166;
					else
						if (Waterlogged) return 7167;
						else return 7168;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7169;
						else return 7170;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7171;
						else return 7172;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7173;
						else return 7174;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7175;
						else return 7176;
					else
						if (Waterlogged) return 7177;
						else return 7178;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 7179;
						else return 7180;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 7181;
						else return 7182;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 7183;
						else return 7184;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 7185;
						else return 7186;
					else
						if (Waterlogged) return 7187;
						else return 7188;
		}
		BlockState StoneBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState StoneBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15780;
								else if (West == West::Low) return 15781;
								else return 15782;
							else
								if (West == West::None) return 15783;
								else if (West == West::Low) return 15784;
								else return 15785;
						else
							if (Waterlogged)
								if (West == West::None) return 15786;
								else if (West == West::Low) return 15787;
								else return 15788;
							else
								if (West == West::None) return 15789;
								else if (West == West::Low) return 15790;
								else return 15791;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15792;
								else if (West == West::Low) return 15793;
								else return 15794;
							else
								if (West == West::None) return 15795;
								else if (West == West::Low) return 15796;
								else return 15797;
						else
							if (Waterlogged)
								if (West == West::None) return 15798;
								else if (West == West::Low) return 15799;
								else return 15800;
							else
								if (West == West::None) return 15801;
								else if (West == West::Low) return 15802;
								else return 15803;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15804;
								else if (West == West::Low) return 15805;
								else return 15806;
							else
								if (West == West::None) return 15807;
								else if (West == West::Low) return 15808;
								else return 15809;
						else
							if (Waterlogged)
								if (West == West::None) return 15810;
								else if (West == West::Low) return 15811;
								else return 15812;
							else
								if (West == West::None) return 15813;
								else if (West == West::Low) return 15814;
								else return 15815;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15816;
								else if (West == West::Low) return 15817;
								else return 15818;
							else
								if (West == West::None) return 15819;
								else if (West == West::Low) return 15820;
								else return 15821;
						else
							if (Waterlogged)
								if (West == West::None) return 15822;
								else if (West == West::Low) return 15823;
								else return 15824;
							else
								if (West == West::None) return 15825;
								else if (West == West::Low) return 15826;
								else return 15827;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15828;
								else if (West == West::Low) return 15829;
								else return 15830;
							else
								if (West == West::None) return 15831;
								else if (West == West::Low) return 15832;
								else return 15833;
						else
							if (Waterlogged)
								if (West == West::None) return 15834;
								else if (West == West::Low) return 15835;
								else return 15836;
							else
								if (West == West::None) return 15837;
								else if (West == West::Low) return 15838;
								else return 15839;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15840;
								else if (West == West::Low) return 15841;
								else return 15842;
							else
								if (West == West::None) return 15843;
								else if (West == West::Low) return 15844;
								else return 15845;
						else
							if (Waterlogged)
								if (West == West::None) return 15846;
								else if (West == West::Low) return 15847;
								else return 15848;
							else
								if (West == West::None) return 15849;
								else if (West == West::Low) return 15850;
								else return 15851;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15852;
								else if (West == West::Low) return 15853;
								else return 15854;
							else
								if (West == West::None) return 15855;
								else if (West == West::Low) return 15856;
								else return 15857;
						else
							if (Waterlogged)
								if (West == West::None) return 15858;
								else if (West == West::Low) return 15859;
								else return 15860;
							else
								if (West == West::None) return 15861;
								else if (West == West::Low) return 15862;
								else return 15863;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15864;
								else if (West == West::Low) return 15865;
								else return 15866;
							else
								if (West == West::None) return 15867;
								else if (West == West::Low) return 15868;
								else return 15869;
						else
							if (Waterlogged)
								if (West == West::None) return 15870;
								else if (West == West::Low) return 15871;
								else return 15872;
							else
								if (West == West::None) return 15873;
								else if (West == West::Low) return 15874;
								else return 15875;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15876;
								else if (West == West::Low) return 15877;
								else return 15878;
							else
								if (West == West::None) return 15879;
								else if (West == West::Low) return 15880;
								else return 15881;
						else
							if (Waterlogged)
								if (West == West::None) return 15882;
								else if (West == West::Low) return 15883;
								else return 15884;
							else
								if (West == West::None) return 15885;
								else if (West == West::Low) return 15886;
								else return 15887;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15888;
								else if (West == West::Low) return 15889;
								else return 15890;
							else
								if (West == West::None) return 15891;
								else if (West == West::Low) return 15892;
								else return 15893;
						else
							if (Waterlogged)
								if (West == West::None) return 15894;
								else if (West == West::Low) return 15895;
								else return 15896;
							else
								if (West == West::None) return 15897;
								else if (West == West::Low) return 15898;
								else return 15899;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15900;
								else if (West == West::Low) return 15901;
								else return 15902;
							else
								if (West == West::None) return 15903;
								else if (West == West::Low) return 15904;
								else return 15905;
						else
							if (Waterlogged)
								if (West == West::None) return 15906;
								else if (West == West::Low) return 15907;
								else return 15908;
							else
								if (West == West::None) return 15909;
								else if (West == West::Low) return 15910;
								else return 15911;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15912;
								else if (West == West::Low) return 15913;
								else return 15914;
							else
								if (West == West::None) return 15915;
								else if (West == West::Low) return 15916;
								else return 15917;
						else
							if (Waterlogged)
								if (West == West::None) return 15918;
								else if (West == West::Low) return 15919;
								else return 15920;
							else
								if (West == West::None) return 15921;
								else if (West == West::Low) return 15922;
								else return 15923;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15924;
								else if (West == West::Low) return 15925;
								else return 15926;
							else
								if (West == West::None) return 15927;
								else if (West == West::Low) return 15928;
								else return 15929;
						else
							if (Waterlogged)
								if (West == West::None) return 15930;
								else if (West == West::Low) return 15931;
								else return 15932;
							else
								if (West == West::None) return 15933;
								else if (West == West::Low) return 15934;
								else return 15935;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15936;
								else if (West == West::Low) return 15937;
								else return 15938;
							else
								if (West == West::None) return 15939;
								else if (West == West::Low) return 15940;
								else return 15941;
						else
							if (Waterlogged)
								if (West == West::None) return 15942;
								else if (West == West::Low) return 15943;
								else return 15944;
							else
								if (West == West::None) return 15945;
								else if (West == West::Low) return 15946;
								else return 15947;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15948;
								else if (West == West::Low) return 15949;
								else return 15950;
							else
								if (West == West::None) return 15951;
								else if (West == West::Low) return 15952;
								else return 15953;
						else
							if (Waterlogged)
								if (West == West::None) return 15954;
								else if (West == West::Low) return 15955;
								else return 15956;
							else
								if (West == West::None) return 15957;
								else if (West == West::Low) return 15958;
								else return 15959;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15960;
								else if (West == West::Low) return 15961;
								else return 15962;
							else
								if (West == West::None) return 15963;
								else if (West == West::Low) return 15964;
								else return 15965;
						else
							if (Waterlogged)
								if (West == West::None) return 15966;
								else if (West == West::Low) return 15967;
								else return 15968;
							else
								if (West == West::None) return 15969;
								else if (West == West::Low) return 15970;
								else return 15971;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15972;
								else if (West == West::Low) return 15973;
								else return 15974;
							else
								if (West == West::None) return 15975;
								else if (West == West::Low) return 15976;
								else return 15977;
						else
							if (Waterlogged)
								if (West == West::None) return 15978;
								else if (West == West::Low) return 15979;
								else return 15980;
							else
								if (West == West::None) return 15981;
								else if (West == West::Low) return 15982;
								else return 15983;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15984;
								else if (West == West::Low) return 15985;
								else return 15986;
							else
								if (West == West::None) return 15987;
								else if (West == West::Low) return 15988;
								else return 15989;
						else
							if (Waterlogged)
								if (West == West::None) return 15990;
								else if (West == West::Low) return 15991;
								else return 15992;
							else
								if (West == West::None) return 15993;
								else if (West == West::Low) return 15994;
								else return 15995;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 15996;
								else if (West == West::Low) return 15997;
								else return 15998;
							else
								if (West == West::None) return 15999;
								else if (West == West::Low) return 16000;
								else return 16001;
						else
							if (Waterlogged)
								if (West == West::None) return 16002;
								else if (West == West::Low) return 16003;
								else return 16004;
							else
								if (West == West::None) return 16005;
								else if (West == West::Low) return 16006;
								else return 16007;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16008;
								else if (West == West::Low) return 16009;
								else return 16010;
							else
								if (West == West::None) return 16011;
								else if (West == West::Low) return 16012;
								else return 16013;
						else
							if (Waterlogged)
								if (West == West::None) return 16014;
								else if (West == West::Low) return 16015;
								else return 16016;
							else
								if (West == West::None) return 16017;
								else if (West == West::Low) return 16018;
								else return 16019;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16020;
								else if (West == West::Low) return 16021;
								else return 16022;
							else
								if (West == West::None) return 16023;
								else if (West == West::Low) return 16024;
								else return 16025;
						else
							if (Waterlogged)
								if (West == West::None) return 16026;
								else if (West == West::Low) return 16027;
								else return 16028;
							else
								if (West == West::None) return 16029;
								else if (West == West::Low) return 16030;
								else return 16031;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16032;
								else if (West == West::Low) return 16033;
								else return 16034;
							else
								if (West == West::None) return 16035;
								else if (West == West::Low) return 16036;
								else return 16037;
						else
							if (Waterlogged)
								if (West == West::None) return 16038;
								else if (West == West::Low) return 16039;
								else return 16040;
							else
								if (West == West::None) return 16041;
								else if (West == West::Low) return 16042;
								else return 16043;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16044;
								else if (West == West::Low) return 16045;
								else return 16046;
							else
								if (West == West::None) return 16047;
								else if (West == West::Low) return 16048;
								else return 16049;
						else
							if (Waterlogged)
								if (West == West::None) return 16050;
								else if (West == West::Low) return 16051;
								else return 16052;
							else
								if (West == West::None) return 16053;
								else if (West == West::Low) return 16054;
								else return 16055;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16056;
								else if (West == West::Low) return 16057;
								else return 16058;
							else
								if (West == West::None) return 16059;
								else if (West == West::Low) return 16060;
								else return 16061;
						else
							if (Waterlogged)
								if (West == West::None) return 16062;
								else if (West == West::Low) return 16063;
								else return 16064;
							else
								if (West == West::None) return 16065;
								else if (West == West::Low) return 16066;
								else return 16067;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16068;
								else if (West == West::Low) return 16069;
								else return 16070;
							else
								if (West == West::None) return 16071;
								else if (West == West::Low) return 16072;
								else return 16073;
						else
							if (Waterlogged)
								if (West == West::None) return 16074;
								else if (West == West::Low) return 16075;
								else return 16076;
							else
								if (West == West::None) return 16077;
								else if (West == West::Low) return 16078;
								else return 16079;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16080;
								else if (West == West::Low) return 16081;
								else return 16082;
							else
								if (West == West::None) return 16083;
								else if (West == West::Low) return 16084;
								else return 16085;
						else
							if (Waterlogged)
								if (West == West::None) return 16086;
								else if (West == West::Low) return 16087;
								else return 16088;
							else
								if (West == West::None) return 16089;
								else if (West == West::Low) return 16090;
								else return 16091;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 16092;
								else if (West == West::Low) return 16093;
								else return 16094;
							else
								if (West == West::None) return 16095;
								else if (West == West::Low) return 16096;
								else return 16097;
						else
							if (Waterlogged)
								if (West == West::None) return 16098;
								else if (West == West::Low) return 16099;
								else return 16100;
							else
								if (West == West::None) return 16101;
								else if (West == West::Low) return 16102;
								else return 16103;
		}
		BlockState StoneBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace StoneBricks
	{
		constexpr BlockState StoneBricks()
		{
			return 6537;
		}
	}
	namespace StoneButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState StoneButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5748;
					else return 5749;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5750;
					else return 5751;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5752;
					else return 5753;
				else
					if (Powered) return 5754;
					else return 5755;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5756;
					else return 5757;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5758;
					else return 5759;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5760;
					else return 5761;
				else
					if (Powered) return 5762;
					else return 5763;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 5764;
					else return 5765;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 5766;
					else return 5767;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 5768;
					else return 5769;
				else
					if (Powered) return 5770;
					else return 5771;
		}
		BlockState StoneButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace StonePressurePlate
	{
		constexpr BlockState StonePressurePlate(const bool Powered)
		{
			if (Powered) return 5650;
			else return 5651;
		}
		BlockState StonePressurePlate();
		bool Powered(BlockState Block);
	}
	namespace StoneSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState StoneSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 11222;
				else return 11223;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 11224;
				else return 11225;
			else
				if (Waterlogged) return 11226;
				else return 11227;
		}
		BlockState StoneSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace StoneStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState StoneStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13442;
						else return 13443;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13444;
						else return 13445;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13446;
						else return 13447;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13448;
						else return 13449;
					else
						if (Waterlogged) return 13450;
						else return 13451;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13452;
						else return 13453;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13454;
						else return 13455;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13456;
						else return 13457;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13458;
						else return 13459;
					else
						if (Waterlogged) return 13460;
						else return 13461;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13462;
						else return 13463;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13464;
						else return 13465;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13466;
						else return 13467;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13468;
						else return 13469;
					else
						if (Waterlogged) return 13470;
						else return 13471;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13472;
						else return 13473;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13474;
						else return 13475;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13476;
						else return 13477;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13478;
						else return 13479;
					else
						if (Waterlogged) return 13480;
						else return 13481;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13482;
						else return 13483;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13484;
						else return 13485;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13486;
						else return 13487;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13488;
						else return 13489;
					else
						if (Waterlogged) return 13490;
						else return 13491;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13492;
						else return 13493;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13494;
						else return 13495;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13496;
						else return 13497;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13498;
						else return 13499;
					else
						if (Waterlogged) return 13500;
						else return 13501;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13502;
						else return 13503;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13504;
						else return 13505;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13506;
						else return 13507;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13508;
						else return 13509;
					else
						if (Waterlogged) return 13510;
						else return 13511;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 13512;
						else return 13513;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 13514;
						else return 13515;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 13516;
						else return 13517;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 13518;
						else return 13519;
					else
						if (Waterlogged) return 13520;
						else return 13521;
		}
		BlockState StoneStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Stonecutter
	{
		constexpr BlockState Stonecutter(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 18467;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 18468;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 18469;
			else return 18470;
		}
		BlockState Stonecutter();
		eBlockFace Facing(BlockState Block);
	}
	namespace StrippedAcaciaLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedAcaciaLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 171;
			else if (Axis == Axis::Y) return 172;
			else return 173;
		}
		BlockState StrippedAcaciaLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedAcaciaWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedAcaciaWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 225;
			else if (Axis == Axis::Y) return 226;
			else return 227;
		}
		BlockState StrippedAcaciaWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBambooBlock
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBambooBlock(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 186;
			else if (Axis == Axis::Y) return 187;
			else return 188;
		}
		BlockState StrippedBambooBlock();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBirchLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBirchLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 165;
			else if (Axis == Axis::Y) return 166;
			else return 167;
		}
		BlockState StrippedBirchLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedBirchWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedBirchWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 219;
			else if (Axis == Axis::Y) return 220;
			else return 221;
		}
		BlockState StrippedBirchWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCherryLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCherryLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 174;
			else if (Axis == Axis::Y) return 175;
			else return 176;
		}
		BlockState StrippedCherryLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCherryWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCherryWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 228;
			else if (Axis == Axis::Y) return 229;
			else return 230;
		}
		BlockState StrippedCherryWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCrimsonHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCrimsonHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18605;
			else if (Axis == Axis::Y) return 18606;
			else return 18607;
		}
		BlockState StrippedCrimsonHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedCrimsonStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedCrimsonStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18599;
			else if (Axis == Axis::Y) return 18600;
			else return 18601;
		}
		BlockState StrippedCrimsonStem();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedDarkOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedDarkOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 177;
			else if (Axis == Axis::Y) return 178;
			else return 179;
		}
		BlockState StrippedDarkOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedDarkOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedDarkOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 231;
			else if (Axis == Axis::Y) return 232;
			else return 233;
		}
		BlockState StrippedDarkOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedJungleLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedJungleLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 168;
			else if (Axis == Axis::Y) return 169;
			else return 170;
		}
		BlockState StrippedJungleLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedJungleWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedJungleWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 222;
			else if (Axis == Axis::Y) return 223;
			else return 224;
		}
		BlockState StrippedJungleWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedMangroveLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedMangroveLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 183;
			else if (Axis == Axis::Y) return 184;
			else return 185;
		}
		BlockState StrippedMangroveLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedMangroveWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedMangroveWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 234;
			else if (Axis == Axis::Y) return 235;
			else return 236;
		}
		BlockState StrippedMangroveWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedOakLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedOakLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 180;
			else if (Axis == Axis::Y) return 181;
			else return 182;
		}
		BlockState StrippedOakLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedOakWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedOakWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 213;
			else if (Axis == Axis::Y) return 214;
			else return 215;
		}
		BlockState StrippedOakWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedSpruceLog
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedSpruceLog(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 162;
			else if (Axis == Axis::Y) return 163;
			else return 164;
		}
		BlockState StrippedSpruceLog();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedSpruceWood
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedSpruceWood(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 216;
			else if (Axis == Axis::Y) return 217;
			else return 218;
		}
		BlockState StrippedSpruceWood();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedWarpedHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedWarpedHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18588;
			else if (Axis == Axis::Y) return 18589;
			else return 18590;
		}
		BlockState StrippedWarpedHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace StrippedWarpedStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState StrippedWarpedStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18582;
			else if (Axis == Axis::Y) return 18583;
			else return 18584;
		}
		BlockState StrippedWarpedStem();
		enum Axis Axis(BlockState Block);
	}
	namespace StructureBlock
	{
		enum class Mode
		{
			Save,
			Load,
			Corner,
			Data,
		};
		constexpr BlockState StructureBlock(const enum Mode Mode)
		{
			if (Mode == Mode::Save) return 19356;
			else if (Mode == Mode::Load) return 19357;
			else if (Mode == Mode::Corner) return 19358;
			else return 19359;
		}
		BlockState StructureBlock();
		enum Mode Mode(BlockState Block);
	}
	namespace StructureVoid
	{
		constexpr BlockState StructureVoid()
		{
			return 12549;
		}
	}
	namespace SugarCane
	{
		constexpr BlockState SugarCane(const int Age)
		{
			if (Age == 0) return 5799;
			else if (Age == 1) return 5800;
			else if (Age == 2) return 5801;
			else if (Age == 3) return 5802;
			else if (Age == 4) return 5803;
			else if (Age == 5) return 5804;
			else if (Age == 6) return 5805;
			else if (Age == 7) return 5806;
			else if (Age == 8) return 5807;
			else if (Age == 9) return 5808;
			else if (Age == 10) return 5809;
			else if (Age == 11) return 5810;
			else if (Age == 12) return 5811;
			else if (Age == 13) return 5812;
			else if (Age == 14) return 5813;
			else return 5814;
		}
		BlockState SugarCane();
		int Age(BlockState Block);
	}
	namespace Sunflower
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState Sunflower(const enum Half Half)
		{
			if (Half == Half::Upper) return 10747;
			else return 10748;
		}
		BlockState Sunflower();
		enum Half Half(BlockState Block);
	}
	namespace SuspiciousGravel
	{
		constexpr BlockState SuspiciousGravel(const int Dusted)
		{
			if (Dusted == 0) return 119;
			else if (Dusted == 1) return 120;
			else if (Dusted == 2) return 121;
			else return 122;
		}
		BlockState SuspiciousGravel();
		int Dusted(BlockState Block);
	}
	namespace SuspiciousSand
	{
		constexpr BlockState SuspiciousSand(const int Dusted)
		{
			if (Dusted == 0) return 113;
			else if (Dusted == 1) return 114;
			else if (Dusted == 2) return 115;
			else return 116;
		}
		BlockState SuspiciousSand();
		int Dusted(BlockState Block);
	}
	namespace SweetBerryBush
	{
		constexpr BlockState SweetBerryBush(const int Age)
		{
			if (Age == 0) return 18575;
			else if (Age == 1) return 18576;
			else if (Age == 2) return 18577;
			else return 18578;
		}
		BlockState SweetBerryBush();
		int Age(BlockState Block);
	}
	namespace TallGrass
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState TallGrass(const enum Half Half)
		{
			if (Half == Half::Upper) return 10755;
			else return 10756;
		}
		BlockState TallGrass();
		enum Half Half(BlockState Block);
	}
	namespace TallSeagrass
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		constexpr BlockState TallSeagrass(const enum Half Half)
		{
			if (Half == Half::Upper) return 2009;
			else return 2010;
		}
		BlockState TallSeagrass();
		enum Half Half(BlockState Block);
	}
	namespace Target
	{
		constexpr BlockState Target(const int Power)
		{
			if (Power == 0) return 19381;
			else if (Power == 1) return 19382;
			else if (Power == 2) return 19383;
			else if (Power == 3) return 19384;
			else if (Power == 4) return 19385;
			else if (Power == 5) return 19386;
			else if (Power == 6) return 19387;
			else if (Power == 7) return 19388;
			else if (Power == 8) return 19389;
			else if (Power == 9) return 19390;
			else if (Power == 10) return 19391;
			else if (Power == 11) return 19392;
			else if (Power == 12) return 19393;
			else if (Power == 13) return 19394;
			else if (Power == 14) return 19395;
			else return 19396;
		}
		BlockState Target();
		int Power(BlockState Block);
	}
	namespace Terracotta
	{
		constexpr BlockState Terracotta()
		{
			return 10744;
		}
	}
	namespace TintedGlass
	{
		constexpr BlockState TintedGlass()
		{
			return 22317;
		}
	}
	namespace Tnt
	{
		constexpr BlockState Tnt(const bool Unstable)
		{
			if (Unstable) return 2094;
			else return 2095;
		}
		BlockState Tnt();
		bool Unstable(BlockState Block);
	}
	namespace Torch
	{
		constexpr BlockState Torch()
		{
			return 2355;
		}
	}
	namespace Torchflower
	{
		constexpr BlockState Torchflower()
		{
			return 2076;
		}
	}
	namespace TorchflowerCrop
	{
		constexpr BlockState TorchflowerCrop(const int Age)
		{
			if (Age == 0) return 12495;
			else return 12496;
		}
		BlockState TorchflowerCrop();
		int Age(BlockState Block);
	}
	namespace TrappedChest
	{
		enum class Type
		{
			Single,
			Left,
			Right,
		};
		constexpr BlockState TrappedChest(const eBlockFace Facing, const enum Type Type, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Type == Type::Single)
					if (Waterlogged) return 9119;
					else return 9120;
				else if (Type == Type::Left)
					if (Waterlogged) return 9121;
					else return 9122;
				else
					if (Waterlogged) return 9123;
					else return 9124;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Type == Type::Single)
					if (Waterlogged) return 9125;
					else return 9126;
				else if (Type == Type::Left)
					if (Waterlogged) return 9127;
					else return 9128;
				else
					if (Waterlogged) return 9129;
					else return 9130;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Type == Type::Single)
					if (Waterlogged) return 9131;
					else return 9132;
				else if (Type == Type::Left)
					if (Waterlogged) return 9133;
					else return 9134;
				else
					if (Waterlogged) return 9135;
					else return 9136;
			else
				if (Type == Type::Single)
					if (Waterlogged) return 9137;
					else return 9138;
				else if (Type == Type::Left)
					if (Waterlogged) return 9139;
					else return 9140;
				else
					if (Waterlogged) return 9141;
					else return 9142;
		}
		BlockState TrappedChest();
		eBlockFace Facing(BlockState Block);
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TrialSpawner
	{
		enum class TrialSpawnerState
		{
			Inactive,
			WaitingForPlayers,
			Active,
			WaitingForRewardEjection,
			EjectingReward,
			Cooldown,
		};
		constexpr BlockState TrialSpawner(const bool Ominous, const enum TrialSpawnerState TrialSpawnerState)
		{
			if (Ominous)
				if (TrialSpawnerState == TrialSpawnerState::Inactive) return 26638;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForPlayers) return 26639;
				else if (TrialSpawnerState == TrialSpawnerState::Active) return 26640;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForRewardEjection) return 26641;
				else if (TrialSpawnerState == TrialSpawnerState::EjectingReward) return 26642;
				else return 26643;
			else
				if (TrialSpawnerState == TrialSpawnerState::Inactive) return 26644;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForPlayers) return 26645;
				else if (TrialSpawnerState == TrialSpawnerState::Active) return 26646;
				else if (TrialSpawnerState == TrialSpawnerState::WaitingForRewardEjection) return 26647;
				else if (TrialSpawnerState == TrialSpawnerState::EjectingReward) return 26648;
				else return 26649;
		}
		BlockState TrialSpawner();
		bool Ominous(BlockState Block);
		enum TrialSpawnerState TrialSpawnerState(BlockState Block);
	}
	namespace Tripwire
	{
		constexpr BlockState Tripwire(const bool Attached, const bool Disarmed, const bool East, const bool North, const bool Powered, const bool South, const bool West)
		{
			if (Attached)
				if (Disarmed)
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 7537;
									else return 7538;
								else
									if (West) return 7539;
									else return 7540;
							else
								if (South)
									if (West) return 7541;
									else return 7542;
								else
									if (West) return 7543;
									else return 7544;
						else
							if (Powered)
								if (South)
									if (West) return 7545;
									else return 7546;
								else
									if (West) return 7547;
									else return 7548;
							else
								if (South)
									if (West) return 7549;
									else return 7550;
								else
									if (West) return 7551;
									else return 7552;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 7553;
									else return 7554;
								else
									if (West) return 7555;
									else return 7556;
							else
								if (South)
									if (West) return 7557;
									else return 7558;
								else
									if (West) return 7559;
									else return 7560;
						else
							if (Powered)
								if (South)
									if (West) return 7561;
									else return 7562;
								else
									if (West) return 7563;
									else return 7564;
							else
								if (South)
									if (West) return 7565;
									else return 7566;
								else
									if (West) return 7567;
									else return 7568;
				else
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 7569;
									else return 7570;
								else
									if (West) return 7571;
									else return 7572;
							else
								if (South)
									if (West) return 7573;
									else return 7574;
								else
									if (West) return 7575;
									else return 7576;
						else
							if (Powered)
								if (South)
									if (West) return 7577;
									else return 7578;
								else
									if (West) return 7579;
									else return 7580;
							else
								if (South)
									if (West) return 7581;
									else return 7582;
								else
									if (West) return 7583;
									else return 7584;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 7585;
									else return 7586;
								else
									if (West) return 7587;
									else return 7588;
							else
								if (South)
									if (West) return 7589;
									else return 7590;
								else
									if (West) return 7591;
									else return 7592;
						else
							if (Powered)
								if (South)
									if (West) return 7593;
									else return 7594;
								else
									if (West) return 7595;
									else return 7596;
							else
								if (South)
									if (West) return 7597;
									else return 7598;
								else
									if (West) return 7599;
									else return 7600;
			else
				if (Disarmed)
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 7601;
									else return 7602;
								else
									if (West) return 7603;
									else return 7604;
							else
								if (South)
									if (West) return 7605;
									else return 7606;
								else
									if (West) return 7607;
									else return 7608;
						else
							if (Powered)
								if (South)
									if (West) return 7609;
									else return 7610;
								else
									if (West) return 7611;
									else return 7612;
							else
								if (South)
									if (West) return 7613;
									else return 7614;
								else
									if (West) return 7615;
									else return 7616;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 7617;
									else return 7618;
								else
									if (West) return 7619;
									else return 7620;
							else
								if (South)
									if (West) return 7621;
									else return 7622;
								else
									if (West) return 7623;
									else return 7624;
						else
							if (Powered)
								if (South)
									if (West) return 7625;
									else return 7626;
								else
									if (West) return 7627;
									else return 7628;
							else
								if (South)
									if (West) return 7629;
									else return 7630;
								else
									if (West) return 7631;
									else return 7632;
				else
					if (East)
						if (North)
							if (Powered)
								if (South)
									if (West) return 7633;
									else return 7634;
								else
									if (West) return 7635;
									else return 7636;
							else
								if (South)
									if (West) return 7637;
									else return 7638;
								else
									if (West) return 7639;
									else return 7640;
						else
							if (Powered)
								if (South)
									if (West) return 7641;
									else return 7642;
								else
									if (West) return 7643;
									else return 7644;
							else
								if (South)
									if (West) return 7645;
									else return 7646;
								else
									if (West) return 7647;
									else return 7648;
					else
						if (North)
							if (Powered)
								if (South)
									if (West) return 7649;
									else return 7650;
								else
									if (West) return 7651;
									else return 7652;
							else
								if (South)
									if (West) return 7653;
									else return 7654;
								else
									if (West) return 7655;
									else return 7656;
						else
							if (Powered)
								if (South)
									if (West) return 7657;
									else return 7658;
								else
									if (West) return 7659;
									else return 7660;
							else
								if (South)
									if (West) return 7661;
									else return 7662;
								else
									if (West) return 7663;
									else return 7664;
		}
		BlockState Tripwire();
		bool Attached(BlockState Block);
		bool Disarmed(BlockState Block);
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool Powered(BlockState Block);
		bool South(BlockState Block);
		bool West(BlockState Block);
	}
	namespace TripwireHook
	{
		constexpr BlockState TripwireHook(const bool Attached, const eBlockFace Facing, const bool Powered)
		{
			if (Attached)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 7521;
					else return 7522;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 7523;
					else return 7524;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 7525;
					else return 7526;
				else
					if (Powered) return 7527;
					else return 7528;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 7529;
					else return 7530;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 7531;
					else return 7532;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 7533;
					else return 7534;
				else
					if (Powered) return 7535;
					else return 7536;
		}
		BlockState TripwireHook();
		bool Attached(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace TubeCoral
	{
		constexpr BlockState TubeCoral(const bool Waterlogged)
		{
			if (Waterlogged) return 12823;
			else return 12824;
		}
		BlockState TubeCoral();
		bool Waterlogged(BlockState Block);
	}
	namespace TubeCoralBlock
	{
		constexpr BlockState TubeCoralBlock()
		{
			return 12808;
		}
	}
	namespace TubeCoralFan
	{
		constexpr BlockState TubeCoralFan(const bool Waterlogged)
		{
			if (Waterlogged) return 12843;
			else return 12844;
		}
		BlockState TubeCoralFan();
		bool Waterlogged(BlockState Block);
	}
	namespace TubeCoralWallFan
	{
		constexpr BlockState TubeCoralWallFan(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 12893;
				else return 12894;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 12895;
				else return 12896;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 12897;
				else return 12898;
			else
				if (Waterlogged) return 12899;
				else return 12900;
		}
		BlockState TubeCoralWallFan();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace Tuff
	{
		constexpr BlockState Tuff()
		{
			return 21081;
		}
	}
	namespace TuffBrickSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState TuffBrickSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 21905;
				else return 21906;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 21907;
				else return 21908;
			else
				if (Waterlogged) return 21909;
				else return 21910;
		}
		BlockState TuffBrickSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffBrickStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState TuffBrickStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21911;
						else return 21912;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21913;
						else return 21914;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21915;
						else return 21916;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21917;
						else return 21918;
					else
						if (Waterlogged) return 21919;
						else return 21920;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21921;
						else return 21922;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21923;
						else return 21924;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21925;
						else return 21926;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21927;
						else return 21928;
					else
						if (Waterlogged) return 21929;
						else return 21930;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21931;
						else return 21932;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21933;
						else return 21934;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21935;
						else return 21936;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21937;
						else return 21938;
					else
						if (Waterlogged) return 21939;
						else return 21940;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21941;
						else return 21942;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21943;
						else return 21944;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21945;
						else return 21946;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21947;
						else return 21948;
					else
						if (Waterlogged) return 21949;
						else return 21950;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21951;
						else return 21952;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21953;
						else return 21954;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21955;
						else return 21956;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21957;
						else return 21958;
					else
						if (Waterlogged) return 21959;
						else return 21960;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21961;
						else return 21962;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21963;
						else return 21964;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21965;
						else return 21966;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21967;
						else return 21968;
					else
						if (Waterlogged) return 21969;
						else return 21970;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21971;
						else return 21972;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21973;
						else return 21974;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21975;
						else return 21976;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21977;
						else return 21978;
					else
						if (Waterlogged) return 21979;
						else return 21980;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21981;
						else return 21982;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21983;
						else return 21984;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21985;
						else return 21986;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21987;
						else return 21988;
					else
						if (Waterlogged) return 21989;
						else return 21990;
		}
		BlockState TuffBrickStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffBrickWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState TuffBrickWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21991;
								else if (West == West::Low) return 21992;
								else return 21993;
							else
								if (West == West::None) return 21994;
								else if (West == West::Low) return 21995;
								else return 21996;
						else
							if (Waterlogged)
								if (West == West::None) return 21997;
								else if (West == West::Low) return 21998;
								else return 21999;
							else
								if (West == West::None) return 22000;
								else if (West == West::Low) return 22001;
								else return 22002;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22003;
								else if (West == West::Low) return 22004;
								else return 22005;
							else
								if (West == West::None) return 22006;
								else if (West == West::Low) return 22007;
								else return 22008;
						else
							if (Waterlogged)
								if (West == West::None) return 22009;
								else if (West == West::Low) return 22010;
								else return 22011;
							else
								if (West == West::None) return 22012;
								else if (West == West::Low) return 22013;
								else return 22014;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22015;
								else if (West == West::Low) return 22016;
								else return 22017;
							else
								if (West == West::None) return 22018;
								else if (West == West::Low) return 22019;
								else return 22020;
						else
							if (Waterlogged)
								if (West == West::None) return 22021;
								else if (West == West::Low) return 22022;
								else return 22023;
							else
								if (West == West::None) return 22024;
								else if (West == West::Low) return 22025;
								else return 22026;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22027;
								else if (West == West::Low) return 22028;
								else return 22029;
							else
								if (West == West::None) return 22030;
								else if (West == West::Low) return 22031;
								else return 22032;
						else
							if (Waterlogged)
								if (West == West::None) return 22033;
								else if (West == West::Low) return 22034;
								else return 22035;
							else
								if (West == West::None) return 22036;
								else if (West == West::Low) return 22037;
								else return 22038;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22039;
								else if (West == West::Low) return 22040;
								else return 22041;
							else
								if (West == West::None) return 22042;
								else if (West == West::Low) return 22043;
								else return 22044;
						else
							if (Waterlogged)
								if (West == West::None) return 22045;
								else if (West == West::Low) return 22046;
								else return 22047;
							else
								if (West == West::None) return 22048;
								else if (West == West::Low) return 22049;
								else return 22050;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22051;
								else if (West == West::Low) return 22052;
								else return 22053;
							else
								if (West == West::None) return 22054;
								else if (West == West::Low) return 22055;
								else return 22056;
						else
							if (Waterlogged)
								if (West == West::None) return 22057;
								else if (West == West::Low) return 22058;
								else return 22059;
							else
								if (West == West::None) return 22060;
								else if (West == West::Low) return 22061;
								else return 22062;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22063;
								else if (West == West::Low) return 22064;
								else return 22065;
							else
								if (West == West::None) return 22066;
								else if (West == West::Low) return 22067;
								else return 22068;
						else
							if (Waterlogged)
								if (West == West::None) return 22069;
								else if (West == West::Low) return 22070;
								else return 22071;
							else
								if (West == West::None) return 22072;
								else if (West == West::Low) return 22073;
								else return 22074;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22075;
								else if (West == West::Low) return 22076;
								else return 22077;
							else
								if (West == West::None) return 22078;
								else if (West == West::Low) return 22079;
								else return 22080;
						else
							if (Waterlogged)
								if (West == West::None) return 22081;
								else if (West == West::Low) return 22082;
								else return 22083;
							else
								if (West == West::None) return 22084;
								else if (West == West::Low) return 22085;
								else return 22086;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22087;
								else if (West == West::Low) return 22088;
								else return 22089;
							else
								if (West == West::None) return 22090;
								else if (West == West::Low) return 22091;
								else return 22092;
						else
							if (Waterlogged)
								if (West == West::None) return 22093;
								else if (West == West::Low) return 22094;
								else return 22095;
							else
								if (West == West::None) return 22096;
								else if (West == West::Low) return 22097;
								else return 22098;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22099;
								else if (West == West::Low) return 22100;
								else return 22101;
							else
								if (West == West::None) return 22102;
								else if (West == West::Low) return 22103;
								else return 22104;
						else
							if (Waterlogged)
								if (West == West::None) return 22105;
								else if (West == West::Low) return 22106;
								else return 22107;
							else
								if (West == West::None) return 22108;
								else if (West == West::Low) return 22109;
								else return 22110;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22111;
								else if (West == West::Low) return 22112;
								else return 22113;
							else
								if (West == West::None) return 22114;
								else if (West == West::Low) return 22115;
								else return 22116;
						else
							if (Waterlogged)
								if (West == West::None) return 22117;
								else if (West == West::Low) return 22118;
								else return 22119;
							else
								if (West == West::None) return 22120;
								else if (West == West::Low) return 22121;
								else return 22122;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22123;
								else if (West == West::Low) return 22124;
								else return 22125;
							else
								if (West == West::None) return 22126;
								else if (West == West::Low) return 22127;
								else return 22128;
						else
							if (Waterlogged)
								if (West == West::None) return 22129;
								else if (West == West::Low) return 22130;
								else return 22131;
							else
								if (West == West::None) return 22132;
								else if (West == West::Low) return 22133;
								else return 22134;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22135;
								else if (West == West::Low) return 22136;
								else return 22137;
							else
								if (West == West::None) return 22138;
								else if (West == West::Low) return 22139;
								else return 22140;
						else
							if (Waterlogged)
								if (West == West::None) return 22141;
								else if (West == West::Low) return 22142;
								else return 22143;
							else
								if (West == West::None) return 22144;
								else if (West == West::Low) return 22145;
								else return 22146;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22147;
								else if (West == West::Low) return 22148;
								else return 22149;
							else
								if (West == West::None) return 22150;
								else if (West == West::Low) return 22151;
								else return 22152;
						else
							if (Waterlogged)
								if (West == West::None) return 22153;
								else if (West == West::Low) return 22154;
								else return 22155;
							else
								if (West == West::None) return 22156;
								else if (West == West::Low) return 22157;
								else return 22158;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22159;
								else if (West == West::Low) return 22160;
								else return 22161;
							else
								if (West == West::None) return 22162;
								else if (West == West::Low) return 22163;
								else return 22164;
						else
							if (Waterlogged)
								if (West == West::None) return 22165;
								else if (West == West::Low) return 22166;
								else return 22167;
							else
								if (West == West::None) return 22168;
								else if (West == West::Low) return 22169;
								else return 22170;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22171;
								else if (West == West::Low) return 22172;
								else return 22173;
							else
								if (West == West::None) return 22174;
								else if (West == West::Low) return 22175;
								else return 22176;
						else
							if (Waterlogged)
								if (West == West::None) return 22177;
								else if (West == West::Low) return 22178;
								else return 22179;
							else
								if (West == West::None) return 22180;
								else if (West == West::Low) return 22181;
								else return 22182;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22183;
								else if (West == West::Low) return 22184;
								else return 22185;
							else
								if (West == West::None) return 22186;
								else if (West == West::Low) return 22187;
								else return 22188;
						else
							if (Waterlogged)
								if (West == West::None) return 22189;
								else if (West == West::Low) return 22190;
								else return 22191;
							else
								if (West == West::None) return 22192;
								else if (West == West::Low) return 22193;
								else return 22194;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22195;
								else if (West == West::Low) return 22196;
								else return 22197;
							else
								if (West == West::None) return 22198;
								else if (West == West::Low) return 22199;
								else return 22200;
						else
							if (Waterlogged)
								if (West == West::None) return 22201;
								else if (West == West::Low) return 22202;
								else return 22203;
							else
								if (West == West::None) return 22204;
								else if (West == West::Low) return 22205;
								else return 22206;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22207;
								else if (West == West::Low) return 22208;
								else return 22209;
							else
								if (West == West::None) return 22210;
								else if (West == West::Low) return 22211;
								else return 22212;
						else
							if (Waterlogged)
								if (West == West::None) return 22213;
								else if (West == West::Low) return 22214;
								else return 22215;
							else
								if (West == West::None) return 22216;
								else if (West == West::Low) return 22217;
								else return 22218;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22219;
								else if (West == West::Low) return 22220;
								else return 22221;
							else
								if (West == West::None) return 22222;
								else if (West == West::Low) return 22223;
								else return 22224;
						else
							if (Waterlogged)
								if (West == West::None) return 22225;
								else if (West == West::Low) return 22226;
								else return 22227;
							else
								if (West == West::None) return 22228;
								else if (West == West::Low) return 22229;
								else return 22230;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22231;
								else if (West == West::Low) return 22232;
								else return 22233;
							else
								if (West == West::None) return 22234;
								else if (West == West::Low) return 22235;
								else return 22236;
						else
							if (Waterlogged)
								if (West == West::None) return 22237;
								else if (West == West::Low) return 22238;
								else return 22239;
							else
								if (West == West::None) return 22240;
								else if (West == West::Low) return 22241;
								else return 22242;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22243;
								else if (West == West::Low) return 22244;
								else return 22245;
							else
								if (West == West::None) return 22246;
								else if (West == West::Low) return 22247;
								else return 22248;
						else
							if (Waterlogged)
								if (West == West::None) return 22249;
								else if (West == West::Low) return 22250;
								else return 22251;
							else
								if (West == West::None) return 22252;
								else if (West == West::Low) return 22253;
								else return 22254;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22255;
								else if (West == West::Low) return 22256;
								else return 22257;
							else
								if (West == West::None) return 22258;
								else if (West == West::Low) return 22259;
								else return 22260;
						else
							if (Waterlogged)
								if (West == West::None) return 22261;
								else if (West == West::Low) return 22262;
								else return 22263;
							else
								if (West == West::None) return 22264;
								else if (West == West::Low) return 22265;
								else return 22266;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22267;
								else if (West == West::Low) return 22268;
								else return 22269;
							else
								if (West == West::None) return 22270;
								else if (West == West::Low) return 22271;
								else return 22272;
						else
							if (Waterlogged)
								if (West == West::None) return 22273;
								else if (West == West::Low) return 22274;
								else return 22275;
							else
								if (West == West::None) return 22276;
								else if (West == West::Low) return 22277;
								else return 22278;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22279;
								else if (West == West::Low) return 22280;
								else return 22281;
							else
								if (West == West::None) return 22282;
								else if (West == West::Low) return 22283;
								else return 22284;
						else
							if (Waterlogged)
								if (West == West::None) return 22285;
								else if (West == West::Low) return 22286;
								else return 22287;
							else
								if (West == West::None) return 22288;
								else if (West == West::Low) return 22289;
								else return 22290;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22291;
								else if (West == West::Low) return 22292;
								else return 22293;
							else
								if (West == West::None) return 22294;
								else if (West == West::Low) return 22295;
								else return 22296;
						else
							if (Waterlogged)
								if (West == West::None) return 22297;
								else if (West == West::Low) return 22298;
								else return 22299;
							else
								if (West == West::None) return 22300;
								else if (West == West::Low) return 22301;
								else return 22302;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 22303;
								else if (West == West::Low) return 22304;
								else return 22305;
							else
								if (West == West::None) return 22306;
								else if (West == West::Low) return 22307;
								else return 22308;
						else
							if (Waterlogged)
								if (West == West::None) return 22309;
								else if (West == West::Low) return 22310;
								else return 22311;
							else
								if (West == West::None) return 22312;
								else if (West == West::Low) return 22313;
								else return 22314;
		}
		BlockState TuffBrickWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace TuffBricks
	{
		constexpr BlockState TuffBricks()
		{
			return 21904;
		}
	}
	namespace TuffSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState TuffSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 21082;
				else return 21083;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 21084;
				else return 21085;
			else
				if (Waterlogged) return 21086;
				else return 21087;
		}
		BlockState TuffSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState TuffStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21088;
						else return 21089;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21090;
						else return 21091;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21092;
						else return 21093;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21094;
						else return 21095;
					else
						if (Waterlogged) return 21096;
						else return 21097;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21098;
						else return 21099;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21100;
						else return 21101;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21102;
						else return 21103;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21104;
						else return 21105;
					else
						if (Waterlogged) return 21106;
						else return 21107;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21108;
						else return 21109;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21110;
						else return 21111;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21112;
						else return 21113;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21114;
						else return 21115;
					else
						if (Waterlogged) return 21116;
						else return 21117;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21118;
						else return 21119;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21120;
						else return 21121;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21122;
						else return 21123;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21124;
						else return 21125;
					else
						if (Waterlogged) return 21126;
						else return 21127;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21128;
						else return 21129;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21130;
						else return 21131;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21132;
						else return 21133;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21134;
						else return 21135;
					else
						if (Waterlogged) return 21136;
						else return 21137;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21138;
						else return 21139;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21140;
						else return 21141;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21142;
						else return 21143;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21144;
						else return 21145;
					else
						if (Waterlogged) return 21146;
						else return 21147;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21148;
						else return 21149;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21150;
						else return 21151;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21152;
						else return 21153;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21154;
						else return 21155;
					else
						if (Waterlogged) return 21156;
						else return 21157;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 21158;
						else return 21159;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 21160;
						else return 21161;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 21162;
						else return 21163;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 21164;
						else return 21165;
					else
						if (Waterlogged) return 21166;
						else return 21167;
		}
		BlockState TuffStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace TuffWall
	{
		enum class East
		{
			None,
			Low,
			Tall,
		};
		enum class North
		{
			None,
			Low,
			Tall,
		};
		enum class South
		{
			None,
			Low,
			Tall,
		};
		enum class West
		{
			None,
			Low,
			Tall,
		};
		constexpr BlockState TuffWall(const enum East East, const enum North North, const enum South South, const bool Up, const bool Waterlogged, const enum West West)
		{
			if (East == East::None)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21168;
								else if (West == West::Low) return 21169;
								else return 21170;
							else
								if (West == West::None) return 21171;
								else if (West == West::Low) return 21172;
								else return 21173;
						else
							if (Waterlogged)
								if (West == West::None) return 21174;
								else if (West == West::Low) return 21175;
								else return 21176;
							else
								if (West == West::None) return 21177;
								else if (West == West::Low) return 21178;
								else return 21179;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21180;
								else if (West == West::Low) return 21181;
								else return 21182;
							else
								if (West == West::None) return 21183;
								else if (West == West::Low) return 21184;
								else return 21185;
						else
							if (Waterlogged)
								if (West == West::None) return 21186;
								else if (West == West::Low) return 21187;
								else return 21188;
							else
								if (West == West::None) return 21189;
								else if (West == West::Low) return 21190;
								else return 21191;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21192;
								else if (West == West::Low) return 21193;
								else return 21194;
							else
								if (West == West::None) return 21195;
								else if (West == West::Low) return 21196;
								else return 21197;
						else
							if (Waterlogged)
								if (West == West::None) return 21198;
								else if (West == West::Low) return 21199;
								else return 21200;
							else
								if (West == West::None) return 21201;
								else if (West == West::Low) return 21202;
								else return 21203;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21204;
								else if (West == West::Low) return 21205;
								else return 21206;
							else
								if (West == West::None) return 21207;
								else if (West == West::Low) return 21208;
								else return 21209;
						else
							if (Waterlogged)
								if (West == West::None) return 21210;
								else if (West == West::Low) return 21211;
								else return 21212;
							else
								if (West == West::None) return 21213;
								else if (West == West::Low) return 21214;
								else return 21215;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21216;
								else if (West == West::Low) return 21217;
								else return 21218;
							else
								if (West == West::None) return 21219;
								else if (West == West::Low) return 21220;
								else return 21221;
						else
							if (Waterlogged)
								if (West == West::None) return 21222;
								else if (West == West::Low) return 21223;
								else return 21224;
							else
								if (West == West::None) return 21225;
								else if (West == West::Low) return 21226;
								else return 21227;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21228;
								else if (West == West::Low) return 21229;
								else return 21230;
							else
								if (West == West::None) return 21231;
								else if (West == West::Low) return 21232;
								else return 21233;
						else
							if (Waterlogged)
								if (West == West::None) return 21234;
								else if (West == West::Low) return 21235;
								else return 21236;
							else
								if (West == West::None) return 21237;
								else if (West == West::Low) return 21238;
								else return 21239;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21240;
								else if (West == West::Low) return 21241;
								else return 21242;
							else
								if (West == West::None) return 21243;
								else if (West == West::Low) return 21244;
								else return 21245;
						else
							if (Waterlogged)
								if (West == West::None) return 21246;
								else if (West == West::Low) return 21247;
								else return 21248;
							else
								if (West == West::None) return 21249;
								else if (West == West::Low) return 21250;
								else return 21251;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21252;
								else if (West == West::Low) return 21253;
								else return 21254;
							else
								if (West == West::None) return 21255;
								else if (West == West::Low) return 21256;
								else return 21257;
						else
							if (Waterlogged)
								if (West == West::None) return 21258;
								else if (West == West::Low) return 21259;
								else return 21260;
							else
								if (West == West::None) return 21261;
								else if (West == West::Low) return 21262;
								else return 21263;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21264;
								else if (West == West::Low) return 21265;
								else return 21266;
							else
								if (West == West::None) return 21267;
								else if (West == West::Low) return 21268;
								else return 21269;
						else
							if (Waterlogged)
								if (West == West::None) return 21270;
								else if (West == West::Low) return 21271;
								else return 21272;
							else
								if (West == West::None) return 21273;
								else if (West == West::Low) return 21274;
								else return 21275;
			else if (East == East::Low)
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21276;
								else if (West == West::Low) return 21277;
								else return 21278;
							else
								if (West == West::None) return 21279;
								else if (West == West::Low) return 21280;
								else return 21281;
						else
							if (Waterlogged)
								if (West == West::None) return 21282;
								else if (West == West::Low) return 21283;
								else return 21284;
							else
								if (West == West::None) return 21285;
								else if (West == West::Low) return 21286;
								else return 21287;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21288;
								else if (West == West::Low) return 21289;
								else return 21290;
							else
								if (West == West::None) return 21291;
								else if (West == West::Low) return 21292;
								else return 21293;
						else
							if (Waterlogged)
								if (West == West::None) return 21294;
								else if (West == West::Low) return 21295;
								else return 21296;
							else
								if (West == West::None) return 21297;
								else if (West == West::Low) return 21298;
								else return 21299;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21300;
								else if (West == West::Low) return 21301;
								else return 21302;
							else
								if (West == West::None) return 21303;
								else if (West == West::Low) return 21304;
								else return 21305;
						else
							if (Waterlogged)
								if (West == West::None) return 21306;
								else if (West == West::Low) return 21307;
								else return 21308;
							else
								if (West == West::None) return 21309;
								else if (West == West::Low) return 21310;
								else return 21311;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21312;
								else if (West == West::Low) return 21313;
								else return 21314;
							else
								if (West == West::None) return 21315;
								else if (West == West::Low) return 21316;
								else return 21317;
						else
							if (Waterlogged)
								if (West == West::None) return 21318;
								else if (West == West::Low) return 21319;
								else return 21320;
							else
								if (West == West::None) return 21321;
								else if (West == West::Low) return 21322;
								else return 21323;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21324;
								else if (West == West::Low) return 21325;
								else return 21326;
							else
								if (West == West::None) return 21327;
								else if (West == West::Low) return 21328;
								else return 21329;
						else
							if (Waterlogged)
								if (West == West::None) return 21330;
								else if (West == West::Low) return 21331;
								else return 21332;
							else
								if (West == West::None) return 21333;
								else if (West == West::Low) return 21334;
								else return 21335;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21336;
								else if (West == West::Low) return 21337;
								else return 21338;
							else
								if (West == West::None) return 21339;
								else if (West == West::Low) return 21340;
								else return 21341;
						else
							if (Waterlogged)
								if (West == West::None) return 21342;
								else if (West == West::Low) return 21343;
								else return 21344;
							else
								if (West == West::None) return 21345;
								else if (West == West::Low) return 21346;
								else return 21347;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21348;
								else if (West == West::Low) return 21349;
								else return 21350;
							else
								if (West == West::None) return 21351;
								else if (West == West::Low) return 21352;
								else return 21353;
						else
							if (Waterlogged)
								if (West == West::None) return 21354;
								else if (West == West::Low) return 21355;
								else return 21356;
							else
								if (West == West::None) return 21357;
								else if (West == West::Low) return 21358;
								else return 21359;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21360;
								else if (West == West::Low) return 21361;
								else return 21362;
							else
								if (West == West::None) return 21363;
								else if (West == West::Low) return 21364;
								else return 21365;
						else
							if (Waterlogged)
								if (West == West::None) return 21366;
								else if (West == West::Low) return 21367;
								else return 21368;
							else
								if (West == West::None) return 21369;
								else if (West == West::Low) return 21370;
								else return 21371;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21372;
								else if (West == West::Low) return 21373;
								else return 21374;
							else
								if (West == West::None) return 21375;
								else if (West == West::Low) return 21376;
								else return 21377;
						else
							if (Waterlogged)
								if (West == West::None) return 21378;
								else if (West == West::Low) return 21379;
								else return 21380;
							else
								if (West == West::None) return 21381;
								else if (West == West::Low) return 21382;
								else return 21383;
			else
				if (North == North::None)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21384;
								else if (West == West::Low) return 21385;
								else return 21386;
							else
								if (West == West::None) return 21387;
								else if (West == West::Low) return 21388;
								else return 21389;
						else
							if (Waterlogged)
								if (West == West::None) return 21390;
								else if (West == West::Low) return 21391;
								else return 21392;
							else
								if (West == West::None) return 21393;
								else if (West == West::Low) return 21394;
								else return 21395;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21396;
								else if (West == West::Low) return 21397;
								else return 21398;
							else
								if (West == West::None) return 21399;
								else if (West == West::Low) return 21400;
								else return 21401;
						else
							if (Waterlogged)
								if (West == West::None) return 21402;
								else if (West == West::Low) return 21403;
								else return 21404;
							else
								if (West == West::None) return 21405;
								else if (West == West::Low) return 21406;
								else return 21407;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21408;
								else if (West == West::Low) return 21409;
								else return 21410;
							else
								if (West == West::None) return 21411;
								else if (West == West::Low) return 21412;
								else return 21413;
						else
							if (Waterlogged)
								if (West == West::None) return 21414;
								else if (West == West::Low) return 21415;
								else return 21416;
							else
								if (West == West::None) return 21417;
								else if (West == West::Low) return 21418;
								else return 21419;
				else if (North == North::Low)
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21420;
								else if (West == West::Low) return 21421;
								else return 21422;
							else
								if (West == West::None) return 21423;
								else if (West == West::Low) return 21424;
								else return 21425;
						else
							if (Waterlogged)
								if (West == West::None) return 21426;
								else if (West == West::Low) return 21427;
								else return 21428;
							else
								if (West == West::None) return 21429;
								else if (West == West::Low) return 21430;
								else return 21431;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21432;
								else if (West == West::Low) return 21433;
								else return 21434;
							else
								if (West == West::None) return 21435;
								else if (West == West::Low) return 21436;
								else return 21437;
						else
							if (Waterlogged)
								if (West == West::None) return 21438;
								else if (West == West::Low) return 21439;
								else return 21440;
							else
								if (West == West::None) return 21441;
								else if (West == West::Low) return 21442;
								else return 21443;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21444;
								else if (West == West::Low) return 21445;
								else return 21446;
							else
								if (West == West::None) return 21447;
								else if (West == West::Low) return 21448;
								else return 21449;
						else
							if (Waterlogged)
								if (West == West::None) return 21450;
								else if (West == West::Low) return 21451;
								else return 21452;
							else
								if (West == West::None) return 21453;
								else if (West == West::Low) return 21454;
								else return 21455;
				else
					if (South == South::None)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21456;
								else if (West == West::Low) return 21457;
								else return 21458;
							else
								if (West == West::None) return 21459;
								else if (West == West::Low) return 21460;
								else return 21461;
						else
							if (Waterlogged)
								if (West == West::None) return 21462;
								else if (West == West::Low) return 21463;
								else return 21464;
							else
								if (West == West::None) return 21465;
								else if (West == West::Low) return 21466;
								else return 21467;
					else if (South == South::Low)
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21468;
								else if (West == West::Low) return 21469;
								else return 21470;
							else
								if (West == West::None) return 21471;
								else if (West == West::Low) return 21472;
								else return 21473;
						else
							if (Waterlogged)
								if (West == West::None) return 21474;
								else if (West == West::Low) return 21475;
								else return 21476;
							else
								if (West == West::None) return 21477;
								else if (West == West::Low) return 21478;
								else return 21479;
					else
						if (Up)
							if (Waterlogged)
								if (West == West::None) return 21480;
								else if (West == West::Low) return 21481;
								else return 21482;
							else
								if (West == West::None) return 21483;
								else if (West == West::Low) return 21484;
								else return 21485;
						else
							if (Waterlogged)
								if (West == West::None) return 21486;
								else if (West == West::Low) return 21487;
								else return 21488;
							else
								if (West == West::None) return 21489;
								else if (West == West::Low) return 21490;
								else return 21491;
		}
		BlockState TuffWall();
		enum East East(BlockState Block);
		enum North North(BlockState Block);
		enum South South(BlockState Block);
		bool Up(BlockState Block);
		bool Waterlogged(BlockState Block);
		enum West West(BlockState Block);
	}
	namespace TurtleEgg
	{
		constexpr BlockState TurtleEgg(const int Eggs, const int Hatch)
		{
			if (Eggs == 1)
				if (Hatch == 0) return 12788;
				else if (Hatch == 1) return 12789;
				else return 12790;
			else if (Eggs == 2)
				if (Hatch == 0) return 12791;
				else if (Hatch == 1) return 12792;
				else return 12793;
			else if (Eggs == 3)
				if (Hatch == 0) return 12794;
				else if (Hatch == 1) return 12795;
				else return 12796;
			else
				if (Hatch == 0) return 12797;
				else if (Hatch == 1) return 12798;
				else return 12799;
		}
		BlockState TurtleEgg();
		int Eggs(BlockState Block);
		int Hatch(BlockState Block);
	}
	namespace TwistingVines
	{
		constexpr BlockState TwistingVines(const int Age)
		{
			if (Age == 0) return 18638;
			else if (Age == 1) return 18639;
			else if (Age == 2) return 18640;
			else if (Age == 3) return 18641;
			else if (Age == 4) return 18642;
			else if (Age == 5) return 18643;
			else if (Age == 6) return 18644;
			else if (Age == 7) return 18645;
			else if (Age == 8) return 18646;
			else if (Age == 9) return 18647;
			else if (Age == 10) return 18648;
			else if (Age == 11) return 18649;
			else if (Age == 12) return 18650;
			else if (Age == 13) return 18651;
			else if (Age == 14) return 18652;
			else if (Age == 15) return 18653;
			else if (Age == 16) return 18654;
			else if (Age == 17) return 18655;
			else if (Age == 18) return 18656;
			else if (Age == 19) return 18657;
			else if (Age == 20) return 18658;
			else if (Age == 21) return 18659;
			else if (Age == 22) return 18660;
			else if (Age == 23) return 18661;
			else if (Age == 24) return 18662;
			else return 18663;
		}
		BlockState TwistingVines();
		int Age(BlockState Block);
	}
	namespace TwistingVinesPlant
	{
		constexpr BlockState TwistingVinesPlant()
		{
			return 18664;
		}
	}
	namespace Vault
	{
		enum class VaultState
		{
			Inactive,
			Active,
			Unlocking,
			Ejecting,
		};
		constexpr BlockState Vault(const eBlockFace Facing, const bool Ominous, const enum VaultState VaultState)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 26650;
					else if (VaultState == VaultState::Active) return 26651;
					else if (VaultState == VaultState::Unlocking) return 26652;
					else return 26653;
				else
					if (VaultState == VaultState::Inactive) return 26654;
					else if (VaultState == VaultState::Active) return 26655;
					else if (VaultState == VaultState::Unlocking) return 26656;
					else return 26657;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 26658;
					else if (VaultState == VaultState::Active) return 26659;
					else if (VaultState == VaultState::Unlocking) return 26660;
					else return 26661;
				else
					if (VaultState == VaultState::Inactive) return 26662;
					else if (VaultState == VaultState::Active) return 26663;
					else if (VaultState == VaultState::Unlocking) return 26664;
					else return 26665;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 26666;
					else if (VaultState == VaultState::Active) return 26667;
					else if (VaultState == VaultState::Unlocking) return 26668;
					else return 26669;
				else
					if (VaultState == VaultState::Inactive) return 26670;
					else if (VaultState == VaultState::Active) return 26671;
					else if (VaultState == VaultState::Unlocking) return 26672;
					else return 26673;
			else
				if (Ominous)
					if (VaultState == VaultState::Inactive) return 26674;
					else if (VaultState == VaultState::Active) return 26675;
					else if (VaultState == VaultState::Unlocking) return 26676;
					else return 26677;
				else
					if (VaultState == VaultState::Inactive) return 26678;
					else if (VaultState == VaultState::Active) return 26679;
					else if (VaultState == VaultState::Unlocking) return 26680;
					else return 26681;
		}
		BlockState Vault();
		eBlockFace Facing(BlockState Block);
		bool Ominous(BlockState Block);
		enum VaultState VaultState(BlockState Block);
	}
	namespace VerdantFroglight
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState VerdantFroglight(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 26566;
			else if (Axis == Axis::Y) return 26567;
			else return 26568;
		}
		BlockState VerdantFroglight();
		enum Axis Axis(BlockState Block);
	}
	namespace Vine
	{
		constexpr BlockState Vine(const bool East, const bool North, const bool South, const bool Up, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Up)
							if (West) return 6837;
							else return 6838;
						else
							if (West) return 6839;
							else return 6840;
					else
						if (Up)
							if (West) return 6841;
							else return 6842;
						else
							if (West) return 6843;
							else return 6844;
				else
					if (South)
						if (Up)
							if (West) return 6845;
							else return 6846;
						else
							if (West) return 6847;
							else return 6848;
					else
						if (Up)
							if (West) return 6849;
							else return 6850;
						else
							if (West) return 6851;
							else return 6852;
			else
				if (North)
					if (South)
						if (Up)
							if (West) return 6853;
							else return 6854;
						else
							if (West) return 6855;
							else return 6856;
					else
						if (Up)
							if (West) return 6857;
							else return 6858;
						else
							if (West) return 6859;
							else return 6860;
				else
					if (South)
						if (Up)
							if (West) return 6861;
							else return 6862;
						else
							if (West) return 6863;
							else return 6864;
					else
						if (Up)
							if (West) return 6865;
							else return 6866;
						else
							if (West) return 6867;
							else return 6868;
		}
		BlockState Vine();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Up(BlockState Block);
		bool West(BlockState Block);
	}
	namespace VoidAir
	{
		constexpr BlockState VoidAir()
		{
			return 12958;
		}
	}
	namespace WallTorch
	{
		constexpr BlockState WallTorch(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 2356;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 2357;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 2358;
			else return 2359;
		}
		BlockState WallTorch();
		eBlockFace Facing(BlockState Block);
	}
	namespace WarpedButton
	{
		enum class Face
		{
			Floor,
			Wall,
			Ceiling,
		};
		constexpr BlockState WarpedButton(const enum Face Face, const eBlockFace Facing, const bool Powered)
		{
			if (Face == Face::Floor)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19124;
					else return 19125;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19126;
					else return 19127;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19128;
					else return 19129;
				else
					if (Powered) return 19130;
					else return 19131;
			else if (Face == Face::Wall)
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19132;
					else return 19133;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19134;
					else return 19135;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19136;
					else return 19137;
				else
					if (Powered) return 19138;
					else return 19139;
			else
				if (Facing == eBlockFace::BLOCK_FACE_ZM)
					if (Powered) return 19140;
					else return 19141;
				else if (Facing == eBlockFace::BLOCK_FACE_ZP)
					if (Powered) return 19142;
					else return 19143;
				else if (Facing == eBlockFace::BLOCK_FACE_XM)
					if (Powered) return 19144;
					else return 19145;
				else
					if (Powered) return 19146;
					else return 19147;
		}
		BlockState WarpedButton();
		enum Face Face(BlockState Block);
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WarpedDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19212;
							else return 19213;
						else
							if (Powered) return 19214;
							else return 19215;
					else
						if (Open)
							if (Powered) return 19216;
							else return 19217;
						else
							if (Powered) return 19218;
							else return 19219;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19220;
							else return 19221;
						else
							if (Powered) return 19222;
							else return 19223;
					else
						if (Open)
							if (Powered) return 19224;
							else return 19225;
						else
							if (Powered) return 19226;
							else return 19227;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19228;
							else return 19229;
						else
							if (Powered) return 19230;
							else return 19231;
					else
						if (Open)
							if (Powered) return 19232;
							else return 19233;
						else
							if (Powered) return 19234;
							else return 19235;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19236;
							else return 19237;
						else
							if (Powered) return 19238;
							else return 19239;
					else
						if (Open)
							if (Powered) return 19240;
							else return 19241;
						else
							if (Powered) return 19242;
							else return 19243;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19244;
							else return 19245;
						else
							if (Powered) return 19246;
							else return 19247;
					else
						if (Open)
							if (Powered) return 19248;
							else return 19249;
						else
							if (Powered) return 19250;
							else return 19251;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19252;
							else return 19253;
						else
							if (Powered) return 19254;
							else return 19255;
					else
						if (Open)
							if (Powered) return 19256;
							else return 19257;
						else
							if (Powered) return 19258;
							else return 19259;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19260;
							else return 19261;
						else
							if (Powered) return 19262;
							else return 19263;
					else
						if (Open)
							if (Powered) return 19264;
							else return 19265;
						else
							if (Powered) return 19266;
							else return 19267;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 19268;
							else return 19269;
						else
							if (Powered) return 19270;
							else return 19271;
					else
						if (Open)
							if (Powered) return 19272;
							else return 19273;
						else
							if (Powered) return 19274;
							else return 19275;
		}
		BlockState WarpedDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedFence
	{
		constexpr BlockState WarpedFence(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 18716;
							else return 18717;
						else
							if (West) return 18718;
							else return 18719;
					else
						if (Waterlogged)
							if (West) return 18720;
							else return 18721;
						else
							if (West) return 18722;
							else return 18723;
				else
					if (South)
						if (Waterlogged)
							if (West) return 18724;
							else return 18725;
						else
							if (West) return 18726;
							else return 18727;
					else
						if (Waterlogged)
							if (West) return 18728;
							else return 18729;
						else
							if (West) return 18730;
							else return 18731;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 18732;
							else return 18733;
						else
							if (West) return 18734;
							else return 18735;
					else
						if (Waterlogged)
							if (West) return 18736;
							else return 18737;
						else
							if (West) return 18738;
							else return 18739;
				else
					if (South)
						if (Waterlogged)
							if (West) return 18740;
							else return 18741;
						else
							if (West) return 18742;
							else return 18743;
					else
						if (Waterlogged)
							if (West) return 18744;
							else return 18745;
						else
							if (West) return 18746;
							else return 18747;
		}
		BlockState WarpedFence();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace WarpedFenceGate
	{
		constexpr BlockState WarpedFenceGate(const eBlockFace Facing, const bool InWall, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (InWall)
					if (Open)
						if (Powered) return 18908;
						else return 18909;
					else
						if (Powered) return 18910;
						else return 18911;
				else
					if (Open)
						if (Powered) return 18912;
						else return 18913;
					else
						if (Powered) return 18914;
						else return 18915;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (InWall)
					if (Open)
						if (Powered) return 18916;
						else return 18917;
					else
						if (Powered) return 18918;
						else return 18919;
				else
					if (Open)
						if (Powered) return 18920;
						else return 18921;
					else
						if (Powered) return 18922;
						else return 18923;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (InWall)
					if (Open)
						if (Powered) return 18924;
						else return 18925;
					else
						if (Powered) return 18926;
						else return 18927;
				else
					if (Open)
						if (Powered) return 18928;
						else return 18929;
					else
						if (Powered) return 18930;
						else return 18931;
			else
				if (InWall)
					if (Open)
						if (Powered) return 18932;
						else return 18933;
					else
						if (Powered) return 18934;
						else return 18935;
				else
					if (Open)
						if (Powered) return 18936;
						else return 18937;
					else
						if (Powered) return 18938;
						else return 18939;
		}
		BlockState WarpedFenceGate();
		eBlockFace Facing(BlockState Block);
		bool InWall(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WarpedFungus
	{
		constexpr BlockState WarpedFungus()
		{
			return 18592;
		}
	}
	namespace WarpedHangingSign
	{
		constexpr BlockState WarpedHangingSign(const bool Attached, const int Rotation, const bool Waterlogged)
		{
			if (Attached)
				if (Rotation == 0)
					if (Waterlogged) return 5346;
					else return 5347;
				else if (Rotation == 1)
					if (Waterlogged) return 5348;
					else return 5349;
				else if (Rotation == 2)
					if (Waterlogged) return 5350;
					else return 5351;
				else if (Rotation == 3)
					if (Waterlogged) return 5352;
					else return 5353;
				else if (Rotation == 4)
					if (Waterlogged) return 5354;
					else return 5355;
				else if (Rotation == 5)
					if (Waterlogged) return 5356;
					else return 5357;
				else if (Rotation == 6)
					if (Waterlogged) return 5358;
					else return 5359;
				else if (Rotation == 7)
					if (Waterlogged) return 5360;
					else return 5361;
				else if (Rotation == 8)
					if (Waterlogged) return 5362;
					else return 5363;
				else if (Rotation == 9)
					if (Waterlogged) return 5364;
					else return 5365;
				else if (Rotation == 10)
					if (Waterlogged) return 5366;
					else return 5367;
				else if (Rotation == 11)
					if (Waterlogged) return 5368;
					else return 5369;
				else if (Rotation == 12)
					if (Waterlogged) return 5370;
					else return 5371;
				else if (Rotation == 13)
					if (Waterlogged) return 5372;
					else return 5373;
				else if (Rotation == 14)
					if (Waterlogged) return 5374;
					else return 5375;
				else
					if (Waterlogged) return 5376;
					else return 5377;
			else
				if (Rotation == 0)
					if (Waterlogged) return 5378;
					else return 5379;
				else if (Rotation == 1)
					if (Waterlogged) return 5380;
					else return 5381;
				else if (Rotation == 2)
					if (Waterlogged) return 5382;
					else return 5383;
				else if (Rotation == 3)
					if (Waterlogged) return 5384;
					else return 5385;
				else if (Rotation == 4)
					if (Waterlogged) return 5386;
					else return 5387;
				else if (Rotation == 5)
					if (Waterlogged) return 5388;
					else return 5389;
				else if (Rotation == 6)
					if (Waterlogged) return 5390;
					else return 5391;
				else if (Rotation == 7)
					if (Waterlogged) return 5392;
					else return 5393;
				else if (Rotation == 8)
					if (Waterlogged) return 5394;
					else return 5395;
				else if (Rotation == 9)
					if (Waterlogged) return 5396;
					else return 5397;
				else if (Rotation == 10)
					if (Waterlogged) return 5398;
					else return 5399;
				else if (Rotation == 11)
					if (Waterlogged) return 5400;
					else return 5401;
				else if (Rotation == 12)
					if (Waterlogged) return 5402;
					else return 5403;
				else if (Rotation == 13)
					if (Waterlogged) return 5404;
					else return 5405;
				else if (Rotation == 14)
					if (Waterlogged) return 5406;
					else return 5407;
				else
					if (Waterlogged) return 5408;
					else return 5409;
		}
		BlockState WarpedHangingSign();
		bool Attached(BlockState Block);
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedHyphae
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState WarpedHyphae(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18585;
			else if (Axis == Axis::Y) return 18586;
			else return 18587;
		}
		BlockState WarpedHyphae();
		enum Axis Axis(BlockState Block);
	}
	namespace WarpedNylium
	{
		constexpr BlockState WarpedNylium()
		{
			return 18591;
		}
	}
	namespace WarpedPlanks
	{
		constexpr BlockState WarpedPlanks()
		{
			return 18667;
		}
	}
	namespace WarpedPressurePlate
	{
		constexpr BlockState WarpedPressurePlate(const bool Powered)
		{
			if (Powered) return 18682;
			else return 18683;
		}
		BlockState WarpedPressurePlate();
		bool Powered(BlockState Block);
	}
	namespace WarpedRoots
	{
		constexpr BlockState WarpedRoots()
		{
			return 18594;
		}
	}
	namespace WarpedSign
	{
		constexpr BlockState WarpedSign(const int Rotation, const bool Waterlogged)
		{
			if (Rotation == 0)
				if (Waterlogged) return 19308;
				else return 19309;
			else if (Rotation == 1)
				if (Waterlogged) return 19310;
				else return 19311;
			else if (Rotation == 2)
				if (Waterlogged) return 19312;
				else return 19313;
			else if (Rotation == 3)
				if (Waterlogged) return 19314;
				else return 19315;
			else if (Rotation == 4)
				if (Waterlogged) return 19316;
				else return 19317;
			else if (Rotation == 5)
				if (Waterlogged) return 19318;
				else return 19319;
			else if (Rotation == 6)
				if (Waterlogged) return 19320;
				else return 19321;
			else if (Rotation == 7)
				if (Waterlogged) return 19322;
				else return 19323;
			else if (Rotation == 8)
				if (Waterlogged) return 19324;
				else return 19325;
			else if (Rotation == 9)
				if (Waterlogged) return 19326;
				else return 19327;
			else if (Rotation == 10)
				if (Waterlogged) return 19328;
				else return 19329;
			else if (Rotation == 11)
				if (Waterlogged) return 19330;
				else return 19331;
			else if (Rotation == 12)
				if (Waterlogged) return 19332;
				else return 19333;
			else if (Rotation == 13)
				if (Waterlogged) return 19334;
				else return 19335;
			else if (Rotation == 14)
				if (Waterlogged) return 19336;
				else return 19337;
			else
				if (Waterlogged) return 19338;
				else return 19339;
		}
		BlockState WarpedSign();
		int Rotation(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WarpedSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 18674;
				else return 18675;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 18676;
				else return 18677;
			else
				if (Waterlogged) return 18678;
				else return 18679;
		}
		BlockState WarpedSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WarpedStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19020;
						else return 19021;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19022;
						else return 19023;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19024;
						else return 19025;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19026;
						else return 19027;
					else
						if (Waterlogged) return 19028;
						else return 19029;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19030;
						else return 19031;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19032;
						else return 19033;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19034;
						else return 19035;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19036;
						else return 19037;
					else
						if (Waterlogged) return 19038;
						else return 19039;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19040;
						else return 19041;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19042;
						else return 19043;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19044;
						else return 19045;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19046;
						else return 19047;
					else
						if (Waterlogged) return 19048;
						else return 19049;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19050;
						else return 19051;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19052;
						else return 19053;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19054;
						else return 19055;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19056;
						else return 19057;
					else
						if (Waterlogged) return 19058;
						else return 19059;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19060;
						else return 19061;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19062;
						else return 19063;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19064;
						else return 19065;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19066;
						else return 19067;
					else
						if (Waterlogged) return 19068;
						else return 19069;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19070;
						else return 19071;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19072;
						else return 19073;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19074;
						else return 19075;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19076;
						else return 19077;
					else
						if (Waterlogged) return 19078;
						else return 19079;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19080;
						else return 19081;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19082;
						else return 19083;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19084;
						else return 19085;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19086;
						else return 19087;
					else
						if (Waterlogged) return 19088;
						else return 19089;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 19090;
						else return 19091;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 19092;
						else return 19093;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 19094;
						else return 19095;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 19096;
						else return 19097;
					else
						if (Waterlogged) return 19098;
						else return 19099;
		}
		BlockState WarpedStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedStem
	{
		enum class Axis
		{
			X,
			Y,
			Z,
		};
		constexpr BlockState WarpedStem(const enum Axis Axis)
		{
			if (Axis == Axis::X) return 18579;
			else if (Axis == Axis::Y) return 18580;
			else return 18581;
		}
		BlockState WarpedStem();
		enum Axis Axis(BlockState Block);
	}
	namespace WarpedTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WarpedTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18812;
							else return 18813;
						else
							if (Waterlogged) return 18814;
							else return 18815;
					else
						if (Powered)
							if (Waterlogged) return 18816;
							else return 18817;
						else
							if (Waterlogged) return 18818;
							else return 18819;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18820;
							else return 18821;
						else
							if (Waterlogged) return 18822;
							else return 18823;
					else
						if (Powered)
							if (Waterlogged) return 18824;
							else return 18825;
						else
							if (Waterlogged) return 18826;
							else return 18827;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18828;
							else return 18829;
						else
							if (Waterlogged) return 18830;
							else return 18831;
					else
						if (Powered)
							if (Waterlogged) return 18832;
							else return 18833;
						else
							if (Waterlogged) return 18834;
							else return 18835;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18836;
							else return 18837;
						else
							if (Waterlogged) return 18838;
							else return 18839;
					else
						if (Powered)
							if (Waterlogged) return 18840;
							else return 18841;
						else
							if (Waterlogged) return 18842;
							else return 18843;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18844;
							else return 18845;
						else
							if (Waterlogged) return 18846;
							else return 18847;
					else
						if (Powered)
							if (Waterlogged) return 18848;
							else return 18849;
						else
							if (Waterlogged) return 18850;
							else return 18851;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18852;
							else return 18853;
						else
							if (Waterlogged) return 18854;
							else return 18855;
					else
						if (Powered)
							if (Waterlogged) return 18856;
							else return 18857;
						else
							if (Waterlogged) return 18858;
							else return 18859;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 18860;
							else return 18861;
						else
							if (Waterlogged) return 18862;
							else return 18863;
					else
						if (Powered)
							if (Waterlogged) return 18864;
							else return 18865;
						else
							if (Waterlogged) return 18866;
							else return 18867;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 18868;
							else return 18869;
						else
							if (Waterlogged) return 18870;
							else return 18871;
					else
						if (Powered)
							if (Waterlogged) return 18872;
							else return 18873;
						else
							if (Waterlogged) return 18874;
							else return 18875;
		}
		BlockState WarpedTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWallHangingSign
	{
		constexpr BlockState WarpedWallHangingSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 5610;
				else return 5611;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 5612;
				else return 5613;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 5614;
				else return 5615;
			else
				if (Waterlogged) return 5616;
				else return 5617;
		}
		BlockState WarpedWallHangingSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWallSign
	{
		constexpr BlockState WarpedWallSign(const eBlockFace Facing, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Waterlogged) return 19348;
				else return 19349;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Waterlogged) return 19350;
				else return 19351;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Waterlogged) return 19352;
				else return 19353;
			else
				if (Waterlogged) return 19354;
				else return 19355;
		}
		BlockState WarpedWallSign();
		eBlockFace Facing(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WarpedWartBlock
	{
		constexpr BlockState WarpedWartBlock()
		{
			return 18593;
		}
	}
	namespace Water
	{
		constexpr BlockState Water(const int Level)
		{
			if (Level == 0) return 80;
			else if (Level == 1) return 81;
			else if (Level == 2) return 82;
			else if (Level == 3) return 83;
			else if (Level == 4) return 84;
			else if (Level == 5) return 85;
			else if (Level == 6) return 86;
			else if (Level == 7) return 87;
			else if (Level == 8) return 88;
			else if (Level == 9) return 89;
			else if (Level == 10) return 90;
			else if (Level == 11) return 91;
			else if (Level == 12) return 92;
			else if (Level == 13) return 93;
			else if (Level == 14) return 94;
			else return 95;
		}
		BlockState Water();
		int Level(BlockState Block);
	}
	namespace WaterCauldron
	{
		constexpr BlockState WaterCauldron(const int Level)
		{
			if (Level == 1) return 7399;
			else if (Level == 2) return 7400;
			else return 7401;
		}
		BlockState WaterCauldron();
		int Level(BlockState Block);
	}
	namespace WaxedChiseledCopper
	{
		constexpr BlockState WaxedChiseledCopper()
		{
			return 22955;
		}
	}
	namespace WaxedCopperBlock
	{
		constexpr BlockState WaxedCopperBlock()
		{
			return 23300;
		}
	}
	namespace WaxedCopperBulb
	{
		constexpr BlockState WaxedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24708;
				else return 24709;
			else
				if (Powered) return 24710;
				else return 24711;
		}
		BlockState WaxedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23908;
							else return 23909;
						else
							if (Powered) return 23910;
							else return 23911;
					else
						if (Open)
							if (Powered) return 23912;
							else return 23913;
						else
							if (Powered) return 23914;
							else return 23915;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23916;
							else return 23917;
						else
							if (Powered) return 23918;
							else return 23919;
					else
						if (Open)
							if (Powered) return 23920;
							else return 23921;
						else
							if (Powered) return 23922;
							else return 23923;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23924;
							else return 23925;
						else
							if (Powered) return 23926;
							else return 23927;
					else
						if (Open)
							if (Powered) return 23928;
							else return 23929;
						else
							if (Powered) return 23930;
							else return 23931;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23932;
							else return 23933;
						else
							if (Powered) return 23934;
							else return 23935;
					else
						if (Open)
							if (Powered) return 23936;
							else return 23937;
						else
							if (Powered) return 23938;
							else return 23939;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23940;
							else return 23941;
						else
							if (Powered) return 23942;
							else return 23943;
					else
						if (Open)
							if (Powered) return 23944;
							else return 23945;
						else
							if (Powered) return 23946;
							else return 23947;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23948;
							else return 23949;
						else
							if (Powered) return 23950;
							else return 23951;
					else
						if (Open)
							if (Powered) return 23952;
							else return 23953;
						else
							if (Powered) return 23954;
							else return 23955;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23956;
							else return 23957;
						else
							if (Powered) return 23958;
							else return 23959;
					else
						if (Open)
							if (Powered) return 23960;
							else return 23961;
						else
							if (Powered) return 23962;
							else return 23963;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23964;
							else return 23965;
						else
							if (Powered) return 23966;
							else return 23967;
					else
						if (Open)
							if (Powered) return 23968;
							else return 23969;
						else
							if (Powered) return 23970;
							else return 23971;
		}
		BlockState WaxedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedCopperGrate
	{
		constexpr BlockState WaxedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24684;
			else return 24685;
		}
		BlockState WaxedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24420;
							else return 24421;
						else
							if (Waterlogged) return 24422;
							else return 24423;
					else
						if (Powered)
							if (Waterlogged) return 24424;
							else return 24425;
						else
							if (Waterlogged) return 24426;
							else return 24427;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24428;
							else return 24429;
						else
							if (Waterlogged) return 24430;
							else return 24431;
					else
						if (Powered)
							if (Waterlogged) return 24432;
							else return 24433;
						else
							if (Waterlogged) return 24434;
							else return 24435;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24436;
							else return 24437;
						else
							if (Waterlogged) return 24438;
							else return 24439;
					else
						if (Powered)
							if (Waterlogged) return 24440;
							else return 24441;
						else
							if (Waterlogged) return 24442;
							else return 24443;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24444;
							else return 24445;
						else
							if (Waterlogged) return 24446;
							else return 24447;
					else
						if (Powered)
							if (Waterlogged) return 24448;
							else return 24449;
						else
							if (Waterlogged) return 24450;
							else return 24451;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24452;
							else return 24453;
						else
							if (Waterlogged) return 24454;
							else return 24455;
					else
						if (Powered)
							if (Waterlogged) return 24456;
							else return 24457;
						else
							if (Waterlogged) return 24458;
							else return 24459;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24460;
							else return 24461;
						else
							if (Waterlogged) return 24462;
							else return 24463;
					else
						if (Powered)
							if (Waterlogged) return 24464;
							else return 24465;
						else
							if (Waterlogged) return 24466;
							else return 24467;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24468;
							else return 24469;
						else
							if (Waterlogged) return 24470;
							else return 24471;
					else
						if (Powered)
							if (Waterlogged) return 24472;
							else return 24473;
						else
							if (Waterlogged) return 24474;
							else return 24475;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24476;
							else return 24477;
						else
							if (Waterlogged) return 24478;
							else return 24479;
					else
						if (Powered)
							if (Waterlogged) return 24480;
							else return 24481;
						else
							if (Waterlogged) return 24482;
							else return 24483;
		}
		BlockState WaxedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCutCopper
	{
		constexpr BlockState WaxedCutCopper()
		{
			return 23307;
		}
	}
	namespace WaxedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23646;
				else return 23647;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23648;
				else return 23649;
			else
				if (Waterlogged) return 23650;
				else return 23651;
		}
		BlockState WaxedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23548;
						else return 23549;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23550;
						else return 23551;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23552;
						else return 23553;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23554;
						else return 23555;
					else
						if (Waterlogged) return 23556;
						else return 23557;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23558;
						else return 23559;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23560;
						else return 23561;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23562;
						else return 23563;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23564;
						else return 23565;
					else
						if (Waterlogged) return 23566;
						else return 23567;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23568;
						else return 23569;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23570;
						else return 23571;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23572;
						else return 23573;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23574;
						else return 23575;
					else
						if (Waterlogged) return 23576;
						else return 23577;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23578;
						else return 23579;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23580;
						else return 23581;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23582;
						else return 23583;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23584;
						else return 23585;
					else
						if (Waterlogged) return 23586;
						else return 23587;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23588;
						else return 23589;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23590;
						else return 23591;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23592;
						else return 23593;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23594;
						else return 23595;
					else
						if (Waterlogged) return 23596;
						else return 23597;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23598;
						else return 23599;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23600;
						else return 23601;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23602;
						else return 23603;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23604;
						else return 23605;
					else
						if (Waterlogged) return 23606;
						else return 23607;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23608;
						else return 23609;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23610;
						else return 23611;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23612;
						else return 23613;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23614;
						else return 23615;
					else
						if (Waterlogged) return 23616;
						else return 23617;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23618;
						else return 23619;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23620;
						else return 23621;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23622;
						else return 23623;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23624;
						else return 23625;
					else
						if (Waterlogged) return 23626;
						else return 23627;
		}
		BlockState WaxedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedChiseledCopper
	{
		constexpr BlockState WaxedExposedChiseledCopper()
		{
			return 22954;
		}
	}
	namespace WaxedExposedCopper
	{
		constexpr BlockState WaxedExposedCopper()
		{
			return 23302;
		}
	}
	namespace WaxedExposedCopperBulb
	{
		constexpr BlockState WaxedExposedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24712;
				else return 24713;
			else
				if (Powered) return 24714;
				else return 24715;
		}
		BlockState WaxedExposedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedExposedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedExposedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23972;
							else return 23973;
						else
							if (Powered) return 23974;
							else return 23975;
					else
						if (Open)
							if (Powered) return 23976;
							else return 23977;
						else
							if (Powered) return 23978;
							else return 23979;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23980;
							else return 23981;
						else
							if (Powered) return 23982;
							else return 23983;
					else
						if (Open)
							if (Powered) return 23984;
							else return 23985;
						else
							if (Powered) return 23986;
							else return 23987;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23988;
							else return 23989;
						else
							if (Powered) return 23990;
							else return 23991;
					else
						if (Open)
							if (Powered) return 23992;
							else return 23993;
						else
							if (Powered) return 23994;
							else return 23995;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23996;
							else return 23997;
						else
							if (Powered) return 23998;
							else return 23999;
					else
						if (Open)
							if (Powered) return 24000;
							else return 24001;
						else
							if (Powered) return 24002;
							else return 24003;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24004;
							else return 24005;
						else
							if (Powered) return 24006;
							else return 24007;
					else
						if (Open)
							if (Powered) return 24008;
							else return 24009;
						else
							if (Powered) return 24010;
							else return 24011;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24012;
							else return 24013;
						else
							if (Powered) return 24014;
							else return 24015;
					else
						if (Open)
							if (Powered) return 24016;
							else return 24017;
						else
							if (Powered) return 24018;
							else return 24019;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24020;
							else return 24021;
						else
							if (Powered) return 24022;
							else return 24023;
					else
						if (Open)
							if (Powered) return 24024;
							else return 24025;
						else
							if (Powered) return 24026;
							else return 24027;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24028;
							else return 24029;
						else
							if (Powered) return 24030;
							else return 24031;
					else
						if (Open)
							if (Powered) return 24032;
							else return 24033;
						else
							if (Powered) return 24034;
							else return 24035;
		}
		BlockState WaxedExposedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedExposedCopperGrate
	{
		constexpr BlockState WaxedExposedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24686;
			else return 24687;
		}
		BlockState WaxedExposedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedExposedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24484;
							else return 24485;
						else
							if (Waterlogged) return 24486;
							else return 24487;
					else
						if (Powered)
							if (Waterlogged) return 24488;
							else return 24489;
						else
							if (Waterlogged) return 24490;
							else return 24491;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24492;
							else return 24493;
						else
							if (Waterlogged) return 24494;
							else return 24495;
					else
						if (Powered)
							if (Waterlogged) return 24496;
							else return 24497;
						else
							if (Waterlogged) return 24498;
							else return 24499;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24500;
							else return 24501;
						else
							if (Waterlogged) return 24502;
							else return 24503;
					else
						if (Powered)
							if (Waterlogged) return 24504;
							else return 24505;
						else
							if (Waterlogged) return 24506;
							else return 24507;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24508;
							else return 24509;
						else
							if (Waterlogged) return 24510;
							else return 24511;
					else
						if (Powered)
							if (Waterlogged) return 24512;
							else return 24513;
						else
							if (Waterlogged) return 24514;
							else return 24515;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24516;
							else return 24517;
						else
							if (Waterlogged) return 24518;
							else return 24519;
					else
						if (Powered)
							if (Waterlogged) return 24520;
							else return 24521;
						else
							if (Waterlogged) return 24522;
							else return 24523;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24524;
							else return 24525;
						else
							if (Waterlogged) return 24526;
							else return 24527;
					else
						if (Powered)
							if (Waterlogged) return 24528;
							else return 24529;
						else
							if (Waterlogged) return 24530;
							else return 24531;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24532;
							else return 24533;
						else
							if (Waterlogged) return 24534;
							else return 24535;
					else
						if (Powered)
							if (Waterlogged) return 24536;
							else return 24537;
						else
							if (Waterlogged) return 24538;
							else return 24539;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24540;
							else return 24541;
						else
							if (Waterlogged) return 24542;
							else return 24543;
					else
						if (Powered)
							if (Waterlogged) return 24544;
							else return 24545;
						else
							if (Waterlogged) return 24546;
							else return 24547;
		}
		BlockState WaxedExposedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCutCopper
	{
		constexpr BlockState WaxedExposedCutCopper()
		{
			return 23306;
		}
	}
	namespace WaxedExposedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedExposedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23640;
				else return 23641;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23642;
				else return 23643;
			else
				if (Waterlogged) return 23644;
				else return 23645;
		}
		BlockState WaxedExposedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedExposedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedExposedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23468;
						else return 23469;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23470;
						else return 23471;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23472;
						else return 23473;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23474;
						else return 23475;
					else
						if (Waterlogged) return 23476;
						else return 23477;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23478;
						else return 23479;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23480;
						else return 23481;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23482;
						else return 23483;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23484;
						else return 23485;
					else
						if (Waterlogged) return 23486;
						else return 23487;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23488;
						else return 23489;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23490;
						else return 23491;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23492;
						else return 23493;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23494;
						else return 23495;
					else
						if (Waterlogged) return 23496;
						else return 23497;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23498;
						else return 23499;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23500;
						else return 23501;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23502;
						else return 23503;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23504;
						else return 23505;
					else
						if (Waterlogged) return 23506;
						else return 23507;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23508;
						else return 23509;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23510;
						else return 23511;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23512;
						else return 23513;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23514;
						else return 23515;
					else
						if (Waterlogged) return 23516;
						else return 23517;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23518;
						else return 23519;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23520;
						else return 23521;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23522;
						else return 23523;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23524;
						else return 23525;
					else
						if (Waterlogged) return 23526;
						else return 23527;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23528;
						else return 23529;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23530;
						else return 23531;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23532;
						else return 23533;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23534;
						else return 23535;
					else
						if (Waterlogged) return 23536;
						else return 23537;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23538;
						else return 23539;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23540;
						else return 23541;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23542;
						else return 23543;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23544;
						else return 23545;
					else
						if (Waterlogged) return 23546;
						else return 23547;
		}
		BlockState WaxedExposedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedChiseledCopper
	{
		constexpr BlockState WaxedOxidizedChiseledCopper()
		{
			return 22952;
		}
	}
	namespace WaxedOxidizedCopper
	{
		constexpr BlockState WaxedOxidizedCopper()
		{
			return 23303;
		}
	}
	namespace WaxedOxidizedCopperBulb
	{
		constexpr BlockState WaxedOxidizedCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24720;
				else return 24721;
			else
				if (Powered) return 24722;
				else return 24723;
		}
		BlockState WaxedOxidizedCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedOxidizedCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedOxidizedCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24036;
							else return 24037;
						else
							if (Powered) return 24038;
							else return 24039;
					else
						if (Open)
							if (Powered) return 24040;
							else return 24041;
						else
							if (Powered) return 24042;
							else return 24043;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24044;
							else return 24045;
						else
							if (Powered) return 24046;
							else return 24047;
					else
						if (Open)
							if (Powered) return 24048;
							else return 24049;
						else
							if (Powered) return 24050;
							else return 24051;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24052;
							else return 24053;
						else
							if (Powered) return 24054;
							else return 24055;
					else
						if (Open)
							if (Powered) return 24056;
							else return 24057;
						else
							if (Powered) return 24058;
							else return 24059;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24060;
							else return 24061;
						else
							if (Powered) return 24062;
							else return 24063;
					else
						if (Open)
							if (Powered) return 24064;
							else return 24065;
						else
							if (Powered) return 24066;
							else return 24067;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24068;
							else return 24069;
						else
							if (Powered) return 24070;
							else return 24071;
					else
						if (Open)
							if (Powered) return 24072;
							else return 24073;
						else
							if (Powered) return 24074;
							else return 24075;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24076;
							else return 24077;
						else
							if (Powered) return 24078;
							else return 24079;
					else
						if (Open)
							if (Powered) return 24080;
							else return 24081;
						else
							if (Powered) return 24082;
							else return 24083;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24084;
							else return 24085;
						else
							if (Powered) return 24086;
							else return 24087;
					else
						if (Open)
							if (Powered) return 24088;
							else return 24089;
						else
							if (Powered) return 24090;
							else return 24091;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24092;
							else return 24093;
						else
							if (Powered) return 24094;
							else return 24095;
					else
						if (Open)
							if (Powered) return 24096;
							else return 24097;
						else
							if (Powered) return 24098;
							else return 24099;
		}
		BlockState WaxedOxidizedCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedOxidizedCopperGrate
	{
		constexpr BlockState WaxedOxidizedCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24690;
			else return 24691;
		}
		BlockState WaxedOxidizedCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedOxidizedCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24548;
							else return 24549;
						else
							if (Waterlogged) return 24550;
							else return 24551;
					else
						if (Powered)
							if (Waterlogged) return 24552;
							else return 24553;
						else
							if (Waterlogged) return 24554;
							else return 24555;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24556;
							else return 24557;
						else
							if (Waterlogged) return 24558;
							else return 24559;
					else
						if (Powered)
							if (Waterlogged) return 24560;
							else return 24561;
						else
							if (Waterlogged) return 24562;
							else return 24563;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24564;
							else return 24565;
						else
							if (Waterlogged) return 24566;
							else return 24567;
					else
						if (Powered)
							if (Waterlogged) return 24568;
							else return 24569;
						else
							if (Waterlogged) return 24570;
							else return 24571;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24572;
							else return 24573;
						else
							if (Waterlogged) return 24574;
							else return 24575;
					else
						if (Powered)
							if (Waterlogged) return 24576;
							else return 24577;
						else
							if (Waterlogged) return 24578;
							else return 24579;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24580;
							else return 24581;
						else
							if (Waterlogged) return 24582;
							else return 24583;
					else
						if (Powered)
							if (Waterlogged) return 24584;
							else return 24585;
						else
							if (Waterlogged) return 24586;
							else return 24587;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24588;
							else return 24589;
						else
							if (Waterlogged) return 24590;
							else return 24591;
					else
						if (Powered)
							if (Waterlogged) return 24592;
							else return 24593;
						else
							if (Waterlogged) return 24594;
							else return 24595;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24596;
							else return 24597;
						else
							if (Waterlogged) return 24598;
							else return 24599;
					else
						if (Powered)
							if (Waterlogged) return 24600;
							else return 24601;
						else
							if (Waterlogged) return 24602;
							else return 24603;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24604;
							else return 24605;
						else
							if (Waterlogged) return 24606;
							else return 24607;
					else
						if (Powered)
							if (Waterlogged) return 24608;
							else return 24609;
						else
							if (Waterlogged) return 24610;
							else return 24611;
		}
		BlockState WaxedOxidizedCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCutCopper
	{
		constexpr BlockState WaxedOxidizedCutCopper()
		{
			return 23304;
		}
	}
	namespace WaxedOxidizedCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedOxidizedCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23628;
				else return 23629;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23630;
				else return 23631;
			else
				if (Waterlogged) return 23632;
				else return 23633;
		}
		BlockState WaxedOxidizedCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedOxidizedCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedOxidizedCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23308;
						else return 23309;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23310;
						else return 23311;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23312;
						else return 23313;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23314;
						else return 23315;
					else
						if (Waterlogged) return 23316;
						else return 23317;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23318;
						else return 23319;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23320;
						else return 23321;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23322;
						else return 23323;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23324;
						else return 23325;
					else
						if (Waterlogged) return 23326;
						else return 23327;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23328;
						else return 23329;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23330;
						else return 23331;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23332;
						else return 23333;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23334;
						else return 23335;
					else
						if (Waterlogged) return 23336;
						else return 23337;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23338;
						else return 23339;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23340;
						else return 23341;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23342;
						else return 23343;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23344;
						else return 23345;
					else
						if (Waterlogged) return 23346;
						else return 23347;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23348;
						else return 23349;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23350;
						else return 23351;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23352;
						else return 23353;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23354;
						else return 23355;
					else
						if (Waterlogged) return 23356;
						else return 23357;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23358;
						else return 23359;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23360;
						else return 23361;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23362;
						else return 23363;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23364;
						else return 23365;
					else
						if (Waterlogged) return 23366;
						else return 23367;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23368;
						else return 23369;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23370;
						else return 23371;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23372;
						else return 23373;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23374;
						else return 23375;
					else
						if (Waterlogged) return 23376;
						else return 23377;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23378;
						else return 23379;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23380;
						else return 23381;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23382;
						else return 23383;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23384;
						else return 23385;
					else
						if (Waterlogged) return 23386;
						else return 23387;
		}
		BlockState WaxedOxidizedCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredChiseledCopper
	{
		constexpr BlockState WaxedWeatheredChiseledCopper()
		{
			return 22953;
		}
	}
	namespace WaxedWeatheredCopper
	{
		constexpr BlockState WaxedWeatheredCopper()
		{
			return 23301;
		}
	}
	namespace WaxedWeatheredCopperBulb
	{
		constexpr BlockState WaxedWeatheredCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24716;
				else return 24717;
			else
				if (Powered) return 24718;
				else return 24719;
		}
		BlockState WaxedWeatheredCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedWeatheredCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WaxedWeatheredCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24100;
							else return 24101;
						else
							if (Powered) return 24102;
							else return 24103;
					else
						if (Open)
							if (Powered) return 24104;
							else return 24105;
						else
							if (Powered) return 24106;
							else return 24107;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24108;
							else return 24109;
						else
							if (Powered) return 24110;
							else return 24111;
					else
						if (Open)
							if (Powered) return 24112;
							else return 24113;
						else
							if (Powered) return 24114;
							else return 24115;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24116;
							else return 24117;
						else
							if (Powered) return 24118;
							else return 24119;
					else
						if (Open)
							if (Powered) return 24120;
							else return 24121;
						else
							if (Powered) return 24122;
							else return 24123;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24124;
							else return 24125;
						else
							if (Powered) return 24126;
							else return 24127;
					else
						if (Open)
							if (Powered) return 24128;
							else return 24129;
						else
							if (Powered) return 24130;
							else return 24131;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24132;
							else return 24133;
						else
							if (Powered) return 24134;
							else return 24135;
					else
						if (Open)
							if (Powered) return 24136;
							else return 24137;
						else
							if (Powered) return 24138;
							else return 24139;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24140;
							else return 24141;
						else
							if (Powered) return 24142;
							else return 24143;
					else
						if (Open)
							if (Powered) return 24144;
							else return 24145;
						else
							if (Powered) return 24146;
							else return 24147;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24148;
							else return 24149;
						else
							if (Powered) return 24150;
							else return 24151;
					else
						if (Open)
							if (Powered) return 24152;
							else return 24153;
						else
							if (Powered) return 24154;
							else return 24155;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 24156;
							else return 24157;
						else
							if (Powered) return 24158;
							else return 24159;
					else
						if (Open)
							if (Powered) return 24160;
							else return 24161;
						else
							if (Powered) return 24162;
							else return 24163;
		}
		BlockState WaxedWeatheredCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WaxedWeatheredCopperGrate
	{
		constexpr BlockState WaxedWeatheredCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24688;
			else return 24689;
		}
		BlockState WaxedWeatheredCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WaxedWeatheredCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24612;
							else return 24613;
						else
							if (Waterlogged) return 24614;
							else return 24615;
					else
						if (Powered)
							if (Waterlogged) return 24616;
							else return 24617;
						else
							if (Waterlogged) return 24618;
							else return 24619;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24620;
							else return 24621;
						else
							if (Waterlogged) return 24622;
							else return 24623;
					else
						if (Powered)
							if (Waterlogged) return 24624;
							else return 24625;
						else
							if (Waterlogged) return 24626;
							else return 24627;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24628;
							else return 24629;
						else
							if (Waterlogged) return 24630;
							else return 24631;
					else
						if (Powered)
							if (Waterlogged) return 24632;
							else return 24633;
						else
							if (Waterlogged) return 24634;
							else return 24635;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24636;
							else return 24637;
						else
							if (Waterlogged) return 24638;
							else return 24639;
					else
						if (Powered)
							if (Waterlogged) return 24640;
							else return 24641;
						else
							if (Waterlogged) return 24642;
							else return 24643;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24644;
							else return 24645;
						else
							if (Waterlogged) return 24646;
							else return 24647;
					else
						if (Powered)
							if (Waterlogged) return 24648;
							else return 24649;
						else
							if (Waterlogged) return 24650;
							else return 24651;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24652;
							else return 24653;
						else
							if (Waterlogged) return 24654;
							else return 24655;
					else
						if (Powered)
							if (Waterlogged) return 24656;
							else return 24657;
						else
							if (Waterlogged) return 24658;
							else return 24659;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24660;
							else return 24661;
						else
							if (Waterlogged) return 24662;
							else return 24663;
					else
						if (Powered)
							if (Waterlogged) return 24664;
							else return 24665;
						else
							if (Waterlogged) return 24666;
							else return 24667;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24668;
							else return 24669;
						else
							if (Waterlogged) return 24670;
							else return 24671;
					else
						if (Powered)
							if (Waterlogged) return 24672;
							else return 24673;
						else
							if (Waterlogged) return 24674;
							else return 24675;
		}
		BlockState WaxedWeatheredCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCutCopper
	{
		constexpr BlockState WaxedWeatheredCutCopper()
		{
			return 23305;
		}
	}
	namespace WaxedWeatheredCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WaxedWeatheredCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23634;
				else return 23635;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23636;
				else return 23637;
			else
				if (Waterlogged) return 23638;
				else return 23639;
		}
		BlockState WaxedWeatheredCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WaxedWeatheredCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WaxedWeatheredCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23388;
						else return 23389;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23390;
						else return 23391;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23392;
						else return 23393;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23394;
						else return 23395;
					else
						if (Waterlogged) return 23396;
						else return 23397;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23398;
						else return 23399;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23400;
						else return 23401;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23402;
						else return 23403;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23404;
						else return 23405;
					else
						if (Waterlogged) return 23406;
						else return 23407;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23408;
						else return 23409;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23410;
						else return 23411;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23412;
						else return 23413;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23414;
						else return 23415;
					else
						if (Waterlogged) return 23416;
						else return 23417;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23418;
						else return 23419;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23420;
						else return 23421;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23422;
						else return 23423;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23424;
						else return 23425;
					else
						if (Waterlogged) return 23426;
						else return 23427;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23428;
						else return 23429;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23430;
						else return 23431;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23432;
						else return 23433;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23434;
						else return 23435;
					else
						if (Waterlogged) return 23436;
						else return 23437;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23438;
						else return 23439;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23440;
						else return 23441;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23442;
						else return 23443;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23444;
						else return 23445;
					else
						if (Waterlogged) return 23446;
						else return 23447;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23448;
						else return 23449;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23450;
						else return 23451;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23452;
						else return 23453;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23454;
						else return 23455;
					else
						if (Waterlogged) return 23456;
						else return 23457;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23458;
						else return 23459;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23460;
						else return 23461;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23462;
						else return 23463;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23464;
						else return 23465;
					else
						if (Waterlogged) return 23466;
						else return 23467;
		}
		BlockState WaxedWeatheredCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredChiseledCopper
	{
		constexpr BlockState WeatheredChiseledCopper()
		{
			return 22949;
		}
	}
	namespace WeatheredCopper
	{
		constexpr BlockState WeatheredCopper()
		{
			return 22940;
		}
	}
	namespace WeatheredCopperBulb
	{
		constexpr BlockState WeatheredCopperBulb(const bool Lit, const bool Powered)
		{
			if (Lit)
				if (Powered) return 24700;
				else return 24701;
			else
				if (Powered) return 24702;
				else return 24703;
		}
		BlockState WeatheredCopperBulb();
		bool Lit(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WeatheredCopperDoor
	{
		enum class Half
		{
			Upper,
			Lower,
		};
		enum class Hinge
		{
			Left,
			Right,
		};
		constexpr BlockState WeatheredCopperDoor(const eBlockFace Facing, const enum Half Half, const enum Hinge Hinge, const bool Open, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23844;
							else return 23845;
						else
							if (Powered) return 23846;
							else return 23847;
					else
						if (Open)
							if (Powered) return 23848;
							else return 23849;
						else
							if (Powered) return 23850;
							else return 23851;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23852;
							else return 23853;
						else
							if (Powered) return 23854;
							else return 23855;
					else
						if (Open)
							if (Powered) return 23856;
							else return 23857;
						else
							if (Powered) return 23858;
							else return 23859;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23860;
							else return 23861;
						else
							if (Powered) return 23862;
							else return 23863;
					else
						if (Open)
							if (Powered) return 23864;
							else return 23865;
						else
							if (Powered) return 23866;
							else return 23867;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23868;
							else return 23869;
						else
							if (Powered) return 23870;
							else return 23871;
					else
						if (Open)
							if (Powered) return 23872;
							else return 23873;
						else
							if (Powered) return 23874;
							else return 23875;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23876;
							else return 23877;
						else
							if (Powered) return 23878;
							else return 23879;
					else
						if (Open)
							if (Powered) return 23880;
							else return 23881;
						else
							if (Powered) return 23882;
							else return 23883;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23884;
							else return 23885;
						else
							if (Powered) return 23886;
							else return 23887;
					else
						if (Open)
							if (Powered) return 23888;
							else return 23889;
						else
							if (Powered) return 23890;
							else return 23891;
			else
				if (Half == Half::Upper)
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23892;
							else return 23893;
						else
							if (Powered) return 23894;
							else return 23895;
					else
						if (Open)
							if (Powered) return 23896;
							else return 23897;
						else
							if (Powered) return 23898;
							else return 23899;
				else
					if (Hinge == Hinge::Left)
						if (Open)
							if (Powered) return 23900;
							else return 23901;
						else
							if (Powered) return 23902;
							else return 23903;
					else
						if (Open)
							if (Powered) return 23904;
							else return 23905;
						else
							if (Powered) return 23906;
							else return 23907;
		}
		BlockState WeatheredCopperDoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Hinge Hinge(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace WeatheredCopperGrate
	{
		constexpr BlockState WeatheredCopperGrate(const bool Waterlogged)
		{
			if (Waterlogged) return 24680;
			else return 24681;
		}
		BlockState WeatheredCopperGrate();
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCopperTrapdoor
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		constexpr BlockState WeatheredCopperTrapdoor(const eBlockFace Facing, const enum Half Half, const bool Open, const bool Powered, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24356;
							else return 24357;
						else
							if (Waterlogged) return 24358;
							else return 24359;
					else
						if (Powered)
							if (Waterlogged) return 24360;
							else return 24361;
						else
							if (Waterlogged) return 24362;
							else return 24363;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24364;
							else return 24365;
						else
							if (Waterlogged) return 24366;
							else return 24367;
					else
						if (Powered)
							if (Waterlogged) return 24368;
							else return 24369;
						else
							if (Waterlogged) return 24370;
							else return 24371;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24372;
							else return 24373;
						else
							if (Waterlogged) return 24374;
							else return 24375;
					else
						if (Powered)
							if (Waterlogged) return 24376;
							else return 24377;
						else
							if (Waterlogged) return 24378;
							else return 24379;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24380;
							else return 24381;
						else
							if (Waterlogged) return 24382;
							else return 24383;
					else
						if (Powered)
							if (Waterlogged) return 24384;
							else return 24385;
						else
							if (Waterlogged) return 24386;
							else return 24387;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24388;
							else return 24389;
						else
							if (Waterlogged) return 24390;
							else return 24391;
					else
						if (Powered)
							if (Waterlogged) return 24392;
							else return 24393;
						else
							if (Waterlogged) return 24394;
							else return 24395;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24396;
							else return 24397;
						else
							if (Waterlogged) return 24398;
							else return 24399;
					else
						if (Powered)
							if (Waterlogged) return 24400;
							else return 24401;
						else
							if (Waterlogged) return 24402;
							else return 24403;
			else
				if (Half == Half::Top)
					if (Open)
						if (Powered)
							if (Waterlogged) return 24404;
							else return 24405;
						else
							if (Waterlogged) return 24406;
							else return 24407;
					else
						if (Powered)
							if (Waterlogged) return 24408;
							else return 24409;
						else
							if (Waterlogged) return 24410;
							else return 24411;
				else
					if (Open)
						if (Powered)
							if (Waterlogged) return 24412;
							else return 24413;
						else
							if (Waterlogged) return 24414;
							else return 24415;
					else
						if (Powered)
							if (Waterlogged) return 24416;
							else return 24417;
						else
							if (Waterlogged) return 24418;
							else return 24419;
		}
		BlockState WeatheredCopperTrapdoor();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		bool Open(BlockState Block);
		bool Powered(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCutCopper
	{
		constexpr BlockState WeatheredCutCopper()
		{
			return 22945;
		}
	}
	namespace WeatheredCutCopperSlab
	{
		enum class Type
		{
			Top,
			Bottom,
			Double,
		};
		constexpr BlockState WeatheredCutCopperSlab(const enum Type Type, const bool Waterlogged)
		{
			if (Type == Type::Top)
				if (Waterlogged) return 23282;
				else return 23283;
			else if (Type == Type::Bottom)
				if (Waterlogged) return 23284;
				else return 23285;
			else
				if (Waterlogged) return 23286;
				else return 23287;
		}
		BlockState WeatheredCutCopperSlab();
		enum Type Type(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeatheredCutCopperStairs
	{
		enum class Half
		{
			Top,
			Bottom,
		};
		enum class Shape
		{
			Straight,
			InnerLeft,
			InnerRight,
			OuterLeft,
			OuterRight,
		};
		constexpr BlockState WeatheredCutCopperStairs(const eBlockFace Facing, const enum Half Half, const enum Shape Shape, const bool Waterlogged)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23036;
						else return 23037;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23038;
						else return 23039;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23040;
						else return 23041;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23042;
						else return 23043;
					else
						if (Waterlogged) return 23044;
						else return 23045;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23046;
						else return 23047;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23048;
						else return 23049;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23050;
						else return 23051;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23052;
						else return 23053;
					else
						if (Waterlogged) return 23054;
						else return 23055;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23056;
						else return 23057;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23058;
						else return 23059;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23060;
						else return 23061;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23062;
						else return 23063;
					else
						if (Waterlogged) return 23064;
						else return 23065;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23066;
						else return 23067;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23068;
						else return 23069;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23070;
						else return 23071;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23072;
						else return 23073;
					else
						if (Waterlogged) return 23074;
						else return 23075;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23076;
						else return 23077;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23078;
						else return 23079;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23080;
						else return 23081;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23082;
						else return 23083;
					else
						if (Waterlogged) return 23084;
						else return 23085;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23086;
						else return 23087;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23088;
						else return 23089;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23090;
						else return 23091;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23092;
						else return 23093;
					else
						if (Waterlogged) return 23094;
						else return 23095;
			else
				if (Half == Half::Top)
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23096;
						else return 23097;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23098;
						else return 23099;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23100;
						else return 23101;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23102;
						else return 23103;
					else
						if (Waterlogged) return 23104;
						else return 23105;
				else
					if (Shape == Shape::Straight)
						if (Waterlogged) return 23106;
						else return 23107;
					else if (Shape == Shape::InnerLeft)
						if (Waterlogged) return 23108;
						else return 23109;
					else if (Shape == Shape::InnerRight)
						if (Waterlogged) return 23110;
						else return 23111;
					else if (Shape == Shape::OuterLeft)
						if (Waterlogged) return 23112;
						else return 23113;
					else
						if (Waterlogged) return 23114;
						else return 23115;
		}
		BlockState WeatheredCutCopperStairs();
		eBlockFace Facing(BlockState Block);
		enum Half Half(BlockState Block);
		enum Shape Shape(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WeepingVines
	{
		constexpr BlockState WeepingVines(const int Age)
		{
			if (Age == 0) return 18611;
			else if (Age == 1) return 18612;
			else if (Age == 2) return 18613;
			else if (Age == 3) return 18614;
			else if (Age == 4) return 18615;
			else if (Age == 5) return 18616;
			else if (Age == 6) return 18617;
			else if (Age == 7) return 18618;
			else if (Age == 8) return 18619;
			else if (Age == 9) return 18620;
			else if (Age == 10) return 18621;
			else if (Age == 11) return 18622;
			else if (Age == 12) return 18623;
			else if (Age == 13) return 18624;
			else if (Age == 14) return 18625;
			else if (Age == 15) return 18626;
			else if (Age == 16) return 18627;
			else if (Age == 17) return 18628;
			else if (Age == 18) return 18629;
			else if (Age == 19) return 18630;
			else if (Age == 20) return 18631;
			else if (Age == 21) return 18632;
			else if (Age == 22) return 18633;
			else if (Age == 23) return 18634;
			else if (Age == 24) return 18635;
			else return 18636;
		}
		BlockState WeepingVines();
		int Age(BlockState Block);
	}
	namespace WeepingVinesPlant
	{
		constexpr BlockState WeepingVinesPlant()
		{
			return 18637;
		}
	}
	namespace WetSponge
	{
		constexpr BlockState WetSponge()
		{
			return 518;
		}
	}
	namespace Wheat
	{
		constexpr BlockState Wheat(const int Age)
		{
			if (Age == 0) return 4278;
			else if (Age == 1) return 4279;
			else if (Age == 2) return 4280;
			else if (Age == 3) return 4281;
			else if (Age == 4) return 4282;
			else if (Age == 5) return 4283;
			else if (Age == 6) return 4284;
			else return 4285;
		}
		BlockState Wheat();
		int Age(BlockState Block);
	}
	namespace WhiteBanner
	{
		constexpr BlockState WhiteBanner(const int Rotation)
		{
			if (Rotation == 0) return 10759;
			else if (Rotation == 1) return 10760;
			else if (Rotation == 2) return 10761;
			else if (Rotation == 3) return 10762;
			else if (Rotation == 4) return 10763;
			else if (Rotation == 5) return 10764;
			else if (Rotation == 6) return 10765;
			else if (Rotation == 7) return 10766;
			else if (Rotation == 8) return 10767;
			else if (Rotation == 9) return 10768;
			else if (Rotation == 10) return 10769;
			else if (Rotation == 11) return 10770;
			else if (Rotation == 12) return 10771;
			else if (Rotation == 13) return 10772;
			else if (Rotation == 14) return 10773;
			else return 10774;
		}
		BlockState WhiteBanner();
		int Rotation(BlockState Block);
	}
	namespace WhiteBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState WhiteBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1688;
					else return 1689;
				else
					if (Part == Part::Head) return 1690;
					else return 1691;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1692;
					else return 1693;
				else
					if (Part == Part::Head) return 1694;
					else return 1695;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1696;
					else return 1697;
				else
					if (Part == Part::Head) return 1698;
					else return 1699;
			else
				if (Occupied)
					if (Part == Part::Head) return 1700;
					else return 1701;
				else
					if (Part == Part::Head) return 1702;
					else return 1703;
		}
		BlockState WhiteBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace WhiteCandle
	{
		constexpr BlockState WhiteCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20741;
					else return 20742;
				else
					if (Waterlogged) return 20743;
					else return 20744;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20745;
					else return 20746;
				else
					if (Waterlogged) return 20747;
					else return 20748;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20749;
					else return 20750;
				else
					if (Waterlogged) return 20751;
					else return 20752;
			else
				if (Lit)
					if (Waterlogged) return 20753;
					else return 20754;
				else
					if (Waterlogged) return 20755;
					else return 20756;
		}
		BlockState WhiteCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace WhiteCandleCake
	{
		constexpr BlockState WhiteCandleCake(const bool Lit)
		{
			if (Lit) return 20999;
			else return 21000;
		}
		BlockState WhiteCandleCake();
		bool Lit(BlockState Block);
	}
	namespace WhiteCarpet
	{
		constexpr BlockState WhiteCarpet()
		{
			return 10728;
		}
	}
	namespace WhiteConcrete
	{
		constexpr BlockState WhiteConcrete()
		{
			return 12728;
		}
	}
	namespace WhiteConcretePowder
	{
		constexpr BlockState WhiteConcretePowder()
		{
			return 12744;
		}
	}
	namespace WhiteGlazedTerracotta
	{
		constexpr BlockState WhiteGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12664;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12665;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12666;
			else return 12667;
		}
		BlockState WhiteGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteShulkerBox
	{
		constexpr BlockState WhiteShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12568;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12569;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12570;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12571;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12572;
			else return 12573;
		}
		BlockState WhiteShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteStainedGlass
	{
		constexpr BlockState WhiteStainedGlass()
		{
			return 5945;
		}
	}
	namespace WhiteStainedGlassPane
	{
		constexpr BlockState WhiteStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9372;
							else return 9373;
						else
							if (West) return 9374;
							else return 9375;
					else
						if (Waterlogged)
							if (West) return 9376;
							else return 9377;
						else
							if (West) return 9378;
							else return 9379;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9380;
							else return 9381;
						else
							if (West) return 9382;
							else return 9383;
					else
						if (Waterlogged)
							if (West) return 9384;
							else return 9385;
						else
							if (West) return 9386;
							else return 9387;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9388;
							else return 9389;
						else
							if (West) return 9390;
							else return 9391;
					else
						if (Waterlogged)
							if (West) return 9392;
							else return 9393;
						else
							if (West) return 9394;
							else return 9395;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9396;
							else return 9397;
						else
							if (West) return 9398;
							else return 9399;
					else
						if (Waterlogged)
							if (West) return 9400;
							else return 9401;
						else
							if (West) return 9402;
							else return 9403;
		}
		BlockState WhiteStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace WhiteTerracotta
	{
		constexpr BlockState WhiteTerracotta()
		{
			return 9356;
		}
	}
	namespace WhiteTulip
	{
		constexpr BlockState WhiteTulip()
		{
			return 2083;
		}
	}
	namespace WhiteWallBanner
	{
		constexpr BlockState WhiteWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11015;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11016;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11017;
			else return 11018;
		}
		BlockState WhiteWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace WhiteWool
	{
		constexpr BlockState WhiteWool()
		{
			return 2047;
		}
	}
	namespace WitherRose
	{
		constexpr BlockState WitherRose()
		{
			return 2087;
		}
	}
	namespace WitherSkeletonSkull
	{
		constexpr BlockState WitherSkeletonSkull(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 8867;
				else if (Rotation == 1) return 8868;
				else if (Rotation == 2) return 8869;
				else if (Rotation == 3) return 8870;
				else if (Rotation == 4) return 8871;
				else if (Rotation == 5) return 8872;
				else if (Rotation == 6) return 8873;
				else if (Rotation == 7) return 8874;
				else if (Rotation == 8) return 8875;
				else if (Rotation == 9) return 8876;
				else if (Rotation == 10) return 8877;
				else if (Rotation == 11) return 8878;
				else if (Rotation == 12) return 8879;
				else if (Rotation == 13) return 8880;
				else if (Rotation == 14) return 8881;
				else return 8882;
			else
				if (Rotation == 0) return 8883;
				else if (Rotation == 1) return 8884;
				else if (Rotation == 2) return 8885;
				else if (Rotation == 3) return 8886;
				else if (Rotation == 4) return 8887;
				else if (Rotation == 5) return 8888;
				else if (Rotation == 6) return 8889;
				else if (Rotation == 7) return 8890;
				else if (Rotation == 8) return 8891;
				else if (Rotation == 9) return 8892;
				else if (Rotation == 10) return 8893;
				else if (Rotation == 11) return 8894;
				else if (Rotation == 12) return 8895;
				else if (Rotation == 13) return 8896;
				else if (Rotation == 14) return 8897;
				else return 8898;
		}
		BlockState WitherSkeletonSkull();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace WitherSkeletonWallSkull
	{
		constexpr BlockState WitherSkeletonWallSkull(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 8899;
				else return 8900;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 8901;
				else return 8902;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 8903;
				else return 8904;
			else
				if (Powered) return 8905;
				else return 8906;
		}
		BlockState WitherSkeletonWallSkull();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
	namespace YellowBanner
	{
		constexpr BlockState YellowBanner(const int Rotation)
		{
			if (Rotation == 0) return 10823;
			else if (Rotation == 1) return 10824;
			else if (Rotation == 2) return 10825;
			else if (Rotation == 3) return 10826;
			else if (Rotation == 4) return 10827;
			else if (Rotation == 5) return 10828;
			else if (Rotation == 6) return 10829;
			else if (Rotation == 7) return 10830;
			else if (Rotation == 8) return 10831;
			else if (Rotation == 9) return 10832;
			else if (Rotation == 10) return 10833;
			else if (Rotation == 11) return 10834;
			else if (Rotation == 12) return 10835;
			else if (Rotation == 13) return 10836;
			else if (Rotation == 14) return 10837;
			else return 10838;
		}
		BlockState YellowBanner();
		int Rotation(BlockState Block);
	}
	namespace YellowBed
	{
		enum class Part
		{
			Head,
			Foot,
		};
		constexpr BlockState YellowBed(const eBlockFace Facing, const bool Occupied, const enum Part Part)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Occupied)
					if (Part == Part::Head) return 1752;
					else return 1753;
				else
					if (Part == Part::Head) return 1754;
					else return 1755;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Occupied)
					if (Part == Part::Head) return 1756;
					else return 1757;
				else
					if (Part == Part::Head) return 1758;
					else return 1759;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Occupied)
					if (Part == Part::Head) return 1760;
					else return 1761;
				else
					if (Part == Part::Head) return 1762;
					else return 1763;
			else
				if (Occupied)
					if (Part == Part::Head) return 1764;
					else return 1765;
				else
					if (Part == Part::Head) return 1766;
					else return 1767;
		}
		BlockState YellowBed();
		eBlockFace Facing(BlockState Block);
		bool Occupied(BlockState Block);
		enum Part Part(BlockState Block);
	}
	namespace YellowCandle
	{
		constexpr BlockState YellowCandle(const int Candles, const bool Lit, const bool Waterlogged)
		{
			if (Candles == 1)
				if (Lit)
					if (Waterlogged) return 20805;
					else return 20806;
				else
					if (Waterlogged) return 20807;
					else return 20808;
			else if (Candles == 2)
				if (Lit)
					if (Waterlogged) return 20809;
					else return 20810;
				else
					if (Waterlogged) return 20811;
					else return 20812;
			else if (Candles == 3)
				if (Lit)
					if (Waterlogged) return 20813;
					else return 20814;
				else
					if (Waterlogged) return 20815;
					else return 20816;
			else
				if (Lit)
					if (Waterlogged) return 20817;
					else return 20818;
				else
					if (Waterlogged) return 20819;
					else return 20820;
		}
		BlockState YellowCandle();
		int Candles(BlockState Block);
		bool Lit(BlockState Block);
		bool Waterlogged(BlockState Block);
	}
	namespace YellowCandleCake
	{
		constexpr BlockState YellowCandleCake(const bool Lit)
		{
			if (Lit) return 21007;
			else return 21008;
		}
		BlockState YellowCandleCake();
		bool Lit(BlockState Block);
	}
	namespace YellowCarpet
	{
		constexpr BlockState YellowCarpet()
		{
			return 10732;
		}
	}
	namespace YellowConcrete
	{
		constexpr BlockState YellowConcrete()
		{
			return 12732;
		}
	}
	namespace YellowConcretePowder
	{
		constexpr BlockState YellowConcretePowder()
		{
			return 12748;
		}
	}
	namespace YellowGlazedTerracotta
	{
		constexpr BlockState YellowGlazedTerracotta(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12680;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12681;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12682;
			else return 12683;
		}
		BlockState YellowGlazedTerracotta();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowShulkerBox
	{
		constexpr BlockState YellowShulkerBox(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 12592;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 12593;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 12594;
			else if (Facing == eBlockFace::BLOCK_FACE_XP) return 12595;
			else if (Facing == eBlockFace::BLOCK_FACE_YP) return 12596;
			else return 12597;
		}
		BlockState YellowShulkerBox();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowStainedGlass
	{
		constexpr BlockState YellowStainedGlass()
		{
			return 5949;
		}
	}
	namespace YellowStainedGlassPane
	{
		constexpr BlockState YellowStainedGlassPane(const bool East, const bool North, const bool South, const bool Waterlogged, const bool West)
		{
			if (East)
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9500;
							else return 9501;
						else
							if (West) return 9502;
							else return 9503;
					else
						if (Waterlogged)
							if (West) return 9504;
							else return 9505;
						else
							if (West) return 9506;
							else return 9507;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9508;
							else return 9509;
						else
							if (West) return 9510;
							else return 9511;
					else
						if (Waterlogged)
							if (West) return 9512;
							else return 9513;
						else
							if (West) return 9514;
							else return 9515;
			else
				if (North)
					if (South)
						if (Waterlogged)
							if (West) return 9516;
							else return 9517;
						else
							if (West) return 9518;
							else return 9519;
					else
						if (Waterlogged)
							if (West) return 9520;
							else return 9521;
						else
							if (West) return 9522;
							else return 9523;
				else
					if (South)
						if (Waterlogged)
							if (West) return 9524;
							else return 9525;
						else
							if (West) return 9526;
							else return 9527;
					else
						if (Waterlogged)
							if (West) return 9528;
							else return 9529;
						else
							if (West) return 9530;
							else return 9531;
		}
		BlockState YellowStainedGlassPane();
		bool East(BlockState Block);
		bool North(BlockState Block);
		bool South(BlockState Block);
		bool Waterlogged(BlockState Block);
		bool West(BlockState Block);
	}
	namespace YellowTerracotta
	{
		constexpr BlockState YellowTerracotta()
		{
			return 9360;
		}
	}
	namespace YellowWallBanner
	{
		constexpr BlockState YellowWallBanner(const eBlockFace Facing)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM) return 11031;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP) return 11032;
			else if (Facing == eBlockFace::BLOCK_FACE_XM) return 11033;
			else return 11034;
		}
		BlockState YellowWallBanner();
		eBlockFace Facing(BlockState Block);
	}
	namespace YellowWool
	{
		constexpr BlockState YellowWool()
		{
			return 2051;
		}
	}
	namespace ZombieHead
	{
		constexpr BlockState ZombieHead(const bool Powered, const int Rotation)
		{
			if (Powered)
				if (Rotation == 0) return 8907;
				else if (Rotation == 1) return 8908;
				else if (Rotation == 2) return 8909;
				else if (Rotation == 3) return 8910;
				else if (Rotation == 4) return 8911;
				else if (Rotation == 5) return 8912;
				else if (Rotation == 6) return 8913;
				else if (Rotation == 7) return 8914;
				else if (Rotation == 8) return 8915;
				else if (Rotation == 9) return 8916;
				else if (Rotation == 10) return 8917;
				else if (Rotation == 11) return 8918;
				else if (Rotation == 12) return 8919;
				else if (Rotation == 13) return 8920;
				else if (Rotation == 14) return 8921;
				else return 8922;
			else
				if (Rotation == 0) return 8923;
				else if (Rotation == 1) return 8924;
				else if (Rotation == 2) return 8925;
				else if (Rotation == 3) return 8926;
				else if (Rotation == 4) return 8927;
				else if (Rotation == 5) return 8928;
				else if (Rotation == 6) return 8929;
				else if (Rotation == 7) return 8930;
				else if (Rotation == 8) return 8931;
				else if (Rotation == 9) return 8932;
				else if (Rotation == 10) return 8933;
				else if (Rotation == 11) return 8934;
				else if (Rotation == 12) return 8935;
				else if (Rotation == 13) return 8936;
				else if (Rotation == 14) return 8937;
				else return 8938;
		}
		BlockState ZombieHead();
		bool Powered(BlockState Block);
		int Rotation(BlockState Block);
	}
	namespace ZombieWallHead
	{
		constexpr BlockState ZombieWallHead(const eBlockFace Facing, const bool Powered)
		{
			if (Facing == eBlockFace::BLOCK_FACE_ZM)
				if (Powered) return 8939;
				else return 8940;
			else if (Facing == eBlockFace::BLOCK_FACE_ZP)
				if (Powered) return 8941;
				else return 8942;
			else if (Facing == eBlockFace::BLOCK_FACE_XM)
				if (Powered) return 8943;
				else return 8944;
			else
				if (Powered) return 8945;
				else return 8946;
		}
		BlockState ZombieWallHead();
		eBlockFace Facing(BlockState Block);
		bool Powered(BlockState Block);
	}
}
